{
  "language": "Solidity",
  "sources": {
    "src/Interfaces/ICompoundERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ICompoundERC20 is IERC20 {\n    function mint(uint256) external returns (uint256);\n\n    function exchangeRateCurrent() external view returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function redeem(uint256) external returns (uint256);\n\n    function redeemUnderlying(uint256) external returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/Test/TestCompound.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"../Interfaces/ICompoundERC20.sol\";\nimport \"../PlayToken/Base.sol\";\nimport \"../Libraries/Constants.sol\";\n\ncontract TestCompound is Base, ICompoundERC20 {\n    constructor() {}\n\n    function name() public pure override returns (string memory) {\n        return \"CTOKEN\";\n    }\n\n    function mint(uint256) external override returns (uint256) {\n        return 0; // TODO\n    }\n\n    function exchangeRateCurrent() external view override returns (uint256) {\n        return Constants.DECIMALS_18;\n    }\n\n    function supplyRatePerBlock() external view override returns (uint256) {\n        return 0; // TODO\n    }\n\n    function redeem(uint256) external override returns (uint256) {\n        return 0; // TODO\n    }\n\n    function redeemUnderlying(uint256) external override returns (uint256) {\n        return 0; // TODO\n    }\n}\n"
    },
    "src/PlayToken/Base.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\n\ninterface IBurnReceiver {\n    function onTokenBurn(\n        address,\n        uint256,\n        bytes calldata\n    ) external returns (bool);\n}\n\ninterface ITransferReceiver {\n    function onTokenTransfer(\n        address,\n        uint256,\n        bytes calldata\n    ) external returns (bool);\n}\n\ninterface IPaidForReceiver {\n    function onTokenPaidFor(\n        address payer,\n        address forAddress,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n\ninterface IApprovalReceiver {\n    function onTokenApproval(\n        address,\n        uint256,\n        bytes calldata\n    ) external returns (bool);\n}\n\nabstract contract Base is IERC20, BaseInternal {\n    using Address for address;\n\n    uint256 internal _totalSupply;\n    mapping(address => uint256) internal _balances;\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    function _internal_totalSupply() internal view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _internal_totalSupply();\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        if (owner == address(this)) {\n            // see transferFrom: address(this) allows anyone\n            return Constants.UINT256_MAX;\n        }\n        return _allowances[owner][spender];\n    }\n\n    function decimals() external pure virtual returns (uint8) {\n        return uint8(18);\n    }\n\n    function transfer(address to, uint256 amount) external override returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferAlongWithETH(address payable to, uint256 amount) external payable returns (bool) {\n        _transfer(msg.sender, to, amount);\n        to.transfer(msg.value);\n        return true;\n    }\n\n    function distributeAlongWithETH(address payable[] memory tos, uint256 totalAmount) external payable returns (bool) {\n        uint256 val = msg.value / tos.length;\n        require(msg.value == val * tos.length, \"INVALID_MSG_VALUE\");\n        uint256 amount = totalAmount / tos.length;\n        require(totalAmount == amount * tos.length, \"INVALID_TOTAL_AMOUNT\");\n        for (uint256 i = 0; i < tos.length; i++) {\n            _transfer(msg.sender, tos[i], amount);\n            tos[i].transfer(val);\n        }\n        return true;\n    }\n\n    function transferAndCall(\n        address to,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return ITransferReceiver(to).onTokenTransfer(msg.sender, amount, data);\n    }\n\n    function transferFromAndCall(\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _transferFrom(from, to, amount);\n        return ITransferReceiver(to).onTokenTransfer(from, amount, data);\n    }\n\n    function payForAndCall(\n        address forAddress,\n        address to,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return IPaidForReceiver(to).onTokenPaidFor(msg.sender, forAddress, amount, data);\n    }\n\n    // TODO ?\n    // function transferFromForAndCall(\n    //     address forAddress,\n    //     address from,\n    //     address to,\n    //     uint256 amount,\n    //     bytes calldata data\n    // ) external returns (bool) {\n    //     _transferFrom(from, to, amount);\n    //     return ITransferForReceiver(to).onTokenTransferFor(from, forAddress, amount, data);\n    // }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external override returns (bool) {\n        _transferFrom(from, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        // TODO support metatx ?\n        _approveFor(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool) {\n        _approveFor(msg.sender, spender, amount);\n        return IApprovalReceiver(spender).onTokenApproval(msg.sender, amount, data);\n    }\n\n    function _approveFor(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal override {\n        require(owner != address(0) && spender != address(0), \"INVALID_ZERO_ADDRESS\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        // anybody can transfer from this\n        // this allow mintAndApprovedCall without gas overhead\n        if (msg.sender != from && from != address(this)) {\n            uint256 currentAllowance = _allowances[from][msg.sender];\n            if (currentAllowance != Constants.UINT256_MAX) {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                require(currentAllowance >= amount, \"NOT_AUTHOIZED_ALLOWANCE\");\n                _allowances[from][msg.sender] = currentAllowance - amount;\n            }\n        }\n        _transfer(from, to, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        require(to != address(0), \"INVALID_ZERO_ADDRESS\");\n        require(to != address(this), \"INVALID_THIS_ADDRESS\");\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"NOT_ENOUGH_TOKENS\");\n        _balances[from] = currentBalance - amount;\n        _balances[to] += amount;\n        emit Transfer(from, to, amount);\n    }\n\n    function _transferAllIfAny(address from, address to) internal {\n        uint256 balanceLeft = _balances[from];\n        if (balanceLeft > 0) {\n            _balances[from] = 0;\n            _balances[to] += balanceLeft;\n            emit Transfer(from, to, balanceLeft);\n        }\n    }\n\n    function _mint(address to, uint256 amount) internal override {\n        _totalSupply += amount;\n        _balances[to] += amount;\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burnFrom(address from, uint256 amount) internal override {\n        uint256 currentBalance = _balances[from];\n        require(currentBalance >= amount, \"NOT_ENOUGH_TOKENS\");\n        _balances[from] = currentBalance - amount;\n        _totalSupply -= amount;\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "src/Libraries/Constants.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\nlibrary Constants {\n    uint256 internal constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n    uint256 internal constant DECIMALS_18 = 1000000000000000000;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/PlayToken/BaseInternal.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nabstract contract BaseInternal {\n    function _approveFor(\n        address owner,\n        address target,\n        uint256 amount\n    ) internal virtual;\n\n    function name() public virtual returns (string memory);\n\n    function _mint(address to, uint256 amount) internal virtual;\n\n    function _burnFrom(address from, uint256 amount) internal virtual;\n\n    function _internal_totalSupply() internal view virtual returns (uint256);\n}\n"
    },
    "src/PlayToken/YearnVaultV2Adapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\n\ninterface YearnVaultV2 is IERC20 {\n    function deposit(uint256 amount) external returns (uint256);\n\n    function withdraw(uint256 amount, address to) external returns (uint256);\n}\n\nabstract contract YearnVaultV2Adapter is BaseInternal {\n    using SafeERC20 for IERC20;\n\n    YearnVaultV2 immutable _yvToken;\n    IERC20 immutable _underlyingToken;\n\n    constructor(IERC20 underlyingToken, YearnVaultV2 yvToken) {\n        _underlyingToken = underlyingToken;\n        _yvToken = yvToken;\n        underlyingToken.approve(address(yvToken), Constants.UINT256_MAX);\n    }\n\n    function _use(uint256 maxAmount, address from) internal returns (uint256) {\n        if (from != address(this)) {\n            _underlyingToken.safeTransferFrom(from, address(this), maxAmount);\n        }\n        _yvToken.deposit(maxAmount);\n        return maxAmount;\n    }\n\n    function _takeBack(uint256 maxAmount, address to) internal returns (uint256) {\n        uint256 sharesToWithdraw = _shareForUnderlyingAmount(maxAmount); // TODO\n        return _yvToken.withdraw(sharesToWithdraw, to); // TODO check it cannot return higher than amount, else should we bring it back ?\n    }\n\n    function _withdrawInterest(uint256 maxAmount, address to) internal returns (uint256) {\n        uint256 totalUnderlying = _underlyingTokenAvailable();\n        uint256 availableToWithdraw = totalUnderlying - _internal_totalSupply();\n        if (maxAmount > availableToWithdraw) {\n            maxAmount = availableToWithdraw;\n        }\n        uint256 sharesToWithdraw = _shareForUnderlyingAmount(maxAmount); // TODO\n        return _yvToken.withdraw(sharesToWithdraw, to); // TODO check it cannot return higher than amount, else should we bring it back ?\n    }\n\n    function _shareForUnderlyingAmount(uint256 underlyingAmount) internal view returns (uint256) {\n        return underlyingAmount; // TODO\n    }\n\n    function _underlyingTokenAvailable() internal view returns (uint256) {\n        uint256 yvShares = _yvToken.balanceOf(address(this));\n        uint256 underlyingTokenAmount = yvShares; // TODO\n        return underlyingTokenAmount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "src/PlayToken/Play.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../Interfaces/ITokenManager.sol\";\nimport \"./Base.sol\";\nimport \"./WithPermitAndFixedDomain.sol\";\nimport \"./CompoundAdapter.sol\";\n\ncontract Play is Base, WithPermitAndFixedDomain, CompoundAdapter {\n    using Address for address;\n\n    address internal _owner; // TODO ownership as extension\n\n    constructor(\n        IERC20 underlyingToken,\n        ICompoundERC20 cToken,\n        address owner\n    ) WithPermitAndFixedDomain(\"1\") CompoundAdapter(underlyingToken, cToken) {\n        _owner = owner;\n    }\n\n    string public constant symbol = \"ETHERPLAY\";\n\n    function name() public pure override returns (string memory) {\n        return \"Etherplay\";\n    }\n\n    // function mintApproveAndCall(\n    //     uint256 amount,\n    //     address target,\n    //     bytes calldata data\n    // ) external {\n    //     // TODO support metatx ?\n    //     // TODO support permit or transfer gateways\n    //     // support ERC20 permit as appended calldata\n    //     address sender = msg.sender;\n    //     _wrappedToken.transferFrom(sender, address(this), amount);\n    //     _mint(address(this), amount);\n    //     if (_allowances[address(this)][target] < amount) {\n    //         // this is the only function that will let address(this) owns some token\n    //         // and it ensure it never keep it\n    //         // as such we can approve it all\n    //         _approveFor(address(this), target, UINT256_MAX);\n    //     }\n    //     target.functionCall(data);\n    //     _transferAllIfAny(address(this), sender);\n    //     // _approveFor(address(this), target, 0); // not necessary\n    // }\n\n    function mintAndApprovedCall(\n        uint256 maxAmount,\n        address target,\n        bytes calldata data\n    ) external {\n        // TODO support metatx ?\n        // TODO support permit or transfer gateways\n        // support ERC20 permit as appended calldata\n        address sender = msg.sender;\n        uint256 actualAmount = _use(maxAmount, sender);\n        _mint(sender, actualAmount);\n        target.functionCall(data); // target can only assume the sender is the contract and will thus refund it if any\n        _transferAllIfAny(address(this), sender);\n    }\n\n    function mintAndCall(\n        uint256 maxAmount,\n        address target,\n        bool requireFullAmount,\n        bytes calldata data\n    ) external returns (uint256) {\n        // TODO support metatx ?\n        // TODO support permit or transfer gateways\n        // support ERC20 permit as appended calldata\n        address sender = msg.sender;\n        uint256 actualAmount = _use(maxAmount, sender);\n        if (requireFullAmount) {\n            require(actualAmount == maxAmount, \"COULD_NOT_MINT_REQUESTED_AMOUNT\");\n        }\n        _mint(sender, actualAmount);\n        ITransferReceiver(target).onTokenTransfer(sender, actualAmount, data);\n        // in this case the target will know the original sender and so refund will go to sender, no need to transfer any bacl afterward\n        // but in case :\n        _transferAllIfAny(address(this), sender);\n        return actualAmount;\n    }\n\n    function mint(uint256 maxAmount) external returns (uint256) {\n        // TODO support permit or transfer gateways\n        // support ERC20 permit as appended calldata\n        address sender = msg.sender;\n        uint256 actualAmount = _use(maxAmount, sender);\n        _mint(sender, actualAmount);\n        return actualAmount;\n    }\n\n    function burn(uint256 maxAmount) external returns (uint256) {\n        address sender = msg.sender;\n        uint256 amountBurnt = _takeBack(maxAmount, sender);\n        _burnFrom(sender, amountBurnt);\n        return amountBurnt;\n    }\n\n    function burnTo(uint256 maxAmount, address to) external returns (uint256) {\n        address sender = msg.sender;\n        uint256 amountBurnt = _takeBack(maxAmount, to);\n        _burnFrom(sender, amountBurnt);\n        return amountBurnt;\n    }\n\n    function burnToAndCall(\n        uint256 maxAmount,\n        address target,\n        bool requireFullAmount,\n        bytes calldata data\n    ) external returns (uint256) {\n        address sender = msg.sender;\n        uint256 amountBurnt = _takeBack(maxAmount, target);\n        if (requireFullAmount) {\n            require(amountBurnt == maxAmount, \"COULD_NOT_BURN_REQUESTED_AMOUNT\");\n        }\n        _burnFrom(sender, amountBurnt);\n        IBurnReceiver(target).onTokenBurn(sender, amountBurnt, data);\n        return amountBurnt;\n    }\n\n    function withdraw(uint256 maxAmount, address to) external returns (uint256) {\n        require(msg.sender == _owner, \"NOT_AUTHORIZED\");\n        return _withdrawInterest(maxAmount, to);\n    }\n\n    // can be used to render user full in case of lack of underlying token\n    // this does not create token in return\n    function depositWithoutReturn(uint256 maxAmount) external returns (uint256) {\n        address sender = msg.sender;\n        return _use(maxAmount, sender);\n    }\n}\n"
    },
    "src/Interfaces/ITokenManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\ninterface ITokenManager {\n    function takeBack(uint256 amount) external;\n}\n"
    },
    "src/PlayToken/WithPermitAndFixedDomain.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"./BaseInternal.sol\";\nimport \"../Interfaces/IERC2612Standalone.sol\";\n\nabstract contract WithPermitAndFixedDomain is BaseInternal, IERC2612Standalone {\n    bytes32 internal constant PERMIT_TYPEHASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    bytes32 public immutable override DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) internal _nonces;\n\n    constructor(string memory version) {\n        if (bytes(version).length == 0) {\n            version = \"1\";\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,address verifyingContract)\"),\n                keccak256(bytes(name())),\n                keccak256(bytes(version)),\n                address(this)\n            )\n        );\n    }\n\n    function nonces(address owner) external view override returns (uint256) {\n        return _nonces[owner];\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(owner != address(0), \"INVALID_ZERO_ADDRESS\");\n\n        uint256 currentNonce = _nonces[owner];\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentNonce, deadline))\n            )\n        );\n        require(owner == ecrecover(digest, v, r, s), \"INVALID_SIGNATURE\");\n        require(deadline == 0 || block.timestamp <= deadline, \"TOO_LATE\");\n\n        _nonces[owner] = currentNonce + 1;\n        _approveFor(owner, spender, value);\n    }\n}\n"
    },
    "src/PlayToken/CompoundAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../Interfaces/ICompoundERC20.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\n\nabstract contract CompoundAdapter is BaseInternal {\n    using SafeERC20 for IERC20;\n\n    ICompoundERC20 immutable _cToken;\n    IERC20 immutable _underlyingToken;\n\n    constructor(IERC20 underlyingToken, ICompoundERC20 cToken) {\n        _underlyingToken = underlyingToken;\n        _cToken = cToken;\n        underlyingToken.approve(address(cToken), Constants.UINT256_MAX);\n    }\n\n    function _use(uint256 maxAmount, address from) internal returns (uint256) {\n        if (from != address(this)) {\n            _underlyingToken.safeTransferFrom(from, address(this), maxAmount);\n        }\n        require(_cToken.mint(maxAmount) == 0, \"ERROR_MINT\");\n        return maxAmount; //TODO check ?\n    }\n\n    function _takeBack(uint256 maxAmount, address to) internal returns (uint256) {\n        require(_cToken.redeemUnderlying(maxAmount) == 0, \"ERROR_REDEEM_UNDERLYING\");\n        _underlyingToken.safeTransfer(to, maxAmount);\n        return maxAmount;\n    }\n\n    function _withdrawInterest(uint256 maxAmount, address to) internal returns (uint256) {\n        uint256 totalUnderlying = _underlyingTokenAvailable();\n        uint256 availableToWithdraw = totalUnderlying - _internal_totalSupply();\n        if (maxAmount > availableToWithdraw) {\n            maxAmount = availableToWithdraw;\n        }\n        require(_cToken.redeemUnderlying(maxAmount) == 0, \"ERROR_REDEEM_UNDERLYING\");\n        _underlyingToken.safeTransfer(to, maxAmount);\n        return maxAmount;\n    }\n\n    function _underlyingTokenAvailable() internal view returns (uint256) {\n        uint256 compoundBalance = _cToken.balanceOf(address(this));\n        uint256 exchangeRateMantissa = _cToken.exchangeRateCurrent();\n        return (compoundBalance * exchangeRateMantissa) / Constants.DECIMALS_18;\n    }\n}\n"
    },
    "src/Interfaces/IERC2612Standalone.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\n\npragma solidity 0.7.5;\n\ninterface IERC2612Standalone {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function nonces(address owner) external view returns (uint256);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "src/PlayToken/l2/Reserve.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../Play.sol\";\nimport \"ethereum-transfer-gateway/src/solc_0.7/BaseERC20TransferRecipient.sol\";\n\ncontract Reserve is BaseERC20TransferRecipient {\n    using SafeERC20 for IERC20;\n\n    Play internal immutable _playToken;\n    IERC20 internal immutable _dai;\n    IERC20 internal immutable _usdc;\n    address internal immutable _owner;\n\n    constructor(\n        Play token,\n        IERC20 dai,\n        IERC20 usdc,\n        address owner,\n        address gateway\n    ) BaseERC20TransferRecipient(gateway) {\n        _playToken = token;\n        _owner = owner;\n        _dai = dai;\n        _usdc = usdc;\n        // TODO pre_approve\n    }\n\n    function approved_payInDAI(\n        uint256 amount,\n        address to,\n        bytes calldata data\n    ) external {\n        _payInViaTransferFrom(msg.sender, _dai, amount, to, data); // TODO decimal compatibility\n    }\n\n    function approved_payInUSDC(\n        uint256 amount,\n        address to,\n        bytes calldata data\n    ) external {\n        _payInViaTransferFrom(msg.sender, _usdc, amount, to, data); // TODO decimal compatibility\n    }\n\n    function payViaGateway(address to, bytes calldata data) external {\n        (address token, uint256 amount, address sender) = _getTokenTransfer(); // TODO import transfer-gateway repo\n        require(IERC20(token) == _dai || IERC20(token) == _usdc, \"INVALID_PAYMENT_TOKEN\");\n        // TODO decimal compatibility\n        _payIn(sender, amount, to, data);\n    }\n\n    function withdraw(\n        IERC20 token,\n        uint256 amount,\n        address to\n    ) external {\n        require(msg.sender == _owner, \"NOT_AUTHORIZED\");\n        token.safeTransfer(to, amount);\n    }\n\n    // ----------------------------------------------------------\n    //                        INTERNALS\n    // ----------------------------------------------------------\n\n    function _payInViaTransferFrom(\n        address payer,\n        IERC20 payToken,\n        uint256 amount,\n        address to,\n        bytes memory data\n    ) internal {\n        payToken.safeTransferFrom(payer, address(this), amount);\n        _payIn(payer, amount, to, data);\n    }\n\n    function _payIn(\n        address payer,\n        uint256 amount,\n        address to,\n        bytes memory data\n    ) internal {\n        if (data.length > 0) {\n            _playToken.payForAndCall(payer, to, amount, data);\n        } else {\n            _playToken.transfer(to, amount);\n        }\n    }\n}\n"
    },
    "ethereum-transfer-gateway/src/solc_0.7/BaseERC20TransferRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nabstract contract BaseERC20TransferRecipient {\n    address internal immutable _erc20TransferGateway;\n\n    constructor(address erc20TransferGateway) {\n        _erc20TransferGateway = erc20TransferGateway;\n    }\n\n    function _getTokenTransfer()\n        internal\n        view\n        returns (\n            address token,\n            uint256 amount,\n            address sender\n        )\n    {\n        sender = msg.sender;\n        if (sender == _erc20TransferGateway) {\n            return _extractTokenTransfer(msg.data);\n        }\n    }\n\n    function _extractTokenTransfer(bytes memory data)\n        internal\n        pure\n        returns (\n            address token,\n            uint256 amount,\n            address sender\n        )\n    {\n        uint256 length = data.length;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sender := mload(sub(add(data, length), 0x0))\n            amount := mload(sub(add(data, length), 0x20))\n            token := mload(sub(add(data, length), 0x40))\n        }\n    }\n}\n"
    },
    "src/PlayToken/DynamicAdapterWithProtectedSwitch.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\nimport \"./WithOwner.sol\";\n\ninterface Adapter {\n    function use(uint256 maxAmount, address from) external returns (uint256);\n\n    function takeBack(uint256 maxAmount, address to) external returns (uint256);\n\n    function withdrawInterest(uint256 maxAmount, address to) external returns (uint256);\n\n    function withdrawAllTo(address to) external returns (uint256);\n\n    function withdrawWhatIsLeft(address to) external returns (uint256); // TODO implement in adapter\n}\n\nabstract contract DynamicAdapterWithProtectedSwitch is BaseInternal, WithOwner {\n    using SafeERC20 for IERC20;\n\n    event AdapterUpdated(Adapter newAdapter);\n\n    Adapter internal _currentAdapter;\n    IERC20 immutable _underlyingToken;\n\n    constructor(\n        IERC20 underlyingToken,\n        Adapter initialAdapter,\n        address\n    ) {\n        _underlyingToken = underlyingToken;\n        _currentAdapter = initialAdapter;\n        emit AdapterUpdated(initialAdapter);\n    }\n\n    function switchAdapter(Adapter newAdapter) external onlyOwner {\n        Adapter oldAdapter = _currentAdapter;\n        uint256 amount = oldAdapter.withdrawAllTo(address(newAdapter));\n\n        uint256 expectedAmount = _internal_totalSupply();\n        if (amount < expectedAmount) {\n            require(\n                _underlyingToken.transferFrom(msg.sender, address(newAdapter), expectedAmount - amount),\n                \"DOES_NOT_COVER_LOSS\"\n            );\n        }\n        newAdapter.use(expectedAmount, address(newAdapter));\n        _currentAdapter = newAdapter;\n        emit AdapterUpdated(newAdapter);\n    }\n\n    function _use(uint256 maxAmount, address from) internal returns (uint256) {\n        return _currentAdapter.use(maxAmount, from);\n    }\n\n    function _takeBack(uint256 maxAmount, address to) internal returns (uint256) {\n        return _currentAdapter.takeBack(maxAmount, to);\n    }\n\n    function _withdrawInterest(uint256 maxAmount, address to) internal returns (uint256) {\n        return _currentAdapter.withdrawInterest(maxAmount, to);\n    }\n\n    // TODO use it to get any shares left (see yearn vault v2 for example) in case withdrawAllTo did not get all\n    // TODO implement it in adapters\n    function withdrawFromInactiveAdapter(Adapter adapter, address to) external onlyOwner returns (uint256) {\n        require(_currentAdapter != adapter, \"ADAPTER_ACTIVE\");\n        return adapter.withdrawWhatIsLeft(to);\n    }\n}\n"
    },
    "src/PlayToken/WithOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\nimport \"../Interfaces/IERC165.sol\";\n\ncontract WithOwner is IERC165 {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    address public owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external pure virtual override returns (bool) {\n        return interfaceID == 0x7f5828d0 || interfaceID == 0x01ffc9a7;\n    }\n}\n"
    },
    "src/Interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"
    },
    "src/PlayToken/DynamicAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\nimport \"./WithOwner.sol\";\n\ninterface Adapter {\n    function underlyingTokenAvailable() external view returns (uint256); // TODO implement in adapter\n\n    function use(uint256 maxAmount, address from) external returns (uint256);\n\n    function takeBack(uint256 maxAmount, address to) external returns (uint256);\n\n    function withdrawInterest(uint256 maxAmount, address to) external returns (uint256);\n\n    function withdrawAllTo(address to) external returns (uint256);\n\n    function withdrawWhatIsLeft(address to) external returns (uint256); // TODO implement in adapter\n}\n\nabstract contract DyynamicAdapter is BaseInternal, WithOwner {\n    using SafeERC20 for IERC20;\n\n    event AdapterUpdated(Adapter newAdapter);\n\n    Adapter internal _currentAdapter;\n    IERC20 immutable _underlyingToken;\n\n    constructor(\n        IERC20 underlyingToken,\n        Adapter initialAdapter,\n        address\n    ) {\n        _underlyingToken = underlyingToken;\n        _currentAdapter = initialAdapter;\n        emit AdapterUpdated(initialAdapter);\n    }\n\n    function switchAdapter(Adapter newAdapter) external onlyOwner {\n        Adapter oldAdapter = _currentAdapter;\n        uint256 amount = oldAdapter.withdrawAllTo(address(newAdapter));\n        newAdapter.use(amount, address(newAdapter));\n        _currentAdapter = newAdapter;\n        emit AdapterUpdated(newAdapter);\n    }\n\n    function _use(uint256 maxAmount, address from) internal returns (uint256) {\n        return _currentAdapter.use(maxAmount, from);\n    }\n\n    function _underlyingTokenAmountForTokenAmount(Adapter adapter, uint256 amount) internal view returns (uint256) {\n        uint256 expectedAmount = _internal_totalSupply();\n        uint256 underlyingTokenAvailable = adapter.underlyingTokenAvailable();\n        if (underlyingTokenAvailable < expectedAmount) {\n            // if the underlying tokens get missing we adjust the amount for everyone to match the ratio\n            // This should only happen if the adapter default and cannot provide the underlying token back.\n            // this ensure the cost is spread over all present and future owners of the token.\n            // if the switching of adapter is prevented when that amount is not equal, this cannot happen\n            return (amount * underlyingTokenAvailable) / expectedAmount;\n        }\n        return amount;\n    }\n\n    function _takeBack(uint256 maxAmount, address to) internal returns (uint256) {\n        Adapter adapter = _currentAdapter;\n        uint256 amountToTake = _underlyingTokenAmountForTokenAmount(adapter, maxAmount); // we consider the ratio\n        uint256 amountTaken = adapter.takeBack(amountToTake, to);\n        return (maxAmount * amountTaken) / amountToTake; // we still burn the same amount of PlayTokem though\n    }\n\n    function _withdrawInterest(uint256 maxAmount, address to) internal returns (uint256) {\n        // Adapter adapter = _currentAdapter;\n        // uint256 expectedAmount = _internal_totalSupply();\n        // uint256 underlyingTokenAvailable = adapter.underlyingTokenAvailable();\n        // require(underlyingTokenAvailable > expectedAmount, \"NOT_ENOUGH_UNDERLYING_TOKEN\");\n        // uint256 toTake = underlyingTokenAvailable - expectedAmount;\n        // if (toTake > maxAmount) {\n        //     toTake = maxAmount;\n        // }\n        // return adapter.withdrawInterest(toTake, to);\n        return _currentAdapter.withdrawInterest(maxAmount, to); // adapter ensure underlying token cannot be taken if it does not cover for token owner\n    }\n\n    // TODO use it to get any shares left (see yearn vault v2 for example) in case withdrawAllTo did not get all\n    // TODO implement it in adapters\n    function withdrawFromInactiveAdapter(Adapter adapter, address to) external onlyOwner returns (uint256) {\n        require(_currentAdapter != adapter, \"ADAPTER_ACTIVE\");\n        return adapter.withdrawWhatIsLeft(to);\n    }\n}\n"
    },
    "src/PlayToken/AaveAdapter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-1.0\npragma solidity 0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./BaseInternal.sol\";\nimport \"../Libraries/Constants.sol\";\n\ninterface AaveLendingPool {\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external;\n}\n\nabstract contract AaveAdapter is BaseInternal {\n    using SafeERC20 for IERC20;\n\n    AaveLendingPool immutable _aaveLendingPool;\n    IERC20 immutable _aToken;\n    IERC20 immutable _underlyingToken;\n\n    constructor(\n        IERC20 underlyingToken,\n        AaveLendingPool aaveLendingPool,\n        IERC20 aToken\n    ) {\n        _underlyingToken = underlyingToken;\n        _aaveLendingPool = aaveLendingPool;\n        _aToken = aToken;\n        underlyingToken.approve(address(aaveLendingPool), Constants.UINT256_MAX);\n        aToken.approve(address(aaveLendingPool), Constants.UINT256_MAX);\n    }\n\n    function _use(uint256 maxAmount, address from) internal returns (uint256) {\n        if (from != address(this)) {\n            _underlyingToken.safeTransferFrom(from, address(this), maxAmount);\n        }\n        _aaveLendingPool.deposit(address(_underlyingToken), maxAmount, address(this), 0);\n        return maxAmount; // TODO check\n    }\n\n    function _takeBack(uint256 maxAmount, address to) internal returns (uint256) {\n        _aaveLendingPool.withdraw(address(_underlyingToken), maxAmount, to);\n        return maxAmount; // TODO check\n    }\n\n    function _withdrawInterest(uint256 maxAmount, address to) internal returns (uint256) {\n        uint256 totalUnderlying = _underlyingTokenAvailable();\n        uint256 availableToWithdraw = totalUnderlying - _internal_totalSupply();\n        if (maxAmount > availableToWithdraw) {\n            maxAmount = availableToWithdraw;\n        }\n        _aaveLendingPool.withdraw(address(_underlyingToken), maxAmount, to);\n        return maxAmount; // TODO check ?\n    }\n\n    function _underlyingTokenAvailable() internal view returns (uint256) {\n        return _aToken.balanceOf(address(this));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}