{
  "address": "0xcE0eA66D6f1511DDE2D01B4377532b7D73D393cF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "resolveWindow",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "timePerDistance",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "exitDuration",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fleetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "toLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        }
      ],
      "name": "Attack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        }
      ],
      "name": "FleetArrived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumSpaceships",
          "type": "uint32"
        }
      ],
      "name": "FleetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acquirer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numSpaceships",
          "type": "uint32"
        }
      ],
      "name": "PlanetStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStake",
          "type": "uint256"
        }
      ],
      "name": "StakeToWithdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "acquireViaTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "exitFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "fetchAndWithdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDiscovered",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "minX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minY",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxY",
              "type": "uint32"
            }
          ],
          "internalType": "struct OuterSpace.Discovered",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        }
      ],
      "name": "getFleet",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "launchTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneisHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "getPlanet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "exitTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct OuterSpace.ExternalPlanet",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "subX",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "subY",
              "type": "int8"
            },
            {
              "internalType": "uint16",
              "name": "stake",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "production",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "natives",
              "type": "uint16"
            }
          ],
          "internalType": "struct OuterSpace.PlanetStats",
          "name": "stats",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "getPlanetStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "exitTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct OuterSpace.ExternalPlanet[]",
          "name": "planetStates",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "minX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minY",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxY",
              "type": "uint32"
            }
          ],
          "internalType": "struct OuterSpace.Discovered",
          "name": "discovered",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "resolveFleet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attacker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "resolveFleetFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "toHash",
          "type": "bytes32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "toHash",
          "type": "bytes32"
        }
      ],
      "name": "sendFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a679044f18dea72121b8f7fcd54db15c2d38f42339a897458f3a9988fd0498c",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0xcE0eA66D6f1511DDE2D01B4377532b7D73D393cF",
    "transactionIndex": 12,
    "gasUsed": "4296995",
    "logsBloom": "0x
    "blockHash": "0xe0312ed80278aa7a91fa67810bef08c60f662b7528709baa783393685c804d03",
    "transactionHash": "0x8a679044f18dea72121b8f7fcd54db15c2d38f42339a897458f3a9988fd0498c",
    "logs": [],
    "blockNumber": 8050118,
    "cumulativeGasUsed": "4893487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0ce6d17B1E361C29A4e23c7B5a28cF81d4a284a8",
    "0xe0c3fa9ae97fc9b60baae605896b5e3e7cecb6baaaa4708162d1ec51e8d65a69",
    7200,
    20,
    1440
  ],
  "linkedData": {
    "genesisHash": "0xe0c3fa9ae97fc9b60baae605896b5e3e7cecb6baaaa4708162d1ec51e8d65a69",
    "resolveWindow": 7200,
    "timePerDistance": 20,
    "exitDuration": 1440
  },
  "solcInputHash": "04cf1eb97bdf6390c49f96c605fbdf96",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"resolveWindow\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"timePerDistance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"exitDuration\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fleetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"toLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"}],\"name\":\"FleetArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumSpaceships\",\"type\":\"uint32\"}],\"name\":\"FleetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acquirer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"}],\"name\":\"PlanetStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"StakeToWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acquireViaTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"exitFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"fetchAndWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscovered\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"}],\"internalType\":\"struct OuterSpace.Discovered\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"}],\"name\":\"getFleet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"launchTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneisHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"getPlanet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"exitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct OuterSpace.ExternalPlanet\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"subX\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"subY\",\"type\":\"int8\"},{\"internalType\":\"uint16\",\"name\":\"stake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"production\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"natives\",\"type\":\"uint16\"}],\"internalType\":\"struct OuterSpace.PlanetStats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"getPlanetStates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"exitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct OuterSpace.ExternalPlanet[]\",\"name\":\"planetStates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"}],\"internalType\":\"struct OuterSpace.Discovered\",\"name\":\"discovered\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"resolveFleet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attacker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"resolveFleetFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"name\":\"sendFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OuterSpace.sol\":\"OuterSpace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the owner can execute them\\n    /// It also allows these functions to be called inside a contructor when the contract\\n    /// is meant to be used without proxy\\n    modifier proxied() {\\n        address ownerAddress = _owner();\\n        // With hardhat-deploy proxies\\n        // the ownerAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as standalone\\n        // it simply has to execute the `proxied` function\\n        // This ensure the ownerAddress is never zero post deployment\\n        if (ownerAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == ownerAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3725aa35fb23643a5adc057cb34f4e5c7fba9b223e549f65aa03de4109053693\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/Libraries/Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.7.5;\\n\\n// TODO remove\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Extraction {\\n    function value(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 size\\n    ) internal pure returns (uint256) {\\n        return uint256((data >> leastSignificantBit)) % 2**size;\\n    }\\n\\n    function value8Mod(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 mod\\n    ) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % mod);\\n    }\\n\\n    function value8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % 2**8);\\n    }\\n\\n    // 1+1+2+3+4+6+7+8+8+7+6+4+3+2+1+1 // aproximation of normal distribution with mean=7.5 and standard deviation=3 for 16 values\\n    bytes32 constant n_m7_5_sd3 = 0x01223334444555555666666677777777888888889999999AAAAAABBBBCCCDDEF;\\n\\n    function normal8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        uint8 index = value8Mod(data, leastSignificantBit, 64);\\n        uint8 first = index / 2;\\n        uint8 second = index % 2;\\n        uint8 slot = uint8(n_m7_5_sd3[first]);\\n        if (second == 0) {\\n            return slot >> 4;\\n        } else {\\n            return slot % 16;\\n        }\\n    }\\n\\n    function normal16(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        bytes32 selection\\n    ) internal pure returns (uint16) {\\n        uint8 index = normal8(data, leastSignificantBit);\\n        return uint16(uint8(selection[index * 2])) * 2**8 + uint16(uint8(selection[index * 2 + 1]));\\n    }\\n}\\n\",\"keccak256\":\"0x4765abf887ada002e90311d342a0aed00a1e9122fd2c46a63d54ce53d6580067\",\"license\":\"AGPL-1.0\"},\"src/Libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary Math {\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require(b == 0 || a == 0 || ((c = a * b) / b) == a, overflowError);\\n    }\\n\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a + b) >= a, overflowError);\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory underflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, underflowError);\\n    }\\n\\n    function mul18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, b18, overflowError) / 10**18;\\n    }\\n\\n    function div18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, 10**18, overflowError) / b18;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function smin(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function smax(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function sqrt(uint256 a) internal pure returns (uint256 c) {\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2891f35c9f62a52dead283c1ec677f7279c0b0c220ece84f32da3e00f9adf786\",\"license\":\"AGPL-1.0\"},\"src/OuterSpace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Libraries/Extraction.sol\\\";\\nimport \\\"./Libraries/Math.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n// TODO transfer Planet ?\\n// cons:\\n// - allow a player to easily have multiple address hiding its true potential\\n\\ncontract OuterSpace is Proxied {\\n    using Extraction for bytes32;\\n\\n    uint256 internal constant DECIMALS_18 = 1e18;\\n    uint32 internal constant ACTIVE_MASK = 2**31;\\n    int256 internal constant UINT32_MAX = 2**32 - 1;\\n\\n    bytes32 internal immutable _genesis;\\n    IERC20 internal immutable _stakingToken;\\n    uint256 internal immutable _resolveWindow;\\n    uint256 internal immutable _timePerDistance;\\n    uint256 internal immutable _exitDuration;\\n\\n    mapping(uint256 => Planet) internal _planets;\\n    mapping(uint256 => Fleet) internal _fleets;\\n\\n    mapping(address => uint256) internal _stakeReadyToBeWithdrawn;\\n\\n    mapping(address => mapping(address => bool)) internal _operators;\\n\\n    struct Discovered {\\n        uint32 minX;\\n        uint32 maxX;\\n        uint32 minY;\\n        uint32 maxY;\\n    }\\n\\n    Discovered internal _discovered;\\n\\n    struct Planet {\\n        address owner;\\n        uint32 exitTime;\\n        uint32 numSpaceships; // uint31 + first bit => active\\n        uint32 lastUpdated; // also used as native-destruction indicator\\n    }\\n\\n    struct Fleet {\\n        address owner;\\n        uint32 launchTime;\\n        uint32 quantity;\\n    }\\n\\n    event PlanetStake(address indexed acquirer, uint256 indexed location, uint32 numSpaceships);\\n    event FleetSent(\\n        address indexed sender,\\n        uint256 indexed from,\\n        uint256 fleet,\\n        uint32 quantity,\\n        uint32 newNumSpaceships\\n    );\\n    event FleetArrived(\\n        address indexed sender,\\n        uint256 indexed fleet,\\n        uint256 indexed location,\\n        uint32 newNumspaceships\\n    );\\n    event Attack(\\n        address indexed sender,\\n        uint256 indexed fleet,\\n        uint256 indexed location,\\n        uint32 fleetLoss,\\n        uint32 toLoss,\\n        bool won,\\n        uint32 newNumspaceships\\n    );\\n\\n    event PlanetExit(address indexed owner, uint256 indexed location);\\n\\n    event StakeToWithdraw(address indexed owner, uint256 newStake);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    constructor(\\n        IERC20 stakingToken,\\n        bytes32 genesis,\\n        uint16 resolveWindow,\\n        uint16 timePerDistance,\\n        uint16 exitDuration\\n    ) {\\n        uint16 t = timePerDistance / 4; // the coordinates space is 4 times bigger\\n        require(t * 4 == timePerDistance, \\\"TIMEPDIST_NOT_DIVISIBLE_4\\\");\\n\\n        _stakingToken = stakingToken;\\n        _genesis = genesis;\\n        _resolveWindow = resolveWindow;\\n        _timePerDistance = t;\\n        _exitDuration = exitDuration;\\n\\n        postUpgrade(stakingToken, genesis, resolveWindow, timePerDistance, exitDuration);\\n    }\\n\\n    function postUpgrade(\\n        IERC20,\\n        bytes32,\\n        uint16,\\n        uint16,\\n        uint16\\n    ) public proxied {\\n        if (_discovered.minX == 0) {\\n            _discovered = Discovered({minX: 12, maxX: 12, minY: 12, maxY: 12});\\n        }\\n    }\\n\\n    function onTokenTransfer(\\n        address from,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        require(msg.sender == address(_stakingToken), \\\"INVALID_ERC20\\\");\\n        uint256 location = abi.decode(data, (uint256));\\n        _acquire(from, amount, location);\\n        return true;\\n    }\\n\\n    function acquireViaTransferFrom(uint256 location, uint256 amount) public {\\n        address sender = _msgSender();\\n        _acquire(sender, amount, location);\\n        _stakingToken.transferFrom(sender, address(this), amount);\\n    }\\n\\n    // function acquir\\n    // if (msg.value > 0) {\\n    // TODO in playerVault ?\\n    // uint256[] memory amounts = _uniswapV2Router01.swapExactETHForTokens{value:msg.value}(stakeAmount, [_weth, _stakingToken], _vault, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    // if (amounts[1] > stakeAmount) {\\n    //     _stakingToken.transfer(sender, amounts[1] - stakeAmount); // TODO send to Player Account (via PaymentGateway)\\n    // }\\n\\n    function exitFor(address owner, uint256 location) external {\\n        Planet storage planet = _getPlanet(location);\\n        require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n        require(planet.exitTime == 0, \\\"EXITING_ALREADY\\\"); // if you own the planet again, you ll need to first withdraw\\n        planet.exitTime = uint32(block.timestamp);\\n        emit PlanetExit(owner, location);\\n    }\\n\\n    // TODO optimize with minmal touch of _stakeReadyToBeWithdrawn (so it can happen in memory only, _stakeReadyToBeWithdrawn could be zero and remaim zero)\\n    function fetchAndWithdrawFor(address owner, uint256[] calldata locations) external {\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            if (_hasJustExited(planet.exitTime)) {\\n                require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n                _setPlanetAfterExit(locations[i], owner, planet, address(0), 0); // no need of event as exitTime passed basically mean owner zero and spaceships zero\\n            }\\n        }\\n        withdrawFor(owner);\\n    }\\n\\n    function withdrawFor(address owner) public {\\n        uint256 amount = _stakeReadyToBeWithdrawn[owner];\\n        _stakeReadyToBeWithdrawn[owner] = 0;\\n        require(_stakingToken.transfer(owner, amount), \\\"FAILED_TRANSFER\\\"); // TODO FundManager\\n        emit StakeToWithdraw(owner, 0);\\n    }\\n\\n    function resolveFleet(\\n        uint256 fleetId,\\n        uint256 from,\\n        uint256 to,\\n        uint256 distance,\\n        bytes32 secret\\n    ) external {\\n        _resolveFleetFor(_msgSender(), fleetId, from, to, distance, secret);\\n    }\\n\\n    function resolveFleetFor(\\n        address attacker,\\n        uint256 fleetId,\\n        uint256 from,\\n        uint256 to,\\n        uint256 distance,\\n        bytes32 secret\\n    ) external {\\n        address sender = _msgSender();\\n        if (sender != attacker) {\\n            require(_operators[attacker][sender], \\\"NOT_AUTHORIZED\\\");\\n        }\\n        _resolveFleetFor(attacker, fleetId, from, to, distance, secret);\\n    }\\n\\n    function send(\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external {\\n        _sendFor(_msgSender(), from, quantity, toHash);\\n    }\\n\\n    function sendFor(\\n        address owner,\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external {\\n        address sender = _msgSender();\\n        if (sender != owner) {\\n            require(_operators[owner][sender], \\\"NOT_AUTHORIZED\\\");\\n        }\\n        _sendFor(_msgSender(), from, quantity, toHash);\\n    }\\n\\n    function getFleet(uint256 fleetId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint32 launchTime,\\n            uint32 quantity\\n        )\\n    {\\n        launchTime = _fleets[fleetId].launchTime;\\n        quantity = _fleets[fleetId].quantity;\\n        owner = _fleets[fleetId].owner;\\n    }\\n\\n    function getGeneisHash() external view returns (bytes32) {\\n        return _genesis;\\n    }\\n\\n    struct PlanetStats {\\n        int8 subX;\\n        int8 subY;\\n        uint16 stake;\\n        uint16 production;\\n        uint16 attack;\\n        uint16 defense;\\n        uint16 speed;\\n        uint16 natives;\\n    }\\n\\n    struct ExternalPlanet {\\n        address owner;\\n        uint32 exitTime;\\n        uint32 numSpaceships;\\n        uint32 lastUpdated;\\n        bool active;\\n    }\\n\\n    function getPlanet(uint256 location) external view returns (ExternalPlanet memory state, PlanetStats memory stats) {\\n        Planet storage planet = _getPlanet(location);\\n        (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n        state = ExternalPlanet({\\n            owner: planet.owner,\\n            exitTime: planet.exitTime,\\n            numSpaceships: numSpaceships,\\n            lastUpdated: planet.lastUpdated,\\n            active: active\\n        });\\n        stats = _getPlanetStats(location);\\n    }\\n\\n    function getPlanetStates(uint256[] calldata locations)\\n        external\\n        view\\n        returns (ExternalPlanet[] memory planetStates, Discovered memory discovered)\\n    {\\n        planetStates = new ExternalPlanet[](locations.length);\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n            planetStates[i] = ExternalPlanet({\\n                owner: planet.owner,\\n                exitTime: planet.exitTime,\\n                numSpaceships: numSpaceships,\\n                lastUpdated: planet.lastUpdated,\\n                active: active\\n            });\\n        }\\n        discovered = _discovered;\\n    }\\n\\n    function getDiscovered() external view returns (Discovered memory) {\\n        return _discovered;\\n    }\\n\\n    // ////////////// EIP721 /////////////////// // TODO ?\\n\\n    // function transfer() // TODO EIP-721 ?\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        address sender = _msgSender();\\n        _operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    // ///////////////// INTERNALS ////////////////////\\n\\n    // function _actualiseExit(uint256 location) internal {\\n    //     Planet storage planet = _getPlanet(location);\\n    //     if (planet.exitTime > 0 && block.timestamp > planet.exitTime + _exitDuration) {\\n    //         uint16 stake = _stake(location);\\n    //         address owner = planet.owner;\\n    //         planet.exitTime = 0;\\n    //         planet.owner = address(0); // This is fine as long as _actualiseExit is called on every move\\n    //         planet.numSpaceships = 0; // This is fine as long as _actualiseExit is called on every move\\n    //         planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\\n    //         _stakeReadyToBeWithdrawn[owner] += stake * DECIMALS_18;\\n    //     }\\n    // }\\n\\n    function _acquire(\\n        address sender,\\n        uint256 paidFor,\\n        uint256 location\\n    ) internal {\\n        console.logBytes32(bytes32(location));\\n        bytes32 data = _planetData(location);\\n        require(paidFor == uint256(_stake(data)) * (DECIMALS_18), \\\"INVALID_AMOUNT\\\");\\n\\n        _handleSpaceships(sender, location, data);\\n        _handleDiscovery(location);\\n    }\\n\\n    function _handleSpaceships(\\n        address sender,\\n        uint256 location,\\n        bytes32 data\\n    ) internal {\\n        Planet storage planet = _getPlanet(location);\\n        address owner = planet.owner;\\n        uint32 lastUpdated = planet.lastUpdated;\\n        uint32 numSpaceshipsData = planet.numSpaceships;\\n        uint32 exitTime = planet.exitTime;\\n\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            numSpaceshipsData,\\n            lastUpdated,\\n            _production(data)\\n        );\\n\\n        bool justExited;\\n        uint32 defense;\\n        if (lastUpdated == 0) {\\n            defense = _natives(data);\\n        } else {\\n            if (exitTime != 0) {\\n                require(_hasJustExited(exitTime), \\\"STILL_EXITING\\\");\\n                justExited = true;\\n            } else {\\n                require(!active, \\\"STILL_ACTIVE\\\");\\n                if (owner != sender) {\\n                    defense = currentNumSpaceships;\\n                } else {\\n                    defense = 0;\\n                }\\n            }\\n        }\\n        if (justExited) {\\n            currentNumSpaceships = 3600;\\n            _setPlanetAfterExit(location, owner, planet, sender, _setActiveNumSpaceships(true, currentNumSpaceships));\\n        } else {\\n            planet.owner = sender;\\n            if (defense != 0) {\\n                (uint32 attackerLoss, ) = _computeFight(3600, defense, 10000, _defense(data)); // attacker alwasy win as defense (and stats.native) is restricted to 3500\\n                require(attackerLoss <= 3600, \\\"FAILED_CAPTURED\\\");\\n                currentNumSpaceships = 3600 - attackerLoss;\\n            } else {\\n                currentNumSpaceships += 3600;\\n            }\\n\\n            // planet.exitTime = 0; // should not be needed : // TODO actualiseExit\\n            planet.numSpaceships = _setActiveNumSpaceships(true, currentNumSpaceships);\\n            planet.lastUpdated = uint32(block.timestamp);\\n        }\\n        emit PlanetStake(sender, location, currentNumSpaceships);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _handleDiscovery(uint256 location) internal {\\n        Discovered memory discovered = _discovered;\\n        int256 x = int256(int128(location & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        int256 y = int256(int128(location >> 128));\\n        bool changes = false;\\n        if (x < 0) {\\n            require(-x <= discovered.minX, \\\"NOT_REACHABLE_YET_MINX\\\");\\n            x = -x + 6;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.minX < uint32(x)) {\\n                discovered.minX = uint32(x);\\n                changes = true;\\n            }\\n        } else {\\n            require(x <= discovered.maxX, \\\"NOT_REACHABLE_YET_MAXX\\\");\\n            x = x + 6;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.maxX < uint32(x)) {\\n                discovered.maxX = uint32(x);\\n                changes = true;\\n            }\\n        }\\n\\n        if (y < 0) {\\n            require(-y <= discovered.minY, \\\"NOT_REACHABLE_YET_MINY\\\");\\n            y = -y + 6;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (discovered.minY < uint32(y)) {\\n                discovered.minY = uint32(y);\\n                changes = true;\\n            }\\n        } else {\\n            require(y <= discovered.maxY, \\\"NOT_REACHABLE_YET_MAXY\\\");\\n            y = y + 6;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (discovered.maxY < uint32(y)) {\\n                discovered.maxY = uint32(y);\\n                changes = true;\\n            }\\n        }\\n        if (changes) {\\n            _discovered = discovered;\\n        }\\n    }\\n\\n    function _hasJustExited(uint32 exitTime) internal view returns (bool) {\\n        return exitTime > 0 && block.timestamp > exitTime + _exitDuration;\\n    }\\n\\n    function _setPlanetAfterExit(\\n        uint256 location,\\n        address owner,\\n        Planet storage planet,\\n        address newOwner,\\n        uint32 spaceshipsData\\n    ) internal {\\n        bytes32 data = _planetData(location);\\n        uint16 stake = _stake(data);\\n        planet.exitTime = 0;\\n        planet.owner = newOwner; // This is fine as long as _actualiseExit is called on every move\\n        planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\\n        planet.numSpaceships = spaceshipsData;\\n        uint256 newStake = _stakeReadyToBeWithdrawn[owner] + stake * DECIMALS_18;\\n        _stakeReadyToBeWithdrawn[owner] = newStake;\\n        emit StakeToWithdraw(owner, newStake);\\n    }\\n\\n    function _activeNumSpaceships(uint32 numSpaceshipsData) internal pure returns (bool active, uint32 numSpaceships) {\\n        active = (numSpaceshipsData & ACTIVE_MASK) == ACTIVE_MASK;\\n        numSpaceships = numSpaceshipsData % (ACTIVE_MASK);\\n    }\\n\\n    function _setActiveNumSpaceships(bool active, uint32 numSpaceships) internal pure returns (uint32) {\\n        return uint32((active ? ACTIVE_MASK : 0) + numSpaceships);\\n    }\\n\\n    function _sendFor(\\n        address owner,\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) internal {\\n        Planet storage planet = _getPlanet(from);\\n\\n        require(planet.exitTime == 0, \\\"PLANET_EXIT\\\"); // TODO never revert, update state and emit Error event ?\\n\\n        require(owner == planet.owner, \\\"not owner of the planet\\\");\\n\\n        bytes32 data = _planetData(from);\\n        uint16 production = _production(data);\\n\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            planet.numSpaceships,\\n            planet.lastUpdated,\\n            production\\n        );\\n        require(currentNumSpaceships >= quantity, \\\"not enough spaceships\\\");\\n        uint32 launchTime = uint32(block.timestamp);\\n        uint32 numSpaceships = currentNumSpaceships - quantity;\\n        planet.numSpaceships = _setActiveNumSpaceships(active, numSpaceships);\\n        planet.lastUpdated = launchTime;\\n\\n        uint256 fleetId = uint256(keccak256(abi.encodePacked(toHash, from)));\\n        _fleets[fleetId] = Fleet({launchTime: launchTime, owner: owner, quantity: quantity});\\n\\n        emit FleetSent(owner, from, fleetId, quantity, numSpaceships);\\n    }\\n\\n    function _resolveFleetFor(\\n        address attacker,\\n        uint256 fleetId,\\n        uint256 from,\\n        uint256 to,\\n        uint256 distance,\\n        bytes32 secret\\n    ) internal {\\n        Fleet memory fleet = _fleets[fleetId];\\n        require(attacker == fleet.owner, \\\"not owner of fleet\\\");\\n\\n        require(\\n            uint256(keccak256(abi.encodePacked(keccak256(abi.encodePacked(secret, to)), from))) == fleetId,\\n            \\\"invalid 'to', 'from' or 'secret'\\\"\\n        );\\n\\n        require(fleet.quantity > 0, \\\"no more\\\");\\n\\n        Planet memory toPlanet = _getPlanet(to);\\n\\n        uint16 production = _production(_planetData(to));\\n\\n        _checkDistance(distance, from, to);\\n        _checkTime(distance, from, fleet.launchTime);\\n\\n        if (toPlanet.owner == attacker) {\\n            _performReinforcement(attacker, toPlanet, to, production, fleetId, fleet.quantity);\\n        } else {\\n            _performAttack(attacker, from, toPlanet, to, production, fleetId, fleet.quantity);\\n        }\\n        _fleets[fleetId].quantity = 0; // TODO reset all to get gas refund?\\n    }\\n\\n    function _checkDistance(\\n        uint256 distance,\\n        uint256 from,\\n        uint256 to\\n    ) internal view {\\n        (int8 fromSubX, int8 fromSubY) = _subLocation(_planetData(from));\\n        (int8 toSubX, int8 toSubY) = _subLocation(_planetData(to));\\n        // check input instead of compute sqrt\\n        uint256 distanceSquared = uint256( // check input instead of compute sqrt\\n            ((int128(to & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) * 4 + toSubX) -\\n                (int128(from & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) * 4 + fromSubX)) **\\n                2 +\\n                ((int128(to >> 128) * 4 + toSubY) - (int128(from >> 128) * 4 + fromSubY))**2\\n        );\\n        require(distance**2 <= distanceSquared && distanceSquared < (distance + 1)**2, \\\"wrong distance\\\");\\n    }\\n\\n    function _checkTime(\\n        uint256 distance,\\n        uint256 from,\\n        uint32 launchTime\\n    ) internal view {\\n        uint256 reachTime = launchTime + (distance * (_timePerDistance * 10000)) / _speed(_planetData(from));\\n        require(block.timestamp >= reachTime, \\\"too early\\\");\\n        require(block.timestamp < reachTime + _resolveWindow, \\\"too late, your spaceships are lost in space\\\");\\n    }\\n\\n    function _getPlanet(uint256 location) internal view returns (Planet storage) {\\n        return _planets[location];\\n    }\\n\\n    // ------------------------- PLANET STATS -------------------------------\\n    function _planetData(uint256 location) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_genesis, location));\\n    }\\n\\n    function _subLocation(bytes32 data) internal pure returns (int8 subX, int8 subY) {\\n        subX = int8(1 - data.value8Mod(0, 3));\\n        subY = int8(1 - data.value8Mod(2, 3));\\n    }\\n\\n    function _stake(bytes32 data) internal pure returns (uint16) {\\n        return data.normal16(4, 0x0001000200030004000500070009000A000A000C000F00140019001E00320064) * 5; //_genesis.r_u256_minMax(location, 3, 10**18, 1000**18),\\n    }\\n\\n    function _production(bytes32 data) internal pure returns (uint16) {\\n        return data.normal16(12, 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0); // per hour\\n    }\\n\\n    function _attack(bytes32 data) internal pure returns (uint16) {\\n        return 4000 + data.normal8(20) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _defense(bytes32 data) internal pure returns (uint16) {\\n        return 4000 + data.normal8(28) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _speed(bytes32 data) internal pure returns (uint16) {\\n        return 5005 + data.normal8(36) * 333; // 5,005 - 7,502.5 - 10,000\\n    }\\n\\n    function _natives(bytes32 data) internal pure returns (uint16) {\\n        return 2000 + (data.normal8(44) * uint16(100)); // 2,000 - 2,750 - 3,500\\n    }\\n\\n    function _exists(bytes32 data) internal pure returns (bool) {\\n        return data.value8Mod(52, 16) == 1; // 16 => 36 so : 1 planet per 6 (=24 min unit) square\\n        // also:\\n        // 20000 average starting numSpaceships (or max?)\\n        // speed of min unit = 30 min ( 1 hour per square)\\n        // production : 20000 per 6 hours\\n        // exit : 3 days ? => 72 distance\\n    }\\n\\n    // ---------------------------------------------------------------------\\n\\n    function _getPlanetStats(uint256 location) internal view returns (PlanetStats memory) {\\n        bytes32 data = _planetData(location);\\n        require(_exists(data), \\\"no planet in this location\\\");\\n\\n        (int8 subX, int8 subY) = _subLocation(data);\\n        return\\n            PlanetStats({\\n                subX: subX,\\n                subY: subY,\\n                stake: _stake(data),\\n                production: _production(data),\\n                attack: _attack(data),\\n                defense: _defense(data),\\n                speed: _speed(data),\\n                natives: _natives(data)\\n            });\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n\\n    function _getCurrentNumSpaceships(\\n        uint32 numSpaceshipsData,\\n        uint256 lastUpdated,\\n        uint16 production\\n    ) internal view returns (bool active, uint32 currentNumSpaceships) {\\n        (active, currentNumSpaceships) = _activeNumSpaceships(numSpaceshipsData);\\n        if (active) {\\n            uint256 timePassed = block.timestamp - lastUpdated;\\n            uint256 newSpaceships = uint256(currentNumSpaceships) + (timePassed * uint256(production)) / 1 hours;\\n            if (newSpaceships >= ACTIVE_MASK) {\\n                newSpaceships = ACTIVE_MASK - 1;\\n            }\\n            currentNumSpaceships = uint32(newSpaceships);\\n        }\\n    }\\n\\n    function _computeFight(\\n        uint256 numAttack,\\n        uint256 numDefense,\\n        uint256 attack,\\n        uint256 defense\\n    ) internal pure returns (uint32 attackerLoss, uint32 defenderLoss) {\\n        uint256 attackPower = (numAttack * attack);\\n        uint256 defensePower = (numDefense * defense);\\n\\n        uint256 numAttackRound = (numDefense * 100000000) / attackPower;\\n        if (numAttackRound * attackPower < (numDefense * 100000000)) {\\n            numAttackRound++;\\n        }\\n        uint256 numDefenseRound = (numAttack * 100000000) / defensePower;\\n        if (numDefenseRound * defensePower < (numAttack * 100000000)) {\\n            numDefenseRound++;\\n        }\\n\\n        uint256 numRound = Math.min(numAttackRound, numDefenseRound);\\n        attackerLoss = uint32(Math.min((numRound * defensePower) / 100000000, numAttack));\\n        defenderLoss = uint32(Math.min((numRound * attackPower) / 100000000, numDefense));\\n    }\\n\\n    function _performAttack(\\n        address attacker,\\n        uint256 from,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint16 production,\\n        uint256 fleetId,\\n        uint32 numAttack\\n    ) internal {\\n        bytes32 toData = _planetData(to);\\n        if (toPlanet.lastUpdated == 0) {\\n            uint16 attack = _attack(_planetData(from));\\n            uint16 defense = _defense(toData);\\n            // TODO revisit : allow partial destruction of natives ? => does not count as discovered ? (if not how do we detect it ?)\\n            // probably better to keep native untouched : detect that on frontend to not trigger this\\n            uint16 natives = _natives(toData);\\n            (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, natives, attack, defense); // TODO compute fight like acquire (update)\\n            if (defenderLoss == natives && numAttack > attackerLoss) {\\n                uint32 numSpaceships = numAttack - attackerLoss;\\n                _planets[to].numSpaceships = _setActiveNumSpaceships(false, numSpaceships);\\n                _planets[to].lastUpdated = uint32(block.timestamp);\\n                _planets[to].owner = attacker;\\n                emit Attack(attacker, fleetId, to, attackerLoss, defenderLoss, true, numSpaceships);\\n            } else {\\n                emit Attack(attacker, fleetId, to, attackerLoss, 0, false, 0);\\n            }\\n        } else if (_hasJustExited(toPlanet.exitTime)) {\\n            _setPlanetAfterExit(to, toPlanet.owner, _planets[to], attacker, numAttack);\\n            emit FleetArrived(attacker, fleetId, to, numAttack);\\n        } else {\\n            uint16 attack = _attack(_planetData(from));\\n            uint16 defense = _defense(toData);\\n            _actualAttack(attacker, attack, defense, toPlanet, to, production, fleetId, numAttack);\\n        }\\n    }\\n\\n    function _actualAttack(\\n        address attacker,\\n        uint16 attack,\\n        uint16 defense,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint16 production,\\n        uint256 fleetId,\\n        uint32 numAttack\\n    ) internal {\\n        (bool active, uint32 numDefense) = _getCurrentNumSpaceships(\\n            toPlanet.numSpaceships,\\n            toPlanet.lastUpdated,\\n            production\\n        );\\n\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, numDefense, attack, defense);\\n\\n        if (attackerLoss == numAttack) {\\n            uint32 numSpaceships = numDefense - defenderLoss;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(active, numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n            emit Attack(attacker, fleetId, to, attackerLoss, defenderLoss, false, numSpaceships);\\n        } else if (defenderLoss == numDefense) {\\n            uint32 numSpaceships = numAttack - attackerLoss;\\n            _planets[to].owner = attacker;\\n            _planets[to].exitTime = 0;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(active, numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n            emit Attack(attacker, fleetId, to, attackerLoss, defenderLoss, true, numSpaceships);\\n        } else {\\n            revert(\\\"nobody won\\\"); // should not happen\\n        }\\n    }\\n\\n    function _performReinforcement(\\n        address sender,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint16 production,\\n        uint256 fleetId,\\n        uint32 quantity\\n    ) internal {\\n        if (_hasJustExited(toPlanet.exitTime)) {\\n            _setPlanetAfterExit(to, toPlanet.owner, _planets[to], sender, quantity);\\n            emit FleetArrived(sender, fleetId, to, quantity);\\n        } else {\\n            (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n                toPlanet.numSpaceships,\\n                toPlanet.lastUpdated,\\n                production\\n            );\\n            uint256 newNumSpaceships = currentNumSpaceships + quantity;\\n            if (newNumSpaceships >= ACTIVE_MASK) {\\n                newNumSpaceships = ACTIVE_MASK - 1;\\n            }\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(active, uint32(newNumSpaceships));\\n            emit FleetArrived(sender, fleetId, to, uint32(newNumSpaceships));\\n        }\\n    }\\n}\\n\\n// Bounties will be external\\n// event Bounty(\\n//     address from,\\n//     address token,\\n//     uint256 amount,\\n//     uint256 location,\\n//     uint256 deadline,\\n//     address target,\\n//     uint256 perLoss,\\n//     address hunter,\\n// );\\n\\n// Bounty will be an external contract using the capability of _operators\\n// function attachBounty(\\n//     uint256 location,\\n//     address token,\\n//     // uint256 tokenType, // TODO : ERC20 / ERC777 / ERC1155 / ERC721\\n//     uint256 maxSpaceships,\\n//     uint256 amountPerSpaceships,\\n//     uint256 deadline,\\n//     address target, // can be zero for getting reward no matter who is owning the planet.\\n//     address hunter // can be zero for anybody\\n// ) external {\\n//     address sender = _msgSender();\\n//     // require(target != sender, \\\"please do not target yourself\\\"); // TODO add this check ?\\n//     emit Bounty(sender, token, amountPerSpaceships * maxSpaceships, location, deadline, target, amountPerSpaceships, hunter);\\n// }\\n\\n// function withdrawBounty(\\n\\n// ) external {\\n//     // TODO\\n//     // check bounty deadline is over\\n//     // if bounty has been taken, allow winner to withdraw\\n//     // if bounty has not be taken, allow bounty offerer to withdraw\\n// }\\n\",\"keccak256\":\"0x12263ea54b00f4cd5ce33f1f78f7ac189038afbb105e9e6383e2900101af20ac\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200512c3803806200512c83398181016040528101906200003891906200035c565b600060048361ffff16816200004957fe5b0490508261ffff166004820261ffff16146200009c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000939062000420565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505084608081815250508361ffff1660c081815250508061ffff1660e081815250508161ffff1661010081815250506200011586868686866200012160201b60201c565b50505050505062000501565b600062000133620002ee60201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001a85773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355620001e2565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620001e157600080fd5b5b6000600460000160009054906101000a900463ffffffff1663ffffffff161415620002e6576040518060800160405280600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff16815250600460008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6000815190506200032881620004b3565b92915050565b6000815190506200033f81620004cd565b92915050565b6000815190506200035681620004e7565b92915050565b600080600080600060a086880312156200037557600080fd5b600062000385888289016200032e565b9550506020620003988882890162000317565b9450506040620003ab8882890162000345565b9350506060620003be8882890162000345565b9250506080620003d18882890162000345565b9150509295509295909350565b6000620003ed60198362000442565b91507f54494d4550444953545f4e4f545f444956495349424c455f34000000000000006000830152602082019050919050565b600060208201905081810360008301526200043b81620003de565b9050919050565b600082825260208201905092915050565b6000620004608262000493565b9050919050565b6000819050919050565b60006200047e8262000453565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004be8162000467565b8114620004ca57600080fd5b50565b620004d88162000471565b8114620004e457600080fd5b50565b620004f28162000485565b8114620004fe57600080fd5b50565b60805160a05160601c60c05160e05161010051614bd96200055360003980611c3752508061219c52508061221552508061084552806109ab5280610bf65250806108fc5280611e235250614bd96000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063a22cb46511610097578063b92ce46711610066578063b92ce46714610295578063c5aaa0ae146102b1578063e2e9b079146102cf578063f9740c75146102eb57610100565b8063a22cb465146101fc578063a4c0ed3614610218578063aba789f514610248578063afc823701461027957610100565b806361f018c0116100d357806361f018c01461018a5780637ba423fb146101a65780637cef64d8146101c25780639eca672c146101e057610100565b8063112e68511461010557806324cbafba1461012157806334efcb8e1461013d5780633f97e3ff1461016e575b600080fd5b61011f600480360381019061011a9190613add565b61031d565b005b61013b6004803603810190610136919061398a565b610335565b005b61015760048036038101906101529190613a01565b6104f6565b6040516101659291906148d0565b60405180910390f35b61018860048036038101906101839190613830565b6105e9565b005b6101a4600480360381019061019f91906138b9565b610709565b005b6101c060048036038101906101bb9190613a2a565b61082c565b005b6101ca6108f8565b6040516101d7919061457f565b60405180910390f35b6101fa60048036038101906101f591906136cb565b610920565b005b6102166004803603810190610211919061374c565b610ae8565b005b610232600480360381019061022d91906137c4565b610bf2565b60405161023f9190614564565b60405180910390f35b610262600480360381019061025d919061391c565b610cad565b604051610270929190614534565b60405180910390f35b610293600480360381019061028e9190613788565b610ed2565b005b6102af60048036038101906102aa9190613a66565b61103a565b005b6102b9611056565b6040516102c691906148b5565b60405180910390f35b6102e960048036038101906102e491906136f4565b611108565b005b61030560048036038101906103009190613a01565b611227565b604051610314939291906144fd565b60405180910390f35b6103306103286112be565b8484846112c6565b505050565b600061033f61163f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103b25773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556103eb565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ea57600080fd5b5b6000600460000160009054906101000a900463ffffffff1663ffffffff1614156104ee576040518060800160405280600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff16815250600460008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b505050505050565b6104fe613402565b61050661345b565b600061051184611668565b90506000806105338360000160189054906101000a900463ffffffff16611683565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff16815260200183151581525094506105df866116c2565b9350505050915091565b60006105f36112be565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106f257600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e890614835565b60405180910390fd5b5b6107008787878787876117c1565b50505050505050565b60006107136112be565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461081257600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080890614835565b60405180910390fd5b5b61082561081d6112be565b8585856112c6565b5050505050565b60006108366112be565b9050610843818385611b98565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8230856040518463ffffffff1660e01b81526004016108a09392919061449d565b602060405180830381600087803b1580156108ba57600080fd5b505af11580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f29190613961565b50505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610a049291906144d4565b602060405180830381600087803b158015610a1e57600080fd5b505af1158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a569190613961565b610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c906146d5565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b0196000604051610adc919061459a565b60405180910390a25050565b6000610af26112be565b905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051610be59190614564565b60405180910390a3505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990614635565b60405180910390fd5b60008383810190610c939190613a01565b9050610ca0868683611b98565b6001915050949350505050565b6060610cb76134bc565b8383905067ffffffffffffffff81118015610cd157600080fd5b50604051908082528060200260200182016040528015610d0b57816020015b610cf8613402565b815260200190600190039081610cf05790505b50915060005b84849050811015610e23576000610d39868684818110610d2d57fe5b90506020020135611668565b9050600080610d5b8360000160189054906101000a900463ffffffff16611683565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff168152602001831515815250868581518110610e0857fe5b60200260200101819052505050508080600101915050610d11565b5060046040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090509250929050565b6000610edd82611668565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f68906147d5565b60405180910390fd5b60008160000160149054906101000a900463ffffffff1663ffffffff1614610fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc590614615565b60405180910390fd5b428160000160146101000a81548163ffffffff021916908363ffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff167fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f60405160405180910390a3505050565b61104f6110456112be565b86868686866117c1565b5050505050565b61105e6134bc565b60046040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905090565b60005b8282905081101561121857600061113384848481811061112757fe5b90506020020135611668565b90506111528160000160149054906101000a900463ffffffff16611c23565b1561120a578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146111e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e0906147d5565b60405180910390fd5b6112098484848181106111f857fe5b905060200201358683600080611c68565b5b50808060010191505061110b565b5061122283610920565b505050565b60008060006001600085815260200190815260200160002060000160149054906101000a900463ffffffff1691506001600085815260200190815260200160002060000160189054906101000a900463ffffffff1690506001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692509193909250565b600033905090565b60006112d184611668565b905060008160000160149054906101000a900463ffffffff1663ffffffff1614611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132790614655565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b9906146b5565b60405180910390fd5b60006113cd85611e1f565b905060006113da82611e71565b90506000806114188560000160189054906101000a900463ffffffff1686600001601c9054906101000a900463ffffffff1663ffffffff1685611eb3565b915091508663ffffffff168163ffffffff16101561146b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611462906147b5565b60405180910390fd5b6000429050600088830390506114818482611f22565b8760000160186101000a81548163ffffffff021916908363ffffffff1602179055508187600001601c6101000a81548163ffffffff021916908363ffffffff1602179055506000888b6040516020016114db929190614471565b6040516020818303038152906040528051906020012060001c905060405180606001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1681526020018b63ffffffff168152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff1602179055509050508a8c73ffffffffffffffffffffffffffffffffffffffff167fd7da2af85ac97f64039a5304a609fe0eb346f04985c4fd55e0d9b10b8b886ee7838d8660405161162993929190614915565b60405180910390a3505050505050505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60008060008381526020019081526020016000209050919050565b600080638000000063ffffffff166380000000841663ffffffff16149150638000000063ffffffff168363ffffffff16816116ba57fe5b069050915091565b6116ca61345b565b60006116d583611e1f565b90506116e081611f40565b61171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171690614695565b60405180910390fd5b60008061172b83611f66565b915091506040518061010001604052808360000b81526020018260000b815260200161175685611fa6565b61ffff16815260200161176885611e71565b61ffff16815260200161177a85611fea565b61ffff16815260200161178c85612012565b61ffff16815260200161179e8561203a565b61ffff1681526020016117b085612062565b61ffff168152509350505050919050565b6117c96134fc565b600160008781526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146118fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f490614675565b60405180910390fd5b858285604051602001611911929190614471565b6040516020818303038152906040528051906020012086604051602001611939929190614471565b6040516020818303038152906040528051906020012060001c14611992576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611989906145d5565b60405180910390fd5b6000816040015163ffffffff16116119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d6906145f5565b60405180910390fd5b6119e761353f565b6119f085611668565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000611ad8611ad387611e1f565b611e71565b9050611ae5858888612089565b611af485888560200151612180565b8873ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415611b4357611b3e898388848c886040015161227d565b611b57565b611b5689888489858d89604001516123ee565b5b6000600160008a815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050565b611ba48160001b6126e1565b6000611baf82611e1f565b9050670de0b6b3a7640000611bc382611fa6565b61ffff16028314611c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0090614855565b60405180910390fd5b611c1484838361277a565b611c1d82612ad0565b50505050565b6000808263ffffffff16118015611c6157507f00000000000000000000000000000000000000000000000000000000000000008263ffffffff160142115b9050919050565b6000611c7386611e1f565b90506000611c8082611fa6565b905060008560000160146101000a81548163ffffffff021916908363ffffffff160217905550838560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504285600001601c6101000a81548163ffffffff021916908363ffffffff160217905550828560000160186101000a81548163ffffffff021916908363ffffffff1602179055506000670de0b6b3a76400008261ffff1602600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905080600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff167f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b01982604051611e0d91906148fa565b60405180910390a25050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001611e54929190614471565b604051602081830303815290604052805190602001209050919050565b6000611eac600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee060001b84612ef09092919063ffffffff16565b9050919050565b600080611ebf85611683565b80925081935050508115611f1a57600084420390506000610e108561ffff16830281611ee757fe5b048363ffffffff16019050638000000063ffffffff168110611f1457600163800000000363ffffffff1690505b80925050505b935093915050565b60008183611f31576000611f37565b63800000005b01905092915050565b60006001611f5b6034601085612f499092919063ffffffff16565b60ff16149050919050565b600080611f806000600385612f499092919063ffffffff16565b6001039150611f9c6002600385612f499092919063ffffffff16565b6001039050915091565b60006005611fe260047e01000200030004000500070009000a000a000c000f00140019001e0032006460001b85612ef09092919063ffffffff16565b029050919050565b6000610190612003601484612f6a90919063ffffffff16565b60ff1602610fa0019050919050565b600061019061202b601c84612f6a90919063ffffffff16565b60ff1602610fa0019050919050565b600061014d612053602484612f6a90919063ffffffff16565b60ff160261138d019050919050565b6000606461207a602c84612f6a90919063ffffffff16565b60ff16026107d0019050919050565b60008061209d61209885611e1f565b611f66565b915091506000806120b56120b086611e1f565b611f66565b91509150600060028460000b600460808a901c02018360000b600460808a901c020103600f0b0a60028660000b60046fffffffffffffffffffffffffffffffff8b1602018560000b60046fffffffffffffffffffffffffffffffff8b16020103600f0b0a01600f0b9050806002890a1115801561213757506002600189010a81105b612176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216d90614815565b60405180910390fd5b5050505050505050565b600061219361218e84611e1f565b61203a565b61ffff166127107f0000000000000000000000000000000000000000000000000000000000000000028502816121c557fe5b048263ffffffff1601905080421015612213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220a906147f5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081014210612277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226e90614775565b60405180910390fd5b50505050565b61228a8560200151611c23565b15612306576122b18486600001516000808881526020019081526020016000208985611c68565b83828773ffffffffffffffffffffffffffffffffffffffff167f5ae4a32f52da37ce71ffbd586b7a6d06204ca2720e32e7009caf394f866eb1ea846040516122f9919061494c565b60405180910390a46123e6565b6000806123228760400151886060015163ffffffff1687611eb3565b91509150600083820163ffffffff169050638000000063ffffffff16811061235557600163800000000363ffffffff1690505b61235f8382611f22565b60008089815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555086858a73ffffffffffffffffffffffffffffffffffffffff167f5ae4a32f52da37ce71ffbd586b7a6d06204ca2720e32e7009caf394f866eb1ea846040516123da919061494c565b60405180910390a45050505b505050505050565b60006123f985611e1f565b90506000866060015163ffffffff16141561261857600061242161241c89611e1f565b611fea565b9050600061242e83612012565b9050600061243b84612062565b905060008061245e8763ffffffff168461ffff168761ffff168761ffff16613016565b915091508261ffff168163ffffffff1614801561248657508163ffffffff168763ffffffff16115b156125b5576000828803905061249d600082611f22565b6000808d815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808d8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508d6000808d815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a898f73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b6986866001876040516125a794939291906149ac565b60405180910390a45061260e565b89888e73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b698560008060006040516126059493929190614967565b60405180910390a45b50505050506126d7565b6126258660200151611c23565b156126a15761264c8587600001516000808981526020019081526020016000208b86611c68565b84838973ffffffffffffffffffffffffffffffffffffffff167f5ae4a32f52da37ce71ffbd586b7a6d06204ca2720e32e7009caf394f866eb1ea85604051612694919061494c565b60405180910390a46126d6565b60006126b46126af89611e1f565b611fea565b905060006126c183612012565b90506126d38a83838b8b8b8b8b6130d3565b50505b5b5050505050505050565b61277781604051602401808281526020019150506040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506133bf565b50565b600061278583611668565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082600001601c9054906101000a900463ffffffff16905060008360000160189054906101000a900463ffffffff16905060008460000160149054906101000a900463ffffffff169050600080612817848663ffffffff166128128b611e71565b611eb3565b9150915060008060008763ffffffff161415612841576128368a612062565b61ffff169050612923565b60008563ffffffff16146128a05761285885611c23565b612897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288e90614755565b60405180910390fd5b60019150612922565b83156128e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d8906146f5565b60405180910390fd5b8b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461291c57829050612921565b600090505b5b5b811561294a57610e1092506129458b898b8f612940600189611f22565b611c68565b612a73565b8b8960000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008163ffffffff1614612a1a5760006129bf610e108363ffffffff166127106129b68f612012565b61ffff16613016565b509050610e108163ffffffff161115612a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0490614715565b60405180910390fd5b80610e1003935050612a22565b610e10830192505b612a2d600184611f22565b8960000160186101000a81548163ffffffff021916908363ffffffff1602179055504289600001601c6101000a81548163ffffffff021916908363ffffffff1602179055505b8a8c73ffffffffffffffffffffffffffffffffffffffff167f2a71ecd53ebaf1eabe3c13c9f5d7e094b90eb780d3f6f658a4feb23db632a96c85604051612aba919061494c565b60405180910390a3505050505050505050505050565b612ad86134bc565b60046040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905060006fffffffffffffffffffffffffffffffff8316600f0b90506000608084901c600f0b9050600080831215612c5657836000015163ffffffff16836000031315612bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf690614795565b60405180910390fd5b60068360000301925063ffffffff831315612c1c5763ffffffff92505b8263ffffffff16846000015163ffffffff161015612c515782846000019063ffffffff16908163ffffffff1681525050600190505b612cf3565b836020015163ffffffff16831315612ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9a90614735565b60405180910390fd5b60068301925063ffffffff831315612cbd5763ffffffff92505b8263ffffffff16846020015163ffffffff161015612cf25782846020019063ffffffff16908163ffffffff1681525050600190505b5b6000821215612da357836040015163ffffffff16826000031315612d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d43906145b5565b60405180910390fd5b60068260000301915063ffffffff821315612d695763ffffffff91505b8163ffffffff16846040015163ffffffff161015612d9e5781846040019063ffffffff16908163ffffffff1681525050600190505b612e40565b836060015163ffffffff16821315612df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de790614875565b60405180910390fd5b60068201915063ffffffff821315612e0a5763ffffffff91505b8163ffffffff16846060015163ffffffff161015612e3f5781846060019063ffffffff16908163ffffffff1681525050600190505b5b8015612ee95783600460008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b5050505050565b600080612efd8585612f6a565b9050826001600283020160ff1660208110612f1457fe5b1a60f81b60f81c60ff16610100846002840260ff1660208110612f3357fe5b1a60f81b60f81c60ff1602019150509392505050565b60008160ff168360ff1685901c60001c81612f6057fe5b0690509392505050565b600080612f7984846040612f49565b9050600060028260ff1681612f8a57fe5b049050600060028360ff1681612f9c57fe5b06905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60001b8360ff1660208110612fd357fe5b1a60f81b60f81c905060008260ff161415612ffb5760048160ff16901c945050505050613010565b60108160ff168161300857fe5b069450505050505b92915050565b60008060008487029050600084870290506000826305f5e10089028161303857fe5b0490506305f5e100880283820210156130545780806001019150505b6000826305f5e1008b028161306557fe5b0490506305f5e1008a0283820210156130815780806001019150505b600061308d83836133e8565b90506130a86305f5e100858302816130a157fe5b048c6133e8565b96506130c36305f5e100868302816130bc57fe5b048b6133e8565b9550505050505094509492505050565b6000806130ef8760400151886060015163ffffffff1687611eb3565b915091506000806131168563ffffffff168463ffffffff168d61ffff168d61ffff16613016565b915091508463ffffffff168263ffffffff161415613203576000818403905061313f8582611f22565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff16021790555088878e73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b6986866000876040516131f594939291906149ac565b60405180910390a4506133b1565b8263ffffffff168163ffffffff16141561337557600082860390508c6000808b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008b815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff1602179055506132b18582611f22565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff16021790555088878e73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b69868660018760405161336794939291906149ac565b60405180910390a4506133b0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133a790614895565b60405180910390fd5b5b505050505050505050505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000818311156133f857816133fa565b825b905092915050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000151581525090565b6040518061010001604052806000800b81526020016000800b8152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b60008135905061359e81614b02565b92915050565b60008083601f8401126135b657600080fd5b8235905067ffffffffffffffff8111156135cf57600080fd5b6020830191508360208202830111156135e757600080fd5b9250929050565b6000813590506135fd81614b19565b92915050565b60008151905061361281614b19565b92915050565b60008135905061362781614b30565b92915050565b60008083601f84011261363f57600080fd5b8235905067ffffffffffffffff81111561365857600080fd5b60208301915083600182028301111561367057600080fd5b9250929050565b60008135905061368681614b47565b92915050565b60008135905061369b81614b5e565b92915050565b6000813590506136b081614b75565b92915050565b6000813590506136c581614b8c565b92915050565b6000602082840312156136dd57600080fd5b60006136eb8482850161358f565b91505092915050565b60008060006040848603121561370957600080fd5b60006137178682870161358f565b935050602084013567ffffffffffffffff81111561373457600080fd5b613740868287016135a4565b92509250509250925092565b6000806040838503121561375f57600080fd5b600061376d8582860161358f565b925050602061377e858286016135ee565b9150509250929050565b6000806040838503121561379b57600080fd5b60006137a98582860161358f565b92505060206137ba858286016136a1565b9150509250929050565b600080600080606085870312156137da57600080fd5b60006137e88782880161358f565b94505060206137f9878288016136a1565b935050604085013567ffffffffffffffff81111561381657600080fd5b6138228782880161362d565b925092505092959194509250565b60008060008060008060c0878903121561384957600080fd5b600061385789828a0161358f565b965050602061386889828a016136a1565b955050604061387989828a016136a1565b945050606061388a89828a016136a1565b935050608061389b89828a016136a1565b92505060a06138ac89828a01613618565b9150509295509295509295565b600080600080608085870312156138cf57600080fd5b60006138dd8782880161358f565b94505060206138ee878288016136a1565b93505060406138ff878288016136b6565b925050606061391087828801613618565b91505092959194509250565b6000806020838503121561392f57600080fd5b600083013567ffffffffffffffff81111561394957600080fd5b613955858286016135a4565b92509250509250929050565b60006020828403121561397357600080fd5b600061398184828501613603565b91505092915050565b600080600080600060a086880312156139a257600080fd5b60006139b088828901613677565b95505060206139c188828901613618565b94505060406139d28882890161368c565b93505060606139e38882890161368c565b92505060806139f48882890161368c565b9150509295509295909350565b600060208284031215613a1357600080fd5b6000613a21848285016136a1565b91505092915050565b60008060408385031215613a3d57600080fd5b6000613a4b858286016136a1565b9250506020613a5c858286016136a1565b9150509250929050565b600080600080600060a08688031215613a7e57600080fd5b6000613a8c888289016136a1565b9550506020613a9d888289016136a1565b9450506040613aae888289016136a1565b9350506060613abf888289016136a1565b9250506080613ad088828901613618565b9150509295509295909350565b600080600060608486031215613af257600080fd5b6000613b00868287016136a1565b9350506020613b11868287016136b6565b9250506040613b2286828701613618565b9150509250925092565b6000613b3883836142ac565b60a08301905092915050565b613b4d81614a3b565b82525050565b613b5c81614a3b565b82525050565b6000613b6d82614a01565b613b778185614a19565b9350613b82836149f1565b8060005b83811015613bb3578151613b9a8882613b2c565b9750613ba583614a0c565b925050600181019050613b86565b5085935050505092915050565b613bc981614a4d565b82525050565b613bd881614a4d565b82525050565b613be781614a59565b82525050565b613bfe613bf982614a59565b614aee565b82525050565b613c0d81614a75565b82525050565b613c1c81614aca565b82525050565b613c2b81614adc565b82525050565b6000613c3e601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006000830152602082019050919050565b6000613c7e602083614a2a565b91507f696e76616c69642027746f272c202766726f6d27206f722027736563726574276000830152602082019050919050565b6000613cbe600783614a2a565b91507f6e6f206d6f7265000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613cfe600f83614a2a565b91507f45584954494e475f414c524541445900000000000000000000000000000000006000830152602082019050919050565b6000613d3e600d83614a2a565b91507f494e56414c49445f4552433230000000000000000000000000000000000000006000830152602082019050919050565b6000613d7e600b83614a2a565b91507f504c414e45545f455849540000000000000000000000000000000000000000006000830152602082019050919050565b6000613dbe601283614a2a565b91507f6e6f74206f776e6572206f6620666c65657400000000000000000000000000006000830152602082019050919050565b6000613dfe601a83614a2a565b91507f6e6f20706c616e657420696e2074686973206c6f636174696f6e0000000000006000830152602082019050919050565b6000613e3e601783614a2a565b91507f6e6f74206f776e6572206f662074686520706c616e65740000000000000000006000830152602082019050919050565b6000613e7e600f83614a2a565b91507f4641494c45445f5452414e5346455200000000000000000000000000000000006000830152602082019050919050565b6000613ebe600c83614a2a565b91507f5354494c4c5f41435449564500000000000000000000000000000000000000006000830152602082019050919050565b6000613efe600f83614a2a565b91507f4641494c45445f434150545552454400000000000000000000000000000000006000830152602082019050919050565b6000613f3e601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006000830152602082019050919050565b6000613f7e600d83614a2a565b91507f5354494c4c5f45584954494e47000000000000000000000000000000000000006000830152602082019050919050565b6000613fbe602b83614a2a565b91507f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60008301527f737420696e2073706163650000000000000000000000000000000000000000006020830152604082019050919050565b6000614024601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006000830152602082019050919050565b6000614064601583614a2a565b91507f6e6f7420656e6f756768207370616365736869707300000000000000000000006000830152602082019050919050565b60006140a4600983614a2a565b91507f4e4f545f4f574e455200000000000000000000000000000000000000000000006000830152602082019050919050565b60006140e4600983614a2a565b91507f746f6f206561726c7900000000000000000000000000000000000000000000006000830152602082019050919050565b6000614124600e83614a2a565b91507f77726f6e672064697374616e63650000000000000000000000000000000000006000830152602082019050919050565b6000614164600e83614a2a565b91507f4e4f545f415554484f52495a45440000000000000000000000000000000000006000830152602082019050919050565b60006141a4600e83614a2a565b91507f494e56414c49445f414d4f554e540000000000000000000000000000000000006000830152602082019050919050565b60006141e4601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006000830152602082019050919050565b6000614224600a83614a2a565b91507f6e6f626f647920776f6e000000000000000000000000000000000000000000006000830152602082019050919050565b60808201600082015161426d6000850182614453565b5060208201516142806020850182614453565b5060408201516142936040850182614453565b5060608201516142a66060850182614453565b50505050565b60a0820160008201516142c26000850182613b44565b5060208201516142d56020850182614453565b5060408201516142e86040850182614453565b5060608201516142fb6060850182614453565b50608082015161430e6080850182613bc0565b50505050565b60a08201600082015161432a6000850182613b44565b50602082015161433d6020850182614453565b5060408201516143506040850182614453565b5060608201516143636060850182614453565b5060808201516143766080850182613bc0565b50505050565b610100820160008201516143936000850182613c04565b5060208201516143a66020850182613c04565b5060408201516143b9604085018261441e565b5060608201516143cc606085018261441e565b5060808201516143df608085018261441e565b5060a08201516143f260a085018261441e565b5060c082015161440560c085018261441e565b5060e082015161441860e085018261441e565b50505050565b61442781614a82565b82525050565b61443681614ab0565b82525050565b61444d61444882614ab0565b614af8565b82525050565b61445c81614aba565b82525050565b61446b81614aba565b82525050565b600061447d8285613bed565b60208201915061448d828461443c565b6020820191508190509392505050565b60006060820190506144b26000830186613b53565b6144bf6020830185613b53565b6144cc604083018461442d565b949350505050565b60006040820190506144e96000830185613b53565b6144f6602083018461442d565b9392505050565b60006060820190506145126000830186613b53565b61451f6020830185614462565b61452c6040830184614462565b949350505050565b600060a082019050818103600083015261454e8185613b62565b905061455d6020830184614257565b9392505050565b60006020820190506145796000830184613bcf565b92915050565b60006020820190506145946000830184613bde565b92915050565b60006020820190506145af6000830184613c13565b92915050565b600060208201905081810360008301526145ce81613c31565b9050919050565b600060208201905081810360008301526145ee81613c71565b9050919050565b6000602082019050818103600083015261460e81613cb1565b9050919050565b6000602082019050818103600083015261462e81613cf1565b9050919050565b6000602082019050818103600083015261464e81613d31565b9050919050565b6000602082019050818103600083015261466e81613d71565b9050919050565b6000602082019050818103600083015261468e81613db1565b9050919050565b600060208201905081810360008301526146ae81613df1565b9050919050565b600060208201905081810360008301526146ce81613e31565b9050919050565b600060208201905081810360008301526146ee81613e71565b9050919050565b6000602082019050818103600083015261470e81613eb1565b9050919050565b6000602082019050818103600083015261472e81613ef1565b9050919050565b6000602082019050818103600083015261474e81613f31565b9050919050565b6000602082019050818103600083015261476e81613f71565b9050919050565b6000602082019050818103600083015261478e81613fb1565b9050919050565b600060208201905081810360008301526147ae81614017565b9050919050565b600060208201905081810360008301526147ce81614057565b9050919050565b600060208201905081810360008301526147ee81614097565b9050919050565b6000602082019050818103600083015261480e816140d7565b9050919050565b6000602082019050818103600083015261482e81614117565b9050919050565b6000602082019050818103600083015261484e81614157565b9050919050565b6000602082019050818103600083015261486e81614197565b9050919050565b6000602082019050818103600083015261488e816141d7565b9050919050565b600060208201905081810360008301526148ae81614217565b9050919050565b60006080820190506148ca6000830184614257565b92915050565b60006101a0820190506148e66000830185614314565b6148f360a083018461437c565b9392505050565b600060208201905061490f600083018461442d565b92915050565b600060608201905061492a600083018661442d565b6149376020830185614462565b6149446040830184614462565b949350505050565b60006020820190506149616000830184614462565b92915050565b600060808201905061497c6000830187614462565b6149896020830186613c22565b6149966040830185613bcf565b6149a36060830184613c22565b95945050505050565b60006080820190506149c16000830187614462565b6149ce6020830186614462565b6149db6040830185613bcf565b6149e86060830184614462565b95945050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614a4682614a90565b9050919050565b60008115159050919050565b6000819050919050565b6000614a6e82614a3b565b9050919050565b60008160000b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000614ad582614ab0565b9050919050565b6000614ae782614aba565b9050919050565b6000819050919050565b6000819050919050565b614b0b81614a3b565b8114614b1657600080fd5b50565b614b2281614a4d565b8114614b2d57600080fd5b50565b614b3981614a59565b8114614b4457600080fd5b50565b614b5081614a63565b8114614b5b57600080fd5b50565b614b6781614a82565b8114614b7257600080fd5b50565b614b7e81614ab0565b8114614b8957600080fd5b50565b614b9581614aba565b8114614ba057600080fd5b5056fea2646970667358221220e99134db472d153bb5b1647f961d6610869b9f71cafb77079c1f78e06412803364736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063a22cb46511610097578063b92ce46711610066578063b92ce46714610295578063c5aaa0ae146102b1578063e2e9b079146102cf578063f9740c75146102eb57610100565b8063a22cb465146101fc578063a4c0ed3614610218578063aba789f514610248578063afc823701461027957610100565b806361f018c0116100d357806361f018c01461018a5780637ba423fb146101a65780637cef64d8146101c25780639eca672c146101e057610100565b8063112e68511461010557806324cbafba1461012157806334efcb8e1461013d5780633f97e3ff1461016e575b600080fd5b61011f600480360381019061011a9190613add565b61031d565b005b61013b6004803603810190610136919061398a565b610335565b005b61015760048036038101906101529190613a01565b6104f6565b6040516101659291906148d0565b60405180910390f35b61018860048036038101906101839190613830565b6105e9565b005b6101a4600480360381019061019f91906138b9565b610709565b005b6101c060048036038101906101bb9190613a2a565b61082c565b005b6101ca6108f8565b6040516101d7919061457f565b60405180910390f35b6101fa60048036038101906101f591906136cb565b610920565b005b6102166004803603810190610211919061374c565b610ae8565b005b610232600480360381019061022d91906137c4565b610bf2565b60405161023f9190614564565b60405180910390f35b610262600480360381019061025d919061391c565b610cad565b604051610270929190614534565b60405180910390f35b610293600480360381019061028e9190613788565b610ed2565b005b6102af60048036038101906102aa9190613a66565b61103a565b005b6102b9611056565b6040516102c691906148b5565b60405180910390f35b6102e960048036038101906102e491906136f4565b611108565b005b61030560048036038101906103009190613a01565b611227565b604051610314939291906144fd565b60405180910390f35b6103306103286112be565b8484846112c6565b505050565b600061033f61163f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103b25773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556103eb565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ea57600080fd5b5b6000600460000160009054906101000a900463ffffffff1663ffffffff1614156104ee576040518060800160405280600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff16815250600460008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b505050505050565b6104fe613402565b61050661345b565b600061051184611668565b90506000806105338360000160189054906101000a900463ffffffff16611683565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff16815260200183151581525094506105df866116c2565b9350505050915091565b60006105f36112be565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106f257600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e890614835565b60405180910390fd5b5b6107008787878787876117c1565b50505050505050565b60006107136112be565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461081257600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080890614835565b60405180910390fd5b5b61082561081d6112be565b8585856112c6565b5050505050565b60006108366112be565b9050610843818385611b98565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8230856040518463ffffffff1660e01b81526004016108a09392919061449d565b602060405180830381600087803b1580156108ba57600080fd5b505af11580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f29190613961565b50505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610a049291906144d4565b602060405180830381600087803b158015610a1e57600080fd5b505af1158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a569190613961565b610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c906146d5565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b0196000604051610adc919061459a565b60405180910390a25050565b6000610af26112be565b905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051610be59190614564565b60405180910390a3505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7990614635565b60405180910390fd5b60008383810190610c939190613a01565b9050610ca0868683611b98565b6001915050949350505050565b6060610cb76134bc565b8383905067ffffffffffffffff81118015610cd157600080fd5b50604051908082528060200260200182016040528015610d0b57816020015b610cf8613402565b815260200190600190039081610cf05790505b50915060005b84849050811015610e23576000610d39868684818110610d2d57fe5b90506020020135611668565b9050600080610d5b8360000160189054906101000a900463ffffffff16611683565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff168152602001831515815250868581518110610e0857fe5b60200260200101819052505050508080600101915050610d11565b5060046040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090509250929050565b6000610edd82611668565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f68906147d5565b60405180910390fd5b60008160000160149054906101000a900463ffffffff1663ffffffff1614610fce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc590614615565b60405180910390fd5b428160000160146101000a81548163ffffffff021916908363ffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff167fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f60405160405180910390a3505050565b61104f6110456112be565b86868686866117c1565b5050505050565b61105e6134bc565b60046040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905090565b60005b8282905081101561121857600061113384848481811061112757fe5b90506020020135611668565b90506111528160000160149054906101000a900463ffffffff16611c23565b1561120a578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146111e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e0906147d5565b60405180910390fd5b6112098484848181106111f857fe5b905060200201358683600080611c68565b5b50808060010191505061110b565b5061122283610920565b505050565b60008060006001600085815260200190815260200160002060000160149054906101000a900463ffffffff1691506001600085815260200190815260200160002060000160189054906101000a900463ffffffff1690506001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692509193909250565b600033905090565b60006112d184611668565b905060008160000160149054906101000a900463ffffffff1663ffffffff1614611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132790614655565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b9906146b5565b60405180910390fd5b60006113cd85611e1f565b905060006113da82611e71565b90506000806114188560000160189054906101000a900463ffffffff1686600001601c9054906101000a900463ffffffff1663ffffffff1685611eb3565b915091508663ffffffff168163ffffffff16101561146b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611462906147b5565b60405180910390fd5b6000429050600088830390506114818482611f22565b8760000160186101000a81548163ffffffff021916908363ffffffff1602179055508187600001601c6101000a81548163ffffffff021916908363ffffffff1602179055506000888b6040516020016114db929190614471565b6040516020818303038152906040528051906020012060001c905060405180606001604052808d73ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1681526020018b63ffffffff168152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff1602179055509050508a8c73ffffffffffffffffffffffffffffffffffffffff167fd7da2af85ac97f64039a5304a609fe0eb346f04985c4fd55e0d9b10b8b886ee7838d8660405161162993929190614915565b60405180910390a3505050505050505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b60008060008381526020019081526020016000209050919050565b600080638000000063ffffffff166380000000841663ffffffff16149150638000000063ffffffff168363ffffffff16816116ba57fe5b069050915091565b6116ca61345b565b60006116d583611e1f565b90506116e081611f40565b61171f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171690614695565b60405180910390fd5b60008061172b83611f66565b915091506040518061010001604052808360000b81526020018260000b815260200161175685611fa6565b61ffff16815260200161176885611e71565b61ffff16815260200161177a85611fea565b61ffff16815260200161178c85612012565b61ffff16815260200161179e8561203a565b61ffff1681526020016117b085612062565b61ffff168152509350505050919050565b6117c96134fc565b600160008781526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050806000015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146118fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f490614675565b60405180910390fd5b858285604051602001611911929190614471565b6040516020818303038152906040528051906020012086604051602001611939929190614471565b6040516020818303038152906040528051906020012060001c14611992576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611989906145d5565b60405180910390fd5b6000816040015163ffffffff16116119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d6906145f5565b60405180910390fd5b6119e761353f565b6119f085611668565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090506000611ad8611ad387611e1f565b611e71565b9050611ae5858888612089565b611af485888560200151612180565b8873ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415611b4357611b3e898388848c886040015161227d565b611b57565b611b5689888489858d89604001516123ee565b5b6000600160008a815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050565b611ba48160001b6126e1565b6000611baf82611e1f565b9050670de0b6b3a7640000611bc382611fa6565b61ffff16028314611c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0090614855565b60405180910390fd5b611c1484838361277a565b611c1d82612ad0565b50505050565b6000808263ffffffff16118015611c6157507f00000000000000000000000000000000000000000000000000000000000000008263ffffffff160142115b9050919050565b6000611c7386611e1f565b90506000611c8082611fa6565b905060008560000160146101000a81548163ffffffff021916908363ffffffff160217905550838560000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504285600001601c6101000a81548163ffffffff021916908363ffffffff160217905550828560000160186101000a81548163ffffffff021916908363ffffffff1602179055506000670de0b6b3a76400008261ffff1602600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905080600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff167f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b01982604051611e0d91906148fa565b60405180910390a25050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001611e54929190614471565b604051602081830303815290604052805190602001209050919050565b6000611eac600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee060001b84612ef09092919063ffffffff16565b9050919050565b600080611ebf85611683565b80925081935050508115611f1a57600084420390506000610e108561ffff16830281611ee757fe5b048363ffffffff16019050638000000063ffffffff168110611f1457600163800000000363ffffffff1690505b80925050505b935093915050565b60008183611f31576000611f37565b63800000005b01905092915050565b60006001611f5b6034601085612f499092919063ffffffff16565b60ff16149050919050565b600080611f806000600385612f499092919063ffffffff16565b6001039150611f9c6002600385612f499092919063ffffffff16565b6001039050915091565b60006005611fe260047e01000200030004000500070009000a000a000c000f00140019001e0032006460001b85612ef09092919063ffffffff16565b029050919050565b6000610190612003601484612f6a90919063ffffffff16565b60ff1602610fa0019050919050565b600061019061202b601c84612f6a90919063ffffffff16565b60ff1602610fa0019050919050565b600061014d612053602484612f6a90919063ffffffff16565b60ff160261138d019050919050565b6000606461207a602c84612f6a90919063ffffffff16565b60ff16026107d0019050919050565b60008061209d61209885611e1f565b611f66565b915091506000806120b56120b086611e1f565b611f66565b91509150600060028460000b600460808a901c02018360000b600460808a901c020103600f0b0a60028660000b60046fffffffffffffffffffffffffffffffff8b1602018560000b60046fffffffffffffffffffffffffffffffff8b16020103600f0b0a01600f0b9050806002890a1115801561213757506002600189010a81105b612176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216d90614815565b60405180910390fd5b5050505050505050565b600061219361218e84611e1f565b61203a565b61ffff166127107f0000000000000000000000000000000000000000000000000000000000000000028502816121c557fe5b048263ffffffff1601905080421015612213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220a906147f5565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081014210612277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226e90614775565b60405180910390fd5b50505050565b61228a8560200151611c23565b15612306576122b18486600001516000808881526020019081526020016000208985611c68565b83828773ffffffffffffffffffffffffffffffffffffffff167f5ae4a32f52da37ce71ffbd586b7a6d06204ca2720e32e7009caf394f866eb1ea846040516122f9919061494c565b60405180910390a46123e6565b6000806123228760400151886060015163ffffffff1687611eb3565b91509150600083820163ffffffff169050638000000063ffffffff16811061235557600163800000000363ffffffff1690505b61235f8382611f22565b60008089815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555086858a73ffffffffffffffffffffffffffffffffffffffff167f5ae4a32f52da37ce71ffbd586b7a6d06204ca2720e32e7009caf394f866eb1ea846040516123da919061494c565b60405180910390a45050505b505050505050565b60006123f985611e1f565b90506000866060015163ffffffff16141561261857600061242161241c89611e1f565b611fea565b9050600061242e83612012565b9050600061243b84612062565b905060008061245e8763ffffffff168461ffff168761ffff168761ffff16613016565b915091508261ffff168163ffffffff1614801561248657508163ffffffff168763ffffffff16115b156125b5576000828803905061249d600082611f22565b6000808d815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808d8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508d6000808d815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a898f73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b6986866001876040516125a794939291906149ac565b60405180910390a45061260e565b89888e73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b698560008060006040516126059493929190614967565b60405180910390a45b50505050506126d7565b6126258660200151611c23565b156126a15761264c8587600001516000808981526020019081526020016000208b86611c68565b84838973ffffffffffffffffffffffffffffffffffffffff167f5ae4a32f52da37ce71ffbd586b7a6d06204ca2720e32e7009caf394f866eb1ea85604051612694919061494c565b60405180910390a46126d6565b60006126b46126af89611e1f565b611fea565b905060006126c183612012565b90506126d38a83838b8b8b8b8b6130d3565b50505b5b5050505050505050565b61277781604051602401808281526020019150506040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506133bf565b50565b600061278583611668565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082600001601c9054906101000a900463ffffffff16905060008360000160189054906101000a900463ffffffff16905060008460000160149054906101000a900463ffffffff169050600080612817848663ffffffff166128128b611e71565b611eb3565b9150915060008060008763ffffffff161415612841576128368a612062565b61ffff169050612923565b60008563ffffffff16146128a05761285885611c23565b612897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288e90614755565b60405180910390fd5b60019150612922565b83156128e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d8906146f5565b60405180910390fd5b8b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461291c57829050612921565b600090505b5b5b811561294a57610e1092506129458b898b8f612940600189611f22565b611c68565b612a73565b8b8960000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008163ffffffff1614612a1a5760006129bf610e108363ffffffff166127106129b68f612012565b61ffff16613016565b509050610e108163ffffffff161115612a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0490614715565b60405180910390fd5b80610e1003935050612a22565b610e10830192505b612a2d600184611f22565b8960000160186101000a81548163ffffffff021916908363ffffffff1602179055504289600001601c6101000a81548163ffffffff021916908363ffffffff1602179055505b8a8c73ffffffffffffffffffffffffffffffffffffffff167f2a71ecd53ebaf1eabe3c13c9f5d7e094b90eb780d3f6f658a4feb23db632a96c85604051612aba919061494c565b60405180910390a3505050505050505050505050565b612ad86134bc565b60046040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905060006fffffffffffffffffffffffffffffffff8316600f0b90506000608084901c600f0b9050600080831215612c5657836000015163ffffffff16836000031315612bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf690614795565b60405180910390fd5b60068360000301925063ffffffff831315612c1c5763ffffffff92505b8263ffffffff16846000015163ffffffff161015612c515782846000019063ffffffff16908163ffffffff1681525050600190505b612cf3565b836020015163ffffffff16831315612ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9a90614735565b60405180910390fd5b60068301925063ffffffff831315612cbd5763ffffffff92505b8263ffffffff16846020015163ffffffff161015612cf25782846020019063ffffffff16908163ffffffff1681525050600190505b5b6000821215612da357836040015163ffffffff16826000031315612d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d43906145b5565b60405180910390fd5b60068260000301915063ffffffff821315612d695763ffffffff91505b8163ffffffff16846040015163ffffffff161015612d9e5781846040019063ffffffff16908163ffffffff1681525050600190505b612e40565b836060015163ffffffff16821315612df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de790614875565b60405180910390fd5b60068201915063ffffffff821315612e0a5763ffffffff91505b8163ffffffff16846060015163ffffffff161015612e3f5781846060019063ffffffff16908163ffffffff1681525050600190505b5b8015612ee95783600460008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b5050505050565b600080612efd8585612f6a565b9050826001600283020160ff1660208110612f1457fe5b1a60f81b60f81c60ff16610100846002840260ff1660208110612f3357fe5b1a60f81b60f81c60ff1602019150509392505050565b60008160ff168360ff1685901c60001c81612f6057fe5b0690509392505050565b600080612f7984846040612f49565b9050600060028260ff1681612f8a57fe5b049050600060028360ff1681612f9c57fe5b06905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60001b8360ff1660208110612fd357fe5b1a60f81b60f81c905060008260ff161415612ffb5760048160ff16901c945050505050613010565b60108160ff168161300857fe5b069450505050505b92915050565b60008060008487029050600084870290506000826305f5e10089028161303857fe5b0490506305f5e100880283820210156130545780806001019150505b6000826305f5e1008b028161306557fe5b0490506305f5e1008a0283820210156130815780806001019150505b600061308d83836133e8565b90506130a86305f5e100858302816130a157fe5b048c6133e8565b96506130c36305f5e100868302816130bc57fe5b048b6133e8565b9550505050505094509492505050565b6000806130ef8760400151886060015163ffffffff1687611eb3565b915091506000806131168563ffffffff168463ffffffff168d61ffff168d61ffff16613016565b915091508463ffffffff168263ffffffff161415613203576000818403905061313f8582611f22565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff16021790555088878e73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b6986866000876040516131f594939291906149ac565b60405180910390a4506133b1565b8263ffffffff168163ffffffff16141561337557600082860390508c6000808b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060008b815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff1602179055506132b18582611f22565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff16021790555088878e73ffffffffffffffffffffffffffffffffffffffff167ffbcd6656e9b46595bb8f8f32a788f85a157ecee2038db17a4fd65d98c0cc2b69868660018760405161336794939291906149ac565b60405180910390a4506133b0565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133a790614895565b60405180910390fd5b5b505050505050505050505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000818311156133f857816133fa565b825b905092915050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000151581525090565b6040518061010001604052806000800b81526020016000800b8152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b60008135905061359e81614b02565b92915050565b60008083601f8401126135b657600080fd5b8235905067ffffffffffffffff8111156135cf57600080fd5b6020830191508360208202830111156135e757600080fd5b9250929050565b6000813590506135fd81614b19565b92915050565b60008151905061361281614b19565b92915050565b60008135905061362781614b30565b92915050565b60008083601f84011261363f57600080fd5b8235905067ffffffffffffffff81111561365857600080fd5b60208301915083600182028301111561367057600080fd5b9250929050565b60008135905061368681614b47565b92915050565b60008135905061369b81614b5e565b92915050565b6000813590506136b081614b75565b92915050565b6000813590506136c581614b8c565b92915050565b6000602082840312156136dd57600080fd5b60006136eb8482850161358f565b91505092915050565b60008060006040848603121561370957600080fd5b60006137178682870161358f565b935050602084013567ffffffffffffffff81111561373457600080fd5b613740868287016135a4565b92509250509250925092565b6000806040838503121561375f57600080fd5b600061376d8582860161358f565b925050602061377e858286016135ee565b9150509250929050565b6000806040838503121561379b57600080fd5b60006137a98582860161358f565b92505060206137ba858286016136a1565b9150509250929050565b600080600080606085870312156137da57600080fd5b60006137e88782880161358f565b94505060206137f9878288016136a1565b935050604085013567ffffffffffffffff81111561381657600080fd5b6138228782880161362d565b925092505092959194509250565b60008060008060008060c0878903121561384957600080fd5b600061385789828a0161358f565b965050602061386889828a016136a1565b955050604061387989828a016136a1565b945050606061388a89828a016136a1565b935050608061389b89828a016136a1565b92505060a06138ac89828a01613618565b9150509295509295509295565b600080600080608085870312156138cf57600080fd5b60006138dd8782880161358f565b94505060206138ee878288016136a1565b93505060406138ff878288016136b6565b925050606061391087828801613618565b91505092959194509250565b6000806020838503121561392f57600080fd5b600083013567ffffffffffffffff81111561394957600080fd5b613955858286016135a4565b92509250509250929050565b60006020828403121561397357600080fd5b600061398184828501613603565b91505092915050565b600080600080600060a086880312156139a257600080fd5b60006139b088828901613677565b95505060206139c188828901613618565b94505060406139d28882890161368c565b93505060606139e38882890161368c565b92505060806139f48882890161368c565b9150509295509295909350565b600060208284031215613a1357600080fd5b6000613a21848285016136a1565b91505092915050565b60008060408385031215613a3d57600080fd5b6000613a4b858286016136a1565b9250506020613a5c858286016136a1565b9150509250929050565b600080600080600060a08688031215613a7e57600080fd5b6000613a8c888289016136a1565b9550506020613a9d888289016136a1565b9450506040613aae888289016136a1565b9350506060613abf888289016136a1565b9250506080613ad088828901613618565b9150509295509295909350565b600080600060608486031215613af257600080fd5b6000613b00868287016136a1565b9350506020613b11868287016136b6565b9250506040613b2286828701613618565b9150509250925092565b6000613b3883836142ac565b60a08301905092915050565b613b4d81614a3b565b82525050565b613b5c81614a3b565b82525050565b6000613b6d82614a01565b613b778185614a19565b9350613b82836149f1565b8060005b83811015613bb3578151613b9a8882613b2c565b9750613ba583614a0c565b925050600181019050613b86565b5085935050505092915050565b613bc981614a4d565b82525050565b613bd881614a4d565b82525050565b613be781614a59565b82525050565b613bfe613bf982614a59565b614aee565b82525050565b613c0d81614a75565b82525050565b613c1c81614aca565b82525050565b613c2b81614adc565b82525050565b6000613c3e601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006000830152602082019050919050565b6000613c7e602083614a2a565b91507f696e76616c69642027746f272c202766726f6d27206f722027736563726574276000830152602082019050919050565b6000613cbe600783614a2a565b91507f6e6f206d6f7265000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613cfe600f83614a2a565b91507f45584954494e475f414c524541445900000000000000000000000000000000006000830152602082019050919050565b6000613d3e600d83614a2a565b91507f494e56414c49445f4552433230000000000000000000000000000000000000006000830152602082019050919050565b6000613d7e600b83614a2a565b91507f504c414e45545f455849540000000000000000000000000000000000000000006000830152602082019050919050565b6000613dbe601283614a2a565b91507f6e6f74206f776e6572206f6620666c65657400000000000000000000000000006000830152602082019050919050565b6000613dfe601a83614a2a565b91507f6e6f20706c616e657420696e2074686973206c6f636174696f6e0000000000006000830152602082019050919050565b6000613e3e601783614a2a565b91507f6e6f74206f776e6572206f662074686520706c616e65740000000000000000006000830152602082019050919050565b6000613e7e600f83614a2a565b91507f4641494c45445f5452414e5346455200000000000000000000000000000000006000830152602082019050919050565b6000613ebe600c83614a2a565b91507f5354494c4c5f41435449564500000000000000000000000000000000000000006000830152602082019050919050565b6000613efe600f83614a2a565b91507f4641494c45445f434150545552454400000000000000000000000000000000006000830152602082019050919050565b6000613f3e601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006000830152602082019050919050565b6000613f7e600d83614a2a565b91507f5354494c4c5f45584954494e47000000000000000000000000000000000000006000830152602082019050919050565b6000613fbe602b83614a2a565b91507f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60008301527f737420696e2073706163650000000000000000000000000000000000000000006020830152604082019050919050565b6000614024601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006000830152602082019050919050565b6000614064601583614a2a565b91507f6e6f7420656e6f756768207370616365736869707300000000000000000000006000830152602082019050919050565b60006140a4600983614a2a565b91507f4e4f545f4f574e455200000000000000000000000000000000000000000000006000830152602082019050919050565b60006140e4600983614a2a565b91507f746f6f206561726c7900000000000000000000000000000000000000000000006000830152602082019050919050565b6000614124600e83614a2a565b91507f77726f6e672064697374616e63650000000000000000000000000000000000006000830152602082019050919050565b6000614164600e83614a2a565b91507f4e4f545f415554484f52495a45440000000000000000000000000000000000006000830152602082019050919050565b60006141a4600e83614a2a565b91507f494e56414c49445f414d4f554e540000000000000000000000000000000000006000830152602082019050919050565b60006141e4601683614a2a565b91507f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006000830152602082019050919050565b6000614224600a83614a2a565b91507f6e6f626f647920776f6e000000000000000000000000000000000000000000006000830152602082019050919050565b60808201600082015161426d6000850182614453565b5060208201516142806020850182614453565b5060408201516142936040850182614453565b5060608201516142a66060850182614453565b50505050565b60a0820160008201516142c26000850182613b44565b5060208201516142d56020850182614453565b5060408201516142e86040850182614453565b5060608201516142fb6060850182614453565b50608082015161430e6080850182613bc0565b50505050565b60a08201600082015161432a6000850182613b44565b50602082015161433d6020850182614453565b5060408201516143506040850182614453565b5060608201516143636060850182614453565b5060808201516143766080850182613bc0565b50505050565b610100820160008201516143936000850182613c04565b5060208201516143a66020850182613c04565b5060408201516143b9604085018261441e565b5060608201516143cc606085018261441e565b5060808201516143df608085018261441e565b5060a08201516143f260a085018261441e565b5060c082015161440560c085018261441e565b5060e082015161441860e085018261441e565b50505050565b61442781614a82565b82525050565b61443681614ab0565b82525050565b61444d61444882614ab0565b614af8565b82525050565b61445c81614aba565b82525050565b61446b81614aba565b82525050565b600061447d8285613bed565b60208201915061448d828461443c565b6020820191508190509392505050565b60006060820190506144b26000830186613b53565b6144bf6020830185613b53565b6144cc604083018461442d565b949350505050565b60006040820190506144e96000830185613b53565b6144f6602083018461442d565b9392505050565b60006060820190506145126000830186613b53565b61451f6020830185614462565b61452c6040830184614462565b949350505050565b600060a082019050818103600083015261454e8185613b62565b905061455d6020830184614257565b9392505050565b60006020820190506145796000830184613bcf565b92915050565b60006020820190506145946000830184613bde565b92915050565b60006020820190506145af6000830184613c13565b92915050565b600060208201905081810360008301526145ce81613c31565b9050919050565b600060208201905081810360008301526145ee81613c71565b9050919050565b6000602082019050818103600083015261460e81613cb1565b9050919050565b6000602082019050818103600083015261462e81613cf1565b9050919050565b6000602082019050818103600083015261464e81613d31565b9050919050565b6000602082019050818103600083015261466e81613d71565b9050919050565b6000602082019050818103600083015261468e81613db1565b9050919050565b600060208201905081810360008301526146ae81613df1565b9050919050565b600060208201905081810360008301526146ce81613e31565b9050919050565b600060208201905081810360008301526146ee81613e71565b9050919050565b6000602082019050818103600083015261470e81613eb1565b9050919050565b6000602082019050818103600083015261472e81613ef1565b9050919050565b6000602082019050818103600083015261474e81613f31565b9050919050565b6000602082019050818103600083015261476e81613f71565b9050919050565b6000602082019050818103600083015261478e81613fb1565b9050919050565b600060208201905081810360008301526147ae81614017565b9050919050565b600060208201905081810360008301526147ce81614057565b9050919050565b600060208201905081810360008301526147ee81614097565b9050919050565b6000602082019050818103600083015261480e816140d7565b9050919050565b6000602082019050818103600083015261482e81614117565b9050919050565b6000602082019050818103600083015261484e81614157565b9050919050565b6000602082019050818103600083015261486e81614197565b9050919050565b6000602082019050818103600083015261488e816141d7565b9050919050565b600060208201905081810360008301526148ae81614217565b9050919050565b60006080820190506148ca6000830184614257565b92915050565b60006101a0820190506148e66000830185614314565b6148f360a083018461437c565b9392505050565b600060208201905061490f600083018461442d565b92915050565b600060608201905061492a600083018661442d565b6149376020830185614462565b6149446040830184614462565b949350505050565b60006020820190506149616000830184614462565b92915050565b600060808201905061497c6000830187614462565b6149896020830186613c22565b6149966040830185613bcf565b6149a36060830184613c22565b95945050505050565b60006080820190506149c16000830187614462565b6149ce6020830186614462565b6149db6040830185613bcf565b6149e86060830184614462565b95945050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614a4682614a90565b9050919050565b60008115159050919050565b6000819050919050565b6000614a6e82614a3b565b9050919050565b60008160000b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000614ad582614ab0565b9050919050565b6000614ae782614aba565b9050919050565b6000819050919050565b6000819050919050565b614b0b81614a3b565b8114614b1657600080fd5b50565b614b2281614a4d565b8114614b2d57600080fd5b50565b614b3981614a59565b8114614b4457600080fd5b50565b614b5081614a63565b8114614b5b57600080fd5b50565b614b6781614a82565b8114614b7257600080fd5b50565b614b7e81614ab0565b8114614b8957600080fd5b50565b614b9581614aba565b8114614ba057600080fd5b5056fea2646970667358221220e99134db472d153bb5b1647f961d6610869b9f71cafb77079c1f78e06412803364736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8656,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_planets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Planet)8690_storage)"
      },
      {
        "astId": 8660,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_fleets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Fleet)8697_storage)"
      },
      {
        "astId": 8664,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_stakeReadyToBeWithdrawn",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8670,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8681,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_discovered",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Discovered)8679_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Fleet)8697_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.Fleet)",
        "numberOfBytes": "32",
        "value": "t_struct(Fleet)8697_storage"
      },
      "t_mapping(t_uint256,t_struct(Planet)8690_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)8690_storage"
      },
      "t_struct(Discovered)8679_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Discovered",
        "members": [
          {
            "astId": 8672,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "minX",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8674,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "maxX",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8676,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "minY",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8678,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "maxY",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fleet)8697_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Fleet",
        "members": [
          {
            "astId": 8692,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8694,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "launchTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8696,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "quantity",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Planet)8690_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Planet",
        "members": [
          {
            "astId": 8683,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8685,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "exitTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8687,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "numSpaceships",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8689,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "lastUpdated",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}