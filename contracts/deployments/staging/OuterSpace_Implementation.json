{
  "address": "0x134872ea84272Ae6604b8f9d5392eD75af1c0c54",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "resolveWindow",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "timePerDistance",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "exitDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "acquireNumSpaceships",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destinationOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destination",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fleetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inFlightFleetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inFlightPlanetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        }
      ],
      "name": "FleetArrived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumSpaceships",
          "type": "uint32"
        }
      ],
      "name": "FleetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acquirer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numSpaceships",
          "type": "uint32"
        }
      ],
      "name": "PlanetStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStake",
          "type": "uint256"
        }
      ],
      "name": "StakeToWithdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "acquireViaTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "exitFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "fetchAndWithdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDiscovered",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "minX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minY",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxY",
              "type": "uint32"
            }
          ],
          "internalType": "struct OuterSpace.Discovered",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        }
      ],
      "name": "getFleet",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "launchTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneisHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "getPlanet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "exitTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct OuterSpace.ExternalPlanet",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "subX",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "subY",
              "type": "int8"
            },
            {
              "internalType": "uint16",
              "name": "stake",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "production",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "natives",
              "type": "uint16"
            }
          ],
          "internalType": "struct OuterSpace.PlanetStats",
          "name": "stats",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "getPlanetStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "exitTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct OuterSpace.ExternalPlanet[]",
          "name": "planetStates",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "minX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minY",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxY",
              "type": "uint32"
            }
          ],
          "internalType": "struct OuterSpace.Discovered",
          "name": "discovered",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenPaidFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "distance",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "resolveFleet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "toHash",
          "type": "bytes32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "toHash",
          "type": "bytes32"
        }
      ],
      "name": "sendFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8ec3d0030bc90550e14482f4600f0960af427de1cd9d72d01d7aab8ca932cc8",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x134872ea84272Ae6604b8f9d5392eD75af1c0c54",
    "transactionIndex": 11,
    "gasUsed": "4872621",
    "logsBloom": "0x
    "blockHash": "0x427696d0720fd2d551d0a61c3763f3b0b050ab2d2726d3cde8d235b1fe79989d",
    "transactionHash": "0xa8ec3d0030bc90550e14482f4600f0960af427de1cd9d72d01d7aab8ca932cc8",
    "logs": [],
    "blockNumber": 8367059,
    "cumulativeGasUsed": "9280622",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF114F1D90010Cf5CD148Be2e1630A258cF994365",
    "0xe0c3fa9ae97fc9b60baae605896b5e3e7cecb6baaaa4708162d1ec51e8d65a68",
    7200,
    7200,
    259200,
    100000
  ],
  "linkedData": {
    "genesisHash": "0xe0c3fa9ae97fc9b60baae605896b5e3e7cecb6baaaa4708162d1ec51e8d65a68",
    "resolveWindow": 7200,
    "timePerDistance": 7200,
    "exitDuration": 259200
  },
  "solcInputHash": "f21837aa81ca0e8f663541cdd642693a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"resolveWindow\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timePerDistance\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"exitDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"acquireNumSpaceships\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destination\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fleetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inFlightFleetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inFlightPlanetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"}],\"name\":\"FleetArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumSpaceships\",\"type\":\"uint32\"}],\"name\":\"FleetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acquirer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"}],\"name\":\"PlanetStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"StakeToWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acquireViaTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"exitFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"fetchAndWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscovered\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"}],\"internalType\":\"struct OuterSpace.Discovered\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"}],\"name\":\"getFleet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"launchTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneisHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"getPlanet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"exitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct OuterSpace.ExternalPlanet\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"subX\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"subY\",\"type\":\"int8\"},{\"internalType\":\"uint16\",\"name\":\"stake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"production\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"natives\",\"type\":\"uint16\"}],\"internalType\":\"struct OuterSpace.PlanetStats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"getPlanetStates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"exitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct OuterSpace.ExternalPlanet[]\",\"name\":\"planetStates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"}],\"internalType\":\"struct OuterSpace.Discovered\",\"name\":\"discovered\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenPaidFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"resolveFleet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"name\":\"sendFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OuterSpace.sol\":\"OuterSpace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x760a00cd889372a2358732403723d8a13cb8b02bb82450a9bf5488177828aa79\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/Libraries/Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.7.5;\\n\\n// TODO remove\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Extraction {\\n    function value(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 size\\n    ) internal pure returns (uint256) {\\n        return uint256((data >> leastSignificantBit)) % 2**size;\\n    }\\n\\n    function value8Mod(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 mod\\n    ) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % mod);\\n    }\\n\\n    function value8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % 2**8);\\n    }\\n\\n    // 1+1+2+3+4+6+7+8+8+7+6+4+3+2+1+1 // aproximation of normal distribution with mean=7.5 and standard deviation=3 for 16 values\\n    bytes32 constant n_m7_5_sd3 = 0x01223334444555555666666677777777888888889999999AAAAAABBBBCCCDDEF;\\n\\n    function normal8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        uint8 index = value8Mod(data, leastSignificantBit, 64);\\n        uint8 first = index / 2;\\n        uint8 second = index % 2;\\n        uint8 slot = uint8(n_m7_5_sd3[first]);\\n        if (second == 0) {\\n            return slot >> 4;\\n        } else {\\n            return slot % 16;\\n        }\\n    }\\n\\n    function normal16(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        bytes32 selection\\n    ) internal pure returns (uint16) {\\n        uint8 index = normal8(data, leastSignificantBit);\\n        return uint16(uint8(selection[index * 2])) * 2**8 + uint16(uint8(selection[index * 2 + 1]));\\n    }\\n}\\n\",\"keccak256\":\"0x4765abf887ada002e90311d342a0aed00a1e9122fd2c46a63d54ce53d6580067\",\"license\":\"AGPL-1.0\"},\"src/Libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.7.5;\\n\\nlibrary Math {\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require(b == 0 || a == 0 || ((c = a * b) / b) == a, overflowError);\\n    }\\n\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a + b) >= a, overflowError);\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory underflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, underflowError);\\n    }\\n\\n    function mul18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, b18, overflowError) / 10**18;\\n    }\\n\\n    function div18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, 10**18, overflowError) / b18;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function smin(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function smax(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function sqrt(uint256 a) internal pure returns (uint256 c) {\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2891f35c9f62a52dead283c1ec677f7279c0b0c220ece84f32da3e00f9adf786\",\"license\":\"AGPL-1.0\"},\"src/OuterSpace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Libraries/Extraction.sol\\\";\\nimport \\\"./Libraries/Math.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\n\\ncontract OuterSpace is Proxied {\\n    using Extraction for bytes32;\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // CONSTANTS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    uint256 internal constant DECIMALS_18 = 1e18;\\n    uint32 internal constant ACTIVE_MASK = 2**31;\\n    int256 internal constant UINT32_MAX = 2**32 - 1;\\n    uint256 internal constant FRONT_RUNNING_DELAY = 30 * 60; // 30 min // TODO make it configurable in the constructor\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // CONFIGURATION / IMMUTABLE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    bytes32 internal immutable _genesis;\\n    IERC20 internal immutable _stakingToken;\\n    uint256 internal immutable _resolveWindow;\\n    uint256 internal immutable _timePerDistance;\\n    uint256 internal immutable _exitDuration;\\n    uint32 internal immutable _acquireNumSpaceships;\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // STORAGE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    mapping(uint256 => Planet) internal _planets;\\n    mapping(uint256 => Fleet) internal _fleets;\\n\\n    mapping(address => uint256) internal _stakeReadyToBeWithdrawn;\\n\\n    mapping(address => mapping(address => bool)) internal _operators;\\n\\n    // front running protection : FRONT_RUNNING_DELAY / 2 slots\\n    struct InFlight {\\n        uint64 flying;\\n        uint64 destroyed;\\n    }\\n    mapping(uint256 => mapping(uint256 => InFlight)) internal _inFlight;\\n\\n    struct Discovered {\\n        uint32 minX;\\n        uint32 maxX;\\n        uint32 minY;\\n        uint32 maxY;\\n    }\\n\\n    Discovered internal _discovered;\\n\\n    struct Planet {\\n        address owner;\\n        uint32 exitTime;\\n        uint32 numSpaceships; // uint31 + first bit => active\\n        uint32 lastUpdated; // also used as native-destruction indicator\\n    }\\n\\n    struct Fleet {\\n        address owner;\\n        uint32 launchTime;\\n        uint32 quantity;\\n        // TODO uint32 delay\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // EVENTS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    event PlanetStake(address indexed acquirer, uint256 indexed location, uint32 numSpaceships);\\n    event FleetSent(\\n        address indexed fleetOwner,\\n        uint256 indexed from,\\n        uint256 fleet,\\n        uint32 quantity,\\n        uint32 newNumSpaceships\\n    );\\n    event FleetArrived(\\n        uint256 indexed fleet,\\n        address indexed fleetOwner,\\n        address indexed destinationOwner,\\n        uint256 destination,\\n        uint32 fleetLoss,\\n        uint32 planetLoss,\\n        uint32 inFlightFleetLoss,\\n        uint32 inFlightPlanetLoss,\\n        bool won,\\n        uint32 newNumspaceships\\n    );\\n\\n    event PlanetExit(address indexed owner, uint256 indexed location);\\n\\n    event StakeToWithdraw(address indexed owner, uint256 newStake);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // CONSTRUCTOR / INITIALIZATION\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    constructor(\\n        IERC20 stakingToken,\\n        bytes32 genesis,\\n        uint32 resolveWindow,\\n        uint32 timePerDistance,\\n        uint32 exitDuration,\\n        uint32 acquireNumSpaceships\\n    ) {\\n        uint32 t = timePerDistance / 4; // the coordinates space is 4 times bigger\\n        require(t * 4 == timePerDistance, \\\"TIME_PER_ DIST_NOT_DIVISIBLE_4\\\");\\n\\n        _stakingToken = stakingToken;\\n        _genesis = genesis;\\n        _resolveWindow = resolveWindow;\\n        _timePerDistance = t;\\n        _exitDuration = exitDuration;\\n        _acquireNumSpaceships = acquireNumSpaceships;\\n\\n        postUpgrade(stakingToken, genesis, resolveWindow, timePerDistance, exitDuration, acquireNumSpaceships);\\n    }\\n\\n    function postUpgrade(\\n        IERC20,\\n        bytes32,\\n        uint32,\\n        uint32,\\n        uint32,\\n        uint32\\n    ) public proxied {\\n        if (_discovered.minX == 0) {\\n            _discovered = Discovered({minX: 12, maxX: 12, minY: 12, maxY: 12});\\n        }\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function onTokenTransfer(\\n        address,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public returns (bool) {\\n        require(msg.sender == address(_stakingToken), \\\"INVALID_ERC20\\\");\\n        (address acquirer, uint256 location) = abi.decode(data, (address, uint256));\\n        _acquire(acquirer, amount, location); // we do not care of who the payer is\\n        return true;\\n    }\\n\\n    function onTokenPaidFor(\\n        address,\\n        address forAddress,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        require(msg.sender == address(_stakingToken), \\\"INVALID_ERC20\\\");\\n        uint256 location = abi.decode(data, (uint256));\\n        _acquire(forAddress, amount, location); // we do not care of who the payer is\\n        return true;\\n    }\\n\\n    function acquireViaTransferFrom(uint256 location, uint256 amount) public {\\n        address sender = _msgSender();\\n        _acquire(sender, amount, location);\\n        _stakingToken.transferFrom(sender, address(this), amount);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // EXIT / WITHDRAWALS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function exitFor(address owner, uint256 location) external {\\n        Planet storage planet = _getPlanet(location);\\n        require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n        require(planet.exitTime == 0, \\\"EXITING_ALREADY\\\"); // if you own the planet again, you ll need to first withdraw\\n        planet.exitTime = uint32(block.timestamp);\\n        emit PlanetExit(owner, location);\\n    }\\n\\n    function fetchAndWithdrawFor(address owner, uint256[] calldata locations) external {\\n        uint256 addedStake = 0;\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            if (_hasJustExited(planet.exitTime)) {\\n                require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n                addedStake += _setPlanetAfterExitWithoutUpdatingStake(locations[i], owner, planet, address(0), 0); // no need of event as exitTime passed basically mean owner zero and spaceships zero\\n            }\\n        }\\n        uint256 newStake = _stakeReadyToBeWithdrawn[owner] + addedStake;\\n        _withdrawAll(owner, newStake);\\n    }\\n\\n    function balanceToWithdraw(address owner) external view returns (uint256) {\\n        return _stakeReadyToBeWithdrawn[owner];\\n    }\\n\\n    function withdrawFor(address owner) external {\\n        uint256 amount = _stakeReadyToBeWithdrawn[owner];\\n        _withdrawAll(owner, amount);\\n    }\\n\\n    function _withdrawAll(address owner, uint256 amount) internal {\\n        _updateStake(owner, 0);\\n        require(_stakingToken.transfer(owner, amount), \\\"FAILED_TRANSFER\\\"); // TODO FundManager\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function resolveFleet(\\n        uint256 fleetId,\\n        uint256 from,\\n        uint256 to,\\n        uint256 distance,\\n        bytes32 secret\\n    ) external {\\n        _resolveFleet(fleetId, from, to, distance, secret);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function send(\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external {\\n        _sendFor(_msgSender(), from, quantity, toHash);\\n    }\\n\\n    function sendFor(\\n        address owner,\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external {\\n        address sender = _msgSender();\\n        if (sender != owner) {\\n            require(_operators[owner][sender], \\\"NOT_AUTHORIZED\\\");\\n        }\\n        _sendFor(_msgSender(), from, quantity, toHash);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function getFleet(uint256 fleetId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint32 launchTime,\\n            uint32 quantity\\n        )\\n    {\\n        launchTime = _fleets[fleetId].launchTime;\\n        quantity = _fleets[fleetId].quantity;\\n        owner = _fleets[fleetId].owner;\\n    }\\n\\n    function getGeneisHash() external view returns (bytes32) {\\n        return _genesis;\\n    }\\n\\n    struct PlanetStats {\\n        int8 subX;\\n        int8 subY;\\n        uint16 stake;\\n        uint16 production;\\n        uint16 attack;\\n        uint16 defense;\\n        uint16 speed;\\n        uint16 natives;\\n    }\\n\\n    struct ExternalPlanet {\\n        address owner;\\n        uint32 exitTime;\\n        uint32 numSpaceships;\\n        uint32 lastUpdated;\\n        bool active;\\n    }\\n\\n    function getPlanet(uint256 location) external view returns (ExternalPlanet memory state, PlanetStats memory stats) {\\n        Planet storage planet = _getPlanet(location);\\n        (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n        state = ExternalPlanet({\\n            owner: planet.owner,\\n            exitTime: planet.exitTime,\\n            numSpaceships: numSpaceships,\\n            lastUpdated: planet.lastUpdated,\\n            active: active\\n        });\\n        stats = _getPlanetStats(location);\\n    }\\n\\n    function getPlanetStates(uint256[] calldata locations)\\n        external\\n        view\\n        returns (ExternalPlanet[] memory planetStates, Discovered memory discovered)\\n    {\\n        planetStates = new ExternalPlanet[](locations.length);\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n            planetStates[i] = ExternalPlanet({\\n                owner: planet.owner,\\n                exitTime: planet.exitTime,\\n                numSpaceships: numSpaceships,\\n                lastUpdated: planet.lastUpdated,\\n                active: active\\n            });\\n        }\\n        discovered = _discovered;\\n    }\\n\\n    function getDiscovered() external view returns (Discovered memory) {\\n        return _discovered;\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // ERC721 : // TODO\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        address sender = _msgSender();\\n        _operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // INTERNALS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    // function _actualiseExit(uint256 location) internal {\\n    //     Planet storage planet = _getPlanet(location);\\n    //     if (planet.exitTime > 0 && block.timestamp > planet.exitTime + _exitDuration) {\\n    //         uint16 stake = _stake(location);\\n    //         address owner = planet.owner;\\n    //         planet.exitTime = 0;\\n    //         planet.owner = address(0); // This is fine as long as _actualiseExit is called on every move\\n    //         planet.numSpaceships = 0; // This is fine as long as _actualiseExit is called on every move\\n    //         planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\\n    //         _stakeReadyToBeWithdrawn[owner] += stake * DECIMALS_18;\\n    //     }\\n    // }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _acquire(\\n        address sender,\\n        uint256 paidFor,\\n        uint256 location\\n    ) internal {\\n        console.logBytes32(bytes32(location));\\n        bytes32 data = _planetData(location);\\n        require(paidFor == uint256(_stake(data)) * (DECIMALS_18), \\\"INVALID_AMOUNT\\\");\\n\\n        _handleSpaceships(sender, location, data);\\n        _handleDiscovery(location);\\n    }\\n\\n    function _handleSpaceships(\\n        address sender,\\n        uint256 location,\\n        bytes32 data\\n    ) internal {\\n        Planet storage planet = _getPlanet(location);\\n        address owner = planet.owner;\\n        uint32 lastUpdated = planet.lastUpdated;\\n        uint32 numSpaceshipsData = planet.numSpaceships;\\n        uint32 exitTime = planet.exitTime;\\n\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            numSpaceshipsData,\\n            lastUpdated,\\n            _production(data)\\n        );\\n\\n        bool justExited;\\n        uint32 defense;\\n        if (lastUpdated == 0) {\\n            defense = _natives(data);\\n        } else {\\n            if (exitTime != 0) {\\n                require(_hasJustExited(exitTime), \\\"STILL_EXITING\\\");\\n                justExited = true;\\n            } else {\\n                require(!active, \\\"STILL_ACTIVE\\\");\\n                if (owner != sender) {\\n                    defense = currentNumSpaceships;\\n                } else {\\n                    defense = 0;\\n                }\\n            }\\n        }\\n        if (justExited) {\\n            currentNumSpaceships = _acquireNumSpaceships;\\n            _setPlanetAfterExit(location, owner, planet, sender, _setActiveNumSpaceships(true, currentNumSpaceships));\\n        } else {\\n            planet.owner = sender;\\n            if (defense != 0) {\\n                (uint32 attackerLoss, ) = _computeFight(_acquireNumSpaceships, defense, 10000, _defense(data)); // attacker alwasy win as defense (and stats.native) is restricted to 3500\\n                require(attackerLoss <= _acquireNumSpaceships, \\\"FAILED_CAPTURED\\\");\\n                currentNumSpaceships = _acquireNumSpaceships - attackerLoss;\\n            } else {\\n                currentNumSpaceships += _acquireNumSpaceships;\\n            }\\n\\n            // planet.exitTime = 0; // should not be needed : // TODO actualiseExit\\n            planet.numSpaceships = _setActiveNumSpaceships(true, currentNumSpaceships);\\n            planet.lastUpdated = uint32(block.timestamp);\\n        }\\n        emit PlanetStake(sender, location, currentNumSpaceships);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _handleDiscovery(uint256 location) internal {\\n        Discovered memory discovered = _discovered;\\n        int256 x = int256(int128(location & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\\n        int256 y = int256(int128(location >> 128));\\n        bool changes = false;\\n        if (x < 0) {\\n            require(-x <= discovered.minX, \\\"NOT_REACHABLE_YET_MINX\\\");\\n            x = -x + 6;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.minX < uint32(x)) {\\n                discovered.minX = uint32(x);\\n                changes = true;\\n            }\\n        } else {\\n            require(x <= discovered.maxX, \\\"NOT_REACHABLE_YET_MAXX\\\");\\n            x = x + 6;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.maxX < uint32(x)) {\\n                discovered.maxX = uint32(x);\\n                changes = true;\\n            }\\n        }\\n\\n        if (y < 0) {\\n            require(-y <= discovered.minY, \\\"NOT_REACHABLE_YET_MINY\\\");\\n            y = -y + 6;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (discovered.minY < uint32(y)) {\\n                discovered.minY = uint32(y);\\n                changes = true;\\n            }\\n        } else {\\n            require(y <= discovered.maxY, \\\"NOT_REACHABLE_YET_MAXY\\\");\\n            y = y + 6;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (discovered.maxY < uint32(y)) {\\n                discovered.maxY = uint32(y);\\n                changes = true;\\n            }\\n        }\\n        if (changes) {\\n            _discovered = discovered;\\n        }\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // EXITS / WITHDRAWALS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _hasJustExited(uint32 exitTime) internal view returns (bool) {\\n        return exitTime > 0 && block.timestamp > exitTime + _exitDuration;\\n    }\\n\\n    function _setPlanetAfterExit(\\n        uint256 location,\\n        address owner,\\n        Planet storage planet,\\n        address newOwner,\\n        uint32 spaceshipsData\\n    ) internal {\\n        uint256 addedStake = _setPlanetAfterExitWithoutUpdatingStake(location, owner, planet, newOwner, spaceshipsData);\\n        _updateStake(owner, _stakeReadyToBeWithdrawn[owner] + addedStake);\\n    }\\n\\n    function _updateStake(address owner, uint256 newStake) internal {\\n        _stakeReadyToBeWithdrawn[owner] = newStake;\\n        emit StakeToWithdraw(owner, newStake);\\n    }\\n\\n    function _setPlanetAfterExitWithoutUpdatingStake(\\n        uint256 location,\\n        address owner,\\n        Planet storage planet,\\n        address newOwner,\\n        uint32 spaceshipsData\\n    ) internal returns (uint256) {\\n        bytes32 data = _planetData(location);\\n        uint16 stake = _stake(data);\\n        planet.exitTime = 0;\\n        planet.owner = newOwner; // This is fine as long as _actualiseExit is called on every move\\n        planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\\n        planet.numSpaceships = spaceshipsData;\\n        return stake * DECIMALS_18;\\n    }\\n\\n    /*\\n    uint256 newStake = _stakeReadyToBeWithdrawn[owner] + stake * DECIMALS_18;\\n    _stakeReadyToBeWithdrawn[owner] = newStake;\\n    emit StakeToWithdraw(owner, newStake);\\n    */\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _sendFor(\\n        address owner,\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) internal {\\n        Planet storage planet = _getPlanet(from);\\n\\n        require(planet.exitTime == 0, \\\"PLANET_EXIT\\\");\\n        require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n\\n        bytes32 data = _planetData(from);\\n        uint16 production = _production(data);\\n\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            planet.numSpaceships,\\n            planet.lastUpdated,\\n            production\\n        );\\n        require(currentNumSpaceships >= quantity, \\\"SPACESHIPS_NOT_ENOUGH\\\");\\n\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // record flying fleets (to prevent front-running, see resolution)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (FRONT_RUNNING_DELAY / 2);\\n        uint64 flying = _inFlight[from][timeSlot].flying;\\n        flying = flying + quantity;\\n        require(flying >= quantity, \\\"OVERFLOW\\\"); // unlikely to ever happen, would need a hug amount of spaceships to be received and each in turn being sent\\n        _inFlight[from][timeSlot].flying = flying;\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n        uint32 launchTime = uint32(block.timestamp); // TODO allow delay : launchTime in future\\n        uint32 numSpaceships = currentNumSpaceships - quantity;\\n        planet.numSpaceships = _setActiveNumSpaceships(active, numSpaceships);\\n        planet.lastUpdated = launchTime;\\n\\n        uint256 fleetId = uint256(keccak256(abi.encodePacked(toHash, from)));\\n        _fleets[fleetId] = Fleet({launchTime: launchTime, owner: owner, quantity: quantity});\\n\\n        emit FleetSent(owner, from, fleetId, quantity, numSpaceships);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    struct FleetResult {\\n        uint32 inFlightPlanetLoss;\\n        uint32 attackerLoss;\\n        uint32 defenderLoss;\\n        bool won;\\n        uint32 numSpaceships;\\n    }\\n\\n    function _resolveFleet(\\n        uint256 fleetId,\\n        uint256 from,\\n        uint256 to,\\n        uint256 distance,\\n        bytes32 secret\\n    ) internal {\\n        Fleet memory fleet = _fleets[fleetId];\\n        (uint32 quantity, uint32 inFlightFleetLoss) = _checkFleetAndComputeQuantityLeft(\\n            fleet,\\n            fleetId,\\n            from,\\n            to,\\n            distance,\\n            secret\\n        );\\n        Planet memory toPlanet = _getPlanet(to);\\n        emit_fleet_arrived(\\n            fleet.owner,\\n            fleetId,\\n            toPlanet.owner,\\n            to,\\n            _performResolution(fleet, from, toPlanet, to, quantity),\\n            inFlightFleetLoss\\n        );\\n        _fleets[fleetId].quantity = 0; // TODO reset all to get gas refund? // TODO ensure frontend can still easily check fleet status\\n    }\\n\\n    function _performResolution(\\n        Fleet memory fleet,\\n        uint256 from,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint32 quantity\\n    ) internal returns (FleetResult memory result) {\\n        if (toPlanet.owner == fleet.owner) {\\n            return _performReinforcement(fleet.owner, toPlanet, to, quantity);\\n        } else {\\n            return _performAttack(fleet.owner, from, toPlanet, to, quantity);\\n        }\\n    }\\n\\n    function _checkFleetAndComputeQuantityLeft(\\n        Fleet memory fleet,\\n        uint256 fleetId,\\n        uint256 from,\\n        uint256 to,\\n        uint256 distance,\\n        bytes32 secret\\n    ) internal returns (uint32 quantity, uint32 inFlightFleetLoss) {\\n        require(\\n            uint256(keccak256(abi.encodePacked(keccak256(abi.encodePacked(secret, to)), from))) == fleetId,\\n            \\\"INVALID_FLEET_DATA_OR_SECRET'\\\"\\n        );\\n\\n        quantity = fleet.quantity;\\n        require(quantity > 0, \\\"FLEET_DO_NOT_EXIST\\\");\\n\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // check if fleet was attacked while departing (used to prevent front-running, see fleet sending)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        quantity = _fleet_flying_at_origin(quantity, from, fleet.launchTime);\\n        inFlightFleetLoss = fleet.quantity - quantity;\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n        _checkDistance(distance, from, to);\\n        _checkTime(distance, from, fleet.launchTime);\\n    }\\n\\n    function emit_fleet_arrived(\\n        address fleetOwner,\\n        uint256 fleetID,\\n        address toOwner,\\n        uint256 to,\\n        FleetResult memory result,\\n        uint32 inFlightFleetLoss\\n    ) internal {\\n        emit FleetArrived(\\n            fleetID,\\n            fleetOwner,\\n            toOwner,\\n            to,\\n            result.attackerLoss,\\n            result.defenderLoss,\\n            inFlightFleetLoss,\\n            result.inFlightPlanetLoss,\\n            result.won,\\n            result.numSpaceships\\n        );\\n    }\\n\\n    function _fleet_flying_at_origin(\\n        uint32 quantity,\\n        uint256 from,\\n        uint32 launchTime\\n    ) internal returns (uint32) {\\n        uint256 timeSlot = launchTime / (FRONT_RUNNING_DELAY / 2);\\n        uint64 destroyed = _inFlight[from][timeSlot].destroyed;\\n        if (destroyed < quantity) {\\n            quantity -= uint32(destroyed);\\n            _inFlight[from][timeSlot].destroyed = 0;\\n        } else {\\n            quantity = 0;\\n            _inFlight[from][timeSlot].destroyed = destroyed - quantity;\\n        }\\n        return quantity;\\n    }\\n\\n    function _performAttack(\\n        address attacker,\\n        uint256 from,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint32 numAttack\\n    ) internal returns (FleetResult memory result) {\\n        if (toPlanet.lastUpdated == 0) {\\n            // Planet was never touched (previous attack could have failed to succeed attack on natives)\\n            bytes32 toPlanetData = _planetData(to);\\n            return _nativeAttack(attacker, from, to, toPlanetData, numAttack);\\n        } else if (_hasJustExited(toPlanet.exitTime)) {\\n            return _fleetAfterExit(to, toPlanet.owner, _planets[to], attacker, numAttack);\\n        } else {\\n            bytes32 toPlanetData = _planetData(to);\\n            uint16 attack = _attack(_planetData(from));\\n            uint16 defense = _defense(toPlanetData);\\n            uint16 production = _production(toPlanetData);\\n            return _actualAttack(attacker, attack, defense, toPlanet, to, production, numAttack);\\n        }\\n    }\\n\\n    function _fleetAfterExit(\\n        uint256 to,\\n        address owner,\\n        Planet storage planet,\\n        address attacker,\\n        uint32 numAttack\\n    ) internal returns (FleetResult memory result) {\\n        _setPlanetAfterExit(to, owner, planet, attacker, numAttack);\\n        result.numSpaceships = numAttack;\\n        // result.won = true; // TODO ?\\n    }\\n\\n    function _nativeAttack(\\n        address attacker,\\n        uint256 from,\\n        uint256 to,\\n        bytes32 toData,\\n        uint32 numAttack\\n    ) internal returns (FleetResult memory result) {\\n        uint16 attack = _attack(_planetData(from));\\n        uint16 defense = _defense(toData);\\n        uint16 natives = _natives(toData);\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, natives, attack, defense);\\n        result.attackerLoss = attackerLoss;\\n        if (defenderLoss == natives && numAttack > attackerLoss) {\\n            result.numSpaceships = numAttack - attackerLoss;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(false, result.numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n            _planets[to].owner = attacker;\\n            result.defenderLoss = defenderLoss;\\n            result.won = true;\\n        }\\n    }\\n\\n    function _actualAttack(\\n        address attacker,\\n        uint16 attack,\\n        uint16 defense,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint16 production,\\n        uint32 numAttack\\n    ) internal returns (FleetResult memory result) {\\n        PreCombatState memory state = _getPlanetPreCombatState(toPlanet, to, production);\\n\\n        if (state.numDefense == 0) {\\n            _planets[to].owner = attacker;\\n            _planets[to].exitTime = 0;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, numAttack);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n            result.won = true;\\n            result.numSpaceships = numAttack;\\n            return result;\\n        }\\n\\n        return _completeCombatResult(state, attacker, to, numAttack, attack, defense);\\n    }\\n\\n    struct PreCombatState {\\n        bool active;\\n        uint32 currentNumSpaceships;\\n        uint32 numDefense;\\n        uint64 flying1;\\n        uint64 destroyed1;\\n        uint64 flying2;\\n        uint64 destroyed2;\\n    }\\n\\n    function _getPlanetPreCombatState(\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint16 production\\n    ) internal view returns (PreCombatState memory state) {\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            toPlanet.numSpaceships,\\n            toPlanet.lastUpdated,\\n            production\\n        );\\n\\n        (\\n            uint32 numDefense,\\n            uint64 flying1,\\n            uint64 destroyed1,\\n            uint64 flying2,\\n            uint64 destroyed2\\n        ) = computeDefenseWithInFlightFleets(currentNumSpaceships, to);\\n        state.active = active;\\n        state.currentNumSpaceships = currentNumSpaceships;\\n        state.numDefense = numDefense;\\n        state.flying1 = flying1;\\n        state.destroyed1 = destroyed1;\\n        state.flying2 = flying2;\\n        state.destroyed2 = destroyed2;\\n    }\\n\\n    function computeDefenseWithInFlightFleets(uint32 numSpaceships, uint256 to)\\n        internal\\n        view\\n        returns (\\n            uint32 numDefense,\\n            uint64 flying1,\\n            uint64 destroyed1,\\n            uint64 flying2,\\n            uint64 destroyed2\\n        )\\n    {\\n        numDefense = numSpaceships;\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (FRONT_RUNNING_DELAY / 2);\\n        flying1 = _inFlight[to][timeSlot - 1].flying;\\n        destroyed1 = _inFlight[to][timeSlot - 1].flying;\\n        flying2 = _inFlight[to][timeSlot].flying;\\n        destroyed2 = _inFlight[to][timeSlot].destroyed;\\n        numDefense = uint32(Math.min(flying1 + flying2 + numDefense, 2**32 - 1));\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n    }\\n\\n    function _completeCombatResult(\\n        PreCombatState memory state,\\n        address attacker,\\n        uint256 to,\\n        uint32 numAttack,\\n        uint16 attack,\\n        uint16 defense\\n    ) internal returns (FleetResult memory result) {\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, state.numDefense, attack, defense);\\n        result.attackerLoss = attackerLoss;\\n        result.defenderLoss = defenderLoss;\\n\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        if (result.defenderLoss > state.currentNumSpaceships) {\\n            result.inFlightPlanetLoss = defenderLoss - state.currentNumSpaceships;\\n            result.defenderLoss = state.currentNumSpaceships;\\n            if (state.flying1 >= result.inFlightPlanetLoss) {\\n                state.flying1 -= result.inFlightPlanetLoss;\\n                state.destroyed1 += result.inFlightPlanetLoss;\\n            } else {\\n                state.destroyed1 += state.flying1;\\n                uint64 extra = (result.inFlightPlanetLoss - state.flying1);\\n                if (state.flying2 >= extra) {\\n                    state.flying2 -= extra;\\n                    state.destroyed2 += extra;\\n                } else {\\n                    state.destroyed2 += state.flying2;\\n                    state.flying2 = 0; // should never reach minus but let simply set it to zero\\n                }\\n                state.flying1 = 0;\\n            }\\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2) - 1].flying = state.flying1;\\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2) - 1].destroyed = state.destroyed1;\\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2)].flying = state.flying2;\\n            _inFlight[to][block.timestamp / (FRONT_RUNNING_DELAY / 2)].destroyed = state.destroyed2;\\n        }\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        if (result.defenderLoss == state.currentNumSpaceships) {\\n            result.numSpaceships = numAttack - attackerLoss;\\n            result.won = true;\\n            _planets[to].owner = attacker;\\n            _planets[to].exitTime = 0;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, result.numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n        } else if (result.attackerLoss == numAttack) {\\n            result.numSpaceships = state.currentNumSpaceships - defenderLoss;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, result.numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n        } else {\\n            assert(false); // should not happen\\n        }\\n    }\\n\\n    function _performReinforcement(\\n        address sender,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint32 quantity\\n    ) internal returns (FleetResult memory result) {\\n        if (_hasJustExited(toPlanet.exitTime)) {\\n            return _fleetAfterExit(to, toPlanet.owner, _planets[to], sender, quantity); // TODO for now use same as in performAttack: either regroup earlier or decide if different behavior (won vs not won for example?)\\n        } else {\\n            bytes32 toPlanetData = _planetData(to);\\n            uint16 production = _production(toPlanetData);\\n            (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n                toPlanet.numSpaceships,\\n                toPlanet.lastUpdated,\\n                production\\n            );\\n            uint256 newNumSpaceships = currentNumSpaceships + quantity;\\n            if (newNumSpaceships >= ACTIVE_MASK) {\\n                newNumSpaceships = ACTIVE_MASK - 1;\\n            }\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(active, uint32(newNumSpaceships));\\n            result.numSpaceships = uint32(newNumSpaceships);\\n        }\\n    }\\n\\n    function _computeFight(\\n        uint256 numAttack,\\n        uint256 numDefense,\\n        uint256 attack,\\n        uint256 defense\\n    ) internal pure returns (uint32 attackerLoss, uint32 defenderLoss) {\\n        uint256 attackPower = (numAttack * attack);\\n        uint256 defensePower = (numDefense * defense);\\n\\n        uint256 numAttackRound = (numDefense * 100000000) / attackPower;\\n        if (numAttackRound * attackPower < (numDefense * 100000000)) {\\n            numAttackRound++;\\n        }\\n        uint256 numDefenseRound = (numAttack * 100000000) / defensePower;\\n        if (numDefenseRound * defensePower < (numAttack * 100000000)) {\\n            numDefenseRound++;\\n        }\\n\\n        uint256 numRound = Math.min(numAttackRound, numDefenseRound);\\n        attackerLoss = uint32(Math.min((numRound * defensePower) / 100000000, numAttack));\\n        defenderLoss = uint32(Math.min((numRound * attackPower) / 100000000, numDefense));\\n    }\\n\\n    function _checkDistance(\\n        uint256 distance,\\n        uint256 from,\\n        uint256 to\\n    ) internal view {\\n        (int8 fromSubX, int8 fromSubY) = _subLocation(_planetData(from));\\n        (int8 toSubX, int8 toSubY) = _subLocation(_planetData(to));\\n        // check input instead of compute sqrt\\n        uint256 distanceSquared = uint256( // check input instead of compute sqrt\\n            ((int128(to & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) * 4 + toSubX) -\\n                (int128(from & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) * 4 + fromSubX)) **\\n                2 +\\n                ((int128(to >> 128) * 4 + toSubY) - (int128(from >> 128) * 4 + fromSubY))**2\\n        );\\n        require(distance**2 <= distanceSquared && distanceSquared < (distance + 1)**2, \\\"wrong distance\\\");\\n    }\\n\\n    function _checkTime(\\n        uint256 distance,\\n        uint256 from,\\n        uint32 launchTime\\n    ) internal view {\\n        uint256 reachTime = launchTime + (distance * (_timePerDistance * 10000)) / _speed(_planetData(from));\\n        require(block.timestamp >= reachTime, \\\"too early\\\");\\n        require(block.timestamp < reachTime + _resolveWindow, \\\"too late, your spaceships are lost in space\\\");\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // PLANET STATS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _planetData(uint256 location) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_genesis, location));\\n    }\\n\\n    function _subLocation(bytes32 data) internal pure returns (int8 subX, int8 subY) {\\n        subX = int8(1 - data.value8Mod(0, 3));\\n        subY = int8(1 - data.value8Mod(2, 3));\\n    }\\n\\n    // 4,5,5,10,10,15,15, 20, 20, 30,30,40,40,80,80,100\\n    bytes32 constant stakeRange = 0x000400050005000A000A000F000F00140014001E001E00280028005000500064;\\n\\n    function _stake(bytes32 data) internal pure returns (uint16) {\\n        // return data.normal16(4, 0x000400050005000A000A000F000F00140014001E001E00280028005000500064);\\n        uint8 productionIndex = data.normal8(12); // production affect the stake value\\n        uint16 offset = data.normal16(4, 0x0000000100010002000200030003000400040005000500060006000700070008);\\n        uint16 stakeIndex = productionIndex + offset;\\n        if (stakeIndex < 4) {\\n            stakeIndex = 0;\\n        } else if (stakeIndex > 19) {\\n            stakeIndex = 15;\\n        } else {\\n            stakeIndex -= 4;\\n        }\\n        return uint16(uint8(stakeRange[stakeIndex * 2 + 1])); // skip stakeIndex * 2 + 0 as it is always zero in stakeRange\\n    }\\n\\n    function _production(bytes32 data) internal pure returns (uint16) {\\n        // TODO TRY : 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4000,4400,4800,5400,6200,7200 ?\\n\\n        // 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4200,5400,6600,7800,9000,12000\\n        // 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0\\n        return data.normal16(12, 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0); // per hour\\n    }\\n\\n    function _attack(bytes32 data) internal pure returns (uint16) {\\n        return 4000 + data.normal8(20) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _defense(bytes32 data) internal pure returns (uint16) {\\n        return 4000 + data.normal8(28) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _speed(bytes32 data) internal pure returns (uint16) {\\n        return 5005 + data.normal8(36) * 333; // 5,005 - 7,502.5 - 10,000\\n    }\\n\\n    function _natives(bytes32 data) internal pure returns (uint16) {\\n        return 15000 + data.normal8(44) * 3000; // 15,000 - 37,500 - 60,000\\n    }\\n\\n    function _exists(bytes32 data) internal pure returns (bool) {\\n        return data.value8Mod(52, 16) == 1; // 16 => 36 so : 1 planet per 6 (=24 min unit) square\\n        // also:\\n        // 20000 average starting numSpaceships (or max?)\\n        // speed of min unit = 30 min ( 1 hour per square)\\n        // production : 20000 per 6 hours\\n        // exit : 3 days ? => 72 distance\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _getPlanet(uint256 location) internal view returns (Planet storage) {\\n        return _planets[location];\\n    }\\n\\n    function _getPlanetStats(uint256 location) internal view returns (PlanetStats memory) {\\n        bytes32 data = _planetData(location);\\n        require(_exists(data), \\\"no planet in this location\\\");\\n\\n        (int8 subX, int8 subY) = _subLocation(data);\\n        return\\n            PlanetStats({\\n                subX: subX,\\n                subY: subY,\\n                stake: _stake(data),\\n                production: _production(data),\\n                attack: _attack(data),\\n                defense: _defense(data),\\n                speed: _speed(data),\\n                natives: _natives(data)\\n            });\\n    }\\n\\n    function _getCurrentNumSpaceships(\\n        uint32 numSpaceshipsData,\\n        uint256 lastUpdated,\\n        uint16 production\\n    ) internal view returns (bool active, uint32 currentNumSpaceships) {\\n        (active, currentNumSpaceships) = _activeNumSpaceships(numSpaceshipsData);\\n        if (active) {\\n            uint256 timePassed = block.timestamp - lastUpdated;\\n            uint256 newSpaceships = uint256(currentNumSpaceships) + (timePassed * uint256(production)) / 1 hours;\\n            if (newSpaceships >= ACTIVE_MASK) {\\n                newSpaceships = ACTIVE_MASK - 1;\\n            }\\n            currentNumSpaceships = uint32(newSpaceships);\\n        }\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // UTILS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _activeNumSpaceships(uint32 numSpaceshipsData) internal pure returns (bool active, uint32 numSpaceships) {\\n        active = (numSpaceshipsData & ACTIVE_MASK) == ACTIVE_MASK;\\n        numSpaceships = numSpaceshipsData % (ACTIVE_MASK);\\n    }\\n\\n    function _setActiveNumSpaceships(bool active, uint32 numSpaceships) internal pure returns (uint32) {\\n        return uint32((active ? ACTIVE_MASK : 0) + numSpaceships);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n}\\n\",\"keccak256\":\"0x1b7c3d434381eac48379692436b84da30351d3ec7f9de0054399010c64468fa8\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162005c0538038062005c05833981810160405281019062000038919062000383565b600060048463ffffffff16816200004b57fe5b0490508363ffffffff166004820263ffffffff1614620000a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000099906200045b565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505085608081815250508463ffffffff1660c081815250508063ffffffff1660e081815250508263ffffffff1661010081815250508163ffffffff166101208163ffffffff1660e01b815250506200013a8787878787876200014760201b60201c565b505050505050506200053e565b6000620001596200031560201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620001ce5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035562000208565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200020757600080fd5b5b6000600560000160009054906101000a900463ffffffff1663ffffffff1614156200030c576040518060800160405280600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff16815250600560008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b50505050505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6000815190506200034f81620004f0565b92915050565b60008151905062000366816200050a565b92915050565b6000815190506200037d8162000524565b92915050565b60008060008060008060c087890312156200039d57600080fd5b6000620003ad89828a0162000355565b9650506020620003c089828a016200033e565b9550506040620003d389828a016200036c565b9450506060620003e689828a016200036c565b9350506080620003f989828a016200036c565b92505060a06200040c89828a016200036c565b9150509295509295509295565b600062000428601e836200047d565b91507f54494d455f5045525f20444953545f4e4f545f444956495349424c455f3400006000830152602082019050919050565b60006020820190508181036000830152620004768162000419565b9050919050565b600082825260208201905092915050565b60006200049b82620004c0565b9050919050565b6000819050919050565b6000620004b9826200048e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b620004fb81620004a2565b81146200050757600080fd5b50565b6200051581620004ac565b81146200052157600080fd5b50565b6200052f81620004e0565b81146200053b57600080fd5b50565b60805160a05160601c60c05160e051610100516101205160e01c61564f620005b6600039806121f7528061228c52806122d25280612342528061236c525080611b94525080612fdd52508061305652508061077552806108545280610a6c528061186a52508061082c5280611cad525061564f6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a22cb465116100a2578063b92ce46711610071578063b92ce467146102b4578063c5aaa0ae146102d0578063c9560838146102ee578063e2e9b0791461031e578063f9740c751461033a5761010b565b8063a22cb4651461021b578063a4c0ed3614610237578063aba789f514610267578063afc82370146102985761010b565b80637ba423fb116100de5780637ba423fb146101955780637cef64d8146101b15780639b6be065146101cf5780639eca672c146101ff5761010b565b8063112e68511461011057806334efcb8e1461012c57806361f018c01461015d5780636adc09e514610179575b600080fd5b61012a60048036038101906101259190614679565b61036c565b005b6101466004803603810190610141919061459d565b610384565b604051610154929190615373565b60405180910390f35b61017760048036038101906101729190614443565b610477565b005b610193600480360381019061018e9190614514565b61059a565b005b6101af60048036038101906101aa91906145c6565b61075c565b005b6101b9610828565b6040516101c6919061507d565b60405180910390f35b6101e960048036038101906101e49190614287565b610850565b6040516101f69190615062565b60405180910390f35b61021960048036038101906102149190614222565b61090c565b005b6102356004803603810190610230919061435f565b61095e565b005b610251600480360381019061024c91906143d7565b610a68565b60405161025e9190615062565b60405180910390f35b610281600480360381019061027c91906144a6565b610b27565b60405161028f929190615032565b60405180910390f35b6102b260048036038101906102ad919061439b565b610d4c565b005b6102ce60048036038101906102c99190614602565b610eb4565b005b6102d8610ec8565b6040516102e59190615358565b60405180910390f35b61030860048036038101906103039190614222565b610f7a565b604051610315919061539d565b60405180910390f35b61033860048036038101906103339190614307565b610fc3565b005b610354600480360381019061034f919061459d565b611130565b60405161036393929190614ffb565b60405180910390f35b61037f6103776111c7565b8484846111cf565b505050565b61038c613e9d565b610394613ef6565b600061039f84611650565b90506000806103c18360000160189054906101000a900463ffffffff1661166b565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff168152602001831515815250945061046d866116aa565b9350505050915091565b60006104816111c7565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461058057600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661057f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610576906152f8565b60405180910390fd5b5b61059361058b6111c7565b8585856111cf565b5050505050565b60006105a46117a9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106175773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610650565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064f57600080fd5b5b6000600560000160009054906101000a900463ffffffff1663ffffffff161415610753576040518060800160405280600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff16815250600560008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b50505050505050565b60006107666111c7565b90506107738183856117d2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8230856040518463ffffffff1660e01b81526004016107d093929190614f9b565b602060405180830381600087803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082291906144eb565b50505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d7906150f8565b60405180910390fd5b600083838101906108f1919061459d565b90506108fe8686836117d2565b600191505095945050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061095a828261185d565b5050565b60006109686111c7565b905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051610a5b9190615062565b60405180910390a3505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef906150f8565b60405180910390fd5b6000808484810190610b0a919061424b565b91509150610b198287836117d2565b600192505050949350505050565b6060610b31613f57565b8383905067ffffffffffffffff81118015610b4b57600080fd5b50604051908082528060200260200182016040528015610b8557816020015b610b72613e9d565b815260200190600190039081610b6a5790505b50915060005b84849050811015610c9d576000610bb3868684818110610ba757fe5b90506020020135611650565b9050600080610bd58360000160189054906101000a900463ffffffff1661166b565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff168152602001831515815250868581518110610c8257fe5b60200260200101819052505050508080600101915050610b8b565b5060056040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090509250929050565b6000610d5782611650565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290615298565b60405180910390fd5b60008160000160149054906101000a900463ffffffff1663ffffffff1614610e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3f906150b8565b60405180910390fd5b428160000160146101000a81548163ffffffff021916908363ffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff167fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f60405160405180910390a3505050565b610ec18585858585611958565b5050505050565b610ed0613f57565b60056040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000805b838390508110156110d8576000610fef858584818110610fe357fe5b90506020020135611650565b905061100e8160000160149054906101000a900463ffffffff16611b80565b156110ca578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109c90615298565b60405180910390fd5b6110c58585848181106110b457fe5b905060200201358783600080611bc5565b830192505b508080600101915050610fc7565b50600081600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050611129858261185d565b5050505050565b60008060006001600085815260200190815260200160002060000160149054906101000a900463ffffffff1691506001600085815260200190815260200160002060000160189054906101000a900463ffffffff1690506001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692509193909250565b600033905090565b60006111da84611650565b905060008160000160149054906101000a900463ffffffff1663ffffffff1614611239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123090615118565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290615298565b60405180910390fd5b60006112d685611ca9565b905060006112e382611cfb565b90506000806113218560000160189054906101000a900463ffffffff1686600001601c9054906101000a900463ffffffff1663ffffffff1685611d3d565b915091508663ffffffff168163ffffffff161015611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b906150d8565b60405180910390fd5b600060026107088161138257fe5b04428161138b57fe5b0490506000600460008b8152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1690508863ffffffff16810190508863ffffffff168167ffffffffffffffff16101561142c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142390615278565b60405180910390fd5b80600460008c8152602001908152602001600020600084815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600042905060008a850390506114908682611dac565b8960000160186101000a81548163ffffffff021916908363ffffffff1602179055508189600001601c6101000a81548163ffffffff021916908363ffffffff16021790555060008a8d6040516020016114ea929190614f6f565b6040516020818303038152906040528051906020012060001c905060405180606001604052808f73ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1681526020018d63ffffffff168152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff1602179055509050508c8e73ffffffffffffffffffffffffffffffffffffffff167fd7da2af85ac97f64039a5304a609fe0eb346f04985c4fd55e0d9b10b8b886ee7838f86604051611638939291906153b8565b60405180910390a35050505050505050505050505050565b60008060008381526020019081526020016000209050919050565b600080638000000063ffffffff166380000000841663ffffffff16149150638000000063ffffffff168363ffffffff16816116a257fe5b069050915091565b6116b2613ef6565b60006116bd83611ca9565b90506116c881611dca565b611707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fe90615158565b60405180910390fd5b60008061171383611df0565b915091506040518061010001604052808360000b81526020018260000b815260200161173e85611e30565b61ffff16815260200161175085611cfb565b61ffff16815260200161176285611f0d565b61ffff16815260200161177485611f35565b61ffff16815260200161178685611f5d565b61ffff16815260200161179885611f85565b61ffff168152509350505050919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6117de8160001b611fad565b60006117e982611ca9565b9050670de0b6b3a76400006117fd82611e30565b61ffff16028314611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183a90615318565b60405180910390fd5b61184e848383612046565b6118578261243e565b50505050565b61186882600061285e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016118c3929190614fd2565b602060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191591906144eb565b611954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194b90615178565b60405180910390fd5b5050565b611960613f97565b600160008781526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600080611a338389898989896128f4565b91509150611a3f613fda565b611a4887611650565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050611b3f84600001518a83600001518a611b39898e888f8c612a1b565b87612a93565b6000600160008b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050565b6000808263ffffffff16118015611bbe57507f00000000000000000000000000000000000000000000000000000000000000008263ffffffff160142115b9050919050565b600080611bd187611ca9565b90506000611bde82611e30565b905060008660000160146101000a81548163ffffffff021916908363ffffffff160217905550848660000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504286600001601c6101000a81548163ffffffff021916908363ffffffff160217905550838660000160186101000a81548163ffffffff021916908363ffffffff160217905550670de0b6b3a76400008161ffff16029250505095945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001611cde929190614f6f565b604051602081830303815290604052805190602001209050919050565b6000611d36600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee060001b84612b219092919063ffffffff16565b9050919050565b600080611d498561166b565b80925081935050508115611da457600084420390506000610e108561ffff16830281611d7157fe5b048363ffffffff16019050638000000063ffffffff168110611d9e57600163800000000363ffffffff1690505b80925050505b935093915050565b60008183611dbb576000611dc1565b63800000005b01905092915050565b60006001611de56034601085612b7a9092919063ffffffff16565b60ff16149050919050565b600080611e0a6000600385612b7a9092919063ffffffff16565b6001039150611e266002600385612b7a9092919063ffffffff16565b6001039050915091565b600080611e47600c84612b9b90919063ffffffff16565b90506000611e8160047c010001000200020003000300040004000500050006000600070007000860001b86612b219092919063ffffffff16565b90506000818360ff1601905060048161ffff161015611ea35760009050611ec1565b60138161ffff161115611eb957600f9050611ec0565b6004810390505b5b7e0400050005000a000a000f000f00140014001e001e0028002800500050006460001b6001600283020161ffff1660208110611ef957fe5b1a60f81b60f81c60ff169350505050919050565b6000610190611f26601484612b9b90919063ffffffff16565b60ff1602610fa0019050919050565b6000610190611f4e601c84612b9b90919063ffffffff16565b60ff1602610fa0019050919050565b600061014d611f76602484612b9b90919063ffffffff16565b60ff160261138d019050919050565b6000610bb8611f9e602c84612b9b90919063ffffffff16565b60ff1602613a98019050919050565b61204381604051602401808281526020019150506040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c47565b50565b600061205183611650565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082600001601c9054906101000a900463ffffffff16905060008360000160189054906101000a900463ffffffff16905060008460000160149054906101000a900463ffffffff1690506000806120e3848663ffffffff166120de8b611cfb565b611d3d565b9150915060008060008763ffffffff16141561210d576121028a611f85565b61ffff1690506121ef565b60008563ffffffff161461216c5761212485611b80565b612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215a906151f8565b60405180910390fd5b600191506121ee565b83156121ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a490615198565b60405180910390fd5b8b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146121e8578290506121ed565b600090505b5b5b8115612234577f0000000000000000000000000000000000000000000000000000000000000000925061222f8b898b8f61222a600189611dac565b612c70565b6123e1565b8b8960000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008163ffffffff161461236a5760006122cd7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff166127106122c48f611f35565b61ffff16612cd4565b5090507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16111561233f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612336906151b8565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000003935050612390565b7f0000000000000000000000000000000000000000000000000000000000000000830192505b61239b600184611dac565b8960000160186101000a81548163ffffffff021916908363ffffffff1602179055504289600001601c6101000a81548163ffffffff021916908363ffffffff1602179055505b8a8c73ffffffffffffffffffffffffffffffffffffffff167f2a71ecd53ebaf1eabe3c13c9f5d7e094b90eb780d3f6f658a4feb23db632a96c85604051612428919061545e565b60405180910390a3505050505050505050505050565b612446613f57565b60056040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905060006fffffffffffffffffffffffffffffffff8316600f0b90506000608084901c600f0b90506000808312156125c457836000015163ffffffff1683600003131561256d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256490615258565b60405180910390fd5b60068360000301925063ffffffff83131561258a5763ffffffff92505b8263ffffffff16846000015163ffffffff1610156125bf5782846000019063ffffffff16908163ffffffff1681525050600190505b612661565b836020015163ffffffff16831315612611576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612608906151d8565b60405180910390fd5b60068301925063ffffffff83131561262b5763ffffffff92505b8263ffffffff16846020015163ffffffff1610156126605782846020019063ffffffff16908163ffffffff1681525050600190505b5b600082121561271157836040015163ffffffff168260000313156126ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b190615098565b60405180910390fd5b60068260000301915063ffffffff8213156126d75763ffffffff91505b8163ffffffff16846040015163ffffffff16101561270c5781846040019063ffffffff16908163ffffffff1681525050600190505b6127ae565b836060015163ffffffff1682131561275e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275590615338565b60405180910390fd5b60068201915063ffffffff8213156127785763ffffffff91505b8163ffffffff16846060015163ffffffff1610156127ad5781846060019063ffffffff16908163ffffffff1681525050600190505b5b80156128575783600560008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b5050505050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b019826040516128e8919061539d565b60405180910390a25050565b60008086838660405160200161290b929190614f6f565b6040516020818303038152906040528051906020012087604051602001612933929190614f6f565b6040516020818303038152906040528051906020012060001c1461298c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298390615218565b60405180910390fd5b8760400151915060008263ffffffff16116129dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d390615138565b60405180910390fd5b6129eb82878a60200151612d91565b9150818860400151039050612a01848787612eca565b612a1084878a60200151612fc1565b965096945050505050565b612a2361402a565b856000015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff161415612a7657612a6f86600001518585856130be565b9050612a8a565b612a878660000151868686866131cd565b90505b95945050505050565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16867f7997eb1d618b1121acb21162e437706631dea1be00abe485637cf356eb5a90fa86866020015187604001518789600001518a606001518b60800151604051612b1197969594939291906153ef565b60405180910390a4505050505050565b600080612b2e8585612b9b565b9050826001600283020160ff1660208110612b4557fe5b1a60f81b60f81c60ff16610100846002840260ff1660208110612b6457fe5b1a60f81b60f81c60ff1602019150509392505050565b60008160ff168360ff1685901c60001c81612b9157fe5b0690509392505050565b600080612baa84846040612b7a565b9050600060028260ff1681612bbb57fe5b049050600060028360ff1681612bcd57fe5b06905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60001b8360ff1660208110612c0457fe5b1a60f81b60f81c905060008260ff161415612c2c5760048160ff16901c945050505050612c41565b60108160ff1681612c3957fe5b069450505050505b92915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000612c7f8686868686611bc5565b9050612ccc8582600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540161285e565b505050505050565b60008060008487029050600084870290506000826305f5e100890281612cf657fe5b0490506305f5e10088028382021015612d125780806001019150505b6000826305f5e1008b0281612d2357fe5b0490506305f5e1008a028382021015612d3f5780806001019150505b6000612d4b83836132a0565b9050612d666305f5e10085830281612d5f57fe5b048c6132a0565b9650612d816305f5e10086830281612d7a57fe5b048b6132a0565b9550505050505094509492505050565b600080600261070881612da057fe5b048363ffffffff1681612daf57fe5b049050600060046000868152602001908152602001600020600083815260200190815260200160002060000160089054906101000a900467ffffffffffffffff1690508563ffffffff168167ffffffffffffffff161015612e63578086039550600060046000878152602001908152602001600020600084815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550612ebe565b600095508563ffffffff16810360046000878152602001908152602001600020600084815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b85925050509392505050565b600080612ede612ed985611ca9565b611df0565b91509150600080612ef6612ef186611ca9565b611df0565b91509150600060028460000b600460808a901c02018360000b600460808a901c020103600f0b0a60028660000b60046fffffffffffffffffffffffffffffffff8b1602018560000b60046fffffffffffffffffffffffffffffffff8b16020103600f0b0a01600f0b9050806002890a11158015612f7857506002600189010a81105b612fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fae906152d8565b60405180910390fd5b5050505050505050565b6000612fd4612fcf84611ca9565b611f5d565b61ffff166127107f00000000000000000000000000000000000000000000000000000000000000000285028161300657fe5b048263ffffffff1601905080421015613054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304b906152b8565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000810142106130b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130af90615238565b60405180910390fd5b50505050565b6130c661402a565b6130d38460200151611b80565b15613101576130fa83856000015160008087815260200190815260200160002088866132ba565b90506131c5565b600061310c84611ca9565b9050600061311982611cfb565b90506000806131378860400151896060015163ffffffff1685611d3d565b91509150600086820163ffffffff169050638000000063ffffffff16811061316a57600163800000000363ffffffff1690505b6131748382611dac565b6000808a815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555080866080019063ffffffff16908163ffffffff168152505050505050505b949350505050565b6131d561402a565b6000846060015163ffffffff16141561320a5760006131f384611ca9565b905061320287878684876132f0565b915050613297565b6132178460200151611b80565b156132455761323e83856000015160008087815260200190815260200160002089866132ba565b9050613297565b600061325084611ca9565b9050600061326561326088611ca9565b611f0d565b9050600061327283611f35565b9050600061327f84611cfb565b90506132908a84848b8b868c6134a9565b9450505050505b95945050505050565b6000818311156132b057816132b2565b825b905092915050565b6132c261402a565b6132cf8686868686612c70565b81816080019063ffffffff16908163ffffffff168152505095945050505050565b6132f861402a565b600061330b61330687611ca9565b611f0d565b9050600061331885611f35565b9050600061332586611f85565b90506000806133488763ffffffff168461ffff168761ffff168761ffff16612cd4565b9150915081866020019063ffffffff16908163ffffffff16815250508261ffff168163ffffffff1614801561338857508163ffffffff168763ffffffff16115b1561349b57818703866080019063ffffffff16908163ffffffff16815250506133b660008760800151611dac565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508a6000808b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080866040019063ffffffff16908163ffffffff168152505060018660600190151590811515815250505b505050505095945050505050565b6134b161402a565b6134b9614073565b6134c4868686613623565b90506000816040015163ffffffff161415613606578860008087815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600087815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff160217905550613570816000015184611dac565b60008087815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555042600080878152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550600182606001901515908115158152505082826080019063ffffffff16908163ffffffff168152505050613618565b613614818a87868c8c613735565b9150505b979650505050505050565b61362b614073565b6000806136478660400151876060015163ffffffff1686611d3d565b91509150600080600080600061365d868b613d4b565b945094509450945094508688600001901515908115158152505085886020019063ffffffff16908163ffffffff168152505084886040019063ffffffff16908163ffffffff168152505083886060019067ffffffffffffffff16908167ffffffffffffffff168152505082886080019067ffffffffffffffff16908167ffffffffffffffff1681525050818860a0019067ffffffffffffffff16908167ffffffffffffffff1681525050808860c0019067ffffffffffffffff16908167ffffffffffffffff1681525050505050505050509392505050565b61373d61402a565b6000806137648663ffffffff168a6040015163ffffffff168761ffff168761ffff16612cd4565b9150915081836020019063ffffffff16908163ffffffff168152505080836040019063ffffffff16908163ffffffff1681525050886020015163ffffffff16836040015163ffffffff161115613b335788602001518103836000019063ffffffff16908163ffffffff16815250508860200151836040019063ffffffff16908163ffffffff1681525050826000015163ffffffff16896060015167ffffffffffffffff161061387257826000015163ffffffff16896060018181510391509067ffffffffffffffff16908167ffffffffffffffff1681525050826000015163ffffffff16896080018181510191509067ffffffffffffffff16908167ffffffffffffffff1681525050613990565b8860600151896080018181510191509067ffffffffffffffff16908167ffffffffffffffff168152505060008960600151846000015163ffffffff160390508067ffffffffffffffff168a60a0015167ffffffffffffffff161061392157808a60a0018181510391509067ffffffffffffffff16908167ffffffffffffffff1681525050808a60c0018181510191509067ffffffffffffffff16908167ffffffffffffffff168152505061396d565b8960a001518a60c0018181510191509067ffffffffffffffff16908167ffffffffffffffff168152505060008a60a0019067ffffffffffffffff16908167ffffffffffffffff16815250505b60008a6060019067ffffffffffffffff16908167ffffffffffffffff1681525050505b886060015160046000898152602001908152602001600020600060016002610708816139b857fe5b0442816139c157fe5b0403815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555088608001516004600089815260200190815260200160002060006001600261070881613a2257fe5b044281613a2b57fe5b0403815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508860a00151600460008981526020019081526020016000206000600261070881613a8a57fe5b044281613a9357fe5b04815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508860c00151600460008981526020019081526020016000206000600261070881613af157fe5b044281613afa57fe5b04815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b886020015163ffffffff16836040015163ffffffff161415613c8157818603836080019063ffffffff16908163ffffffff168152505060018360600190151590811515815250508760008089815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600089815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff160217905550613c1589600001518460800151611dac565b60008089815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555042600080898152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550613d3f565b8563ffffffff16836020015163ffffffff161415613d355780896020015103836080019063ffffffff16908163ffffffff1681525050613cc989600001518460800151611dac565b60008089815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555042600080898152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550613d3e565b6000613d3d57fe5b5b5b50509695505050505050565b60008060008060008694506000600261070881613d6457fe5b044281613d6d57fe5b04905060046000888152602001908152602001600020600060018303815260200190815260200160002060000160009054906101000a900467ffffffffffffffff16945060046000888152602001908152602001600020600060018303815260200190815260200160002060000160009054906101000a900467ffffffffffffffff16935060046000888152602001908152602001600020600082815260200190815260200160002060000160009054906101000a900467ffffffffffffffff16925060046000888152602001908152602001600020600082815260200190815260200160002060000160089054906101000a900467ffffffffffffffff169150613e908663ffffffff168487010167ffffffffffffffff1663ffffffff6132a0565b9550509295509295909350565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000151581525090565b6040518061010001604052806000800b81526020016000800b8152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060a00160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600015158152602001600063ffffffff1681525090565b6040518060e00160405280600015158152602001600063ffffffff168152602001600063ffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6000813590506140f581615578565b92915050565b60008135905061410a8161558f565b92915050565b60008083601f84011261412257600080fd5b8235905067ffffffffffffffff81111561413b57600080fd5b60208301915083602082028301111561415357600080fd5b9250929050565b600081359050614169816155a6565b92915050565b60008151905061417e816155a6565b92915050565b600081359050614193816155bd565b92915050565b60008083601f8401126141ab57600080fd5b8235905067ffffffffffffffff8111156141c457600080fd5b6020830191508360018202830111156141dc57600080fd5b9250929050565b6000813590506141f2816155d4565b92915050565b600081359050614207816155eb565b92915050565b60008135905061421c81615602565b92915050565b60006020828403121561423457600080fd5b6000614242848285016140e6565b91505092915050565b6000806040838503121561425e57600080fd5b600061426c858286016140fb565b925050602061427d858286016141f8565b9150509250929050565b60008060008060006080868803121561429f57600080fd5b60006142ad888289016140e6565b95505060206142be888289016140e6565b94505060406142cf888289016141f8565b935050606086013567ffffffffffffffff8111156142ec57600080fd5b6142f888828901614199565b92509250509295509295909350565b60008060006040848603121561431c57600080fd5b600061432a868287016140e6565b935050602084013567ffffffffffffffff81111561434757600080fd5b61435386828701614110565b92509250509250925092565b6000806040838503121561437257600080fd5b6000614380858286016140e6565b92505060206143918582860161415a565b9150509250929050565b600080604083850312156143ae57600080fd5b60006143bc858286016140e6565b92505060206143cd858286016141f8565b9150509250929050565b600080600080606085870312156143ed57600080fd5b60006143fb878288016140e6565b945050602061440c878288016141f8565b935050604085013567ffffffffffffffff81111561442957600080fd5b61443587828801614199565b925092505092959194509250565b6000806000806080858703121561445957600080fd5b6000614467878288016140e6565b9450506020614478878288016141f8565b93505060406144898782880161420d565b925050606061449a87828801614184565b91505092959194509250565b600080602083850312156144b957600080fd5b600083013567ffffffffffffffff8111156144d357600080fd5b6144df85828601614110565b92509250509250929050565b6000602082840312156144fd57600080fd5b600061450b8482850161416f565b91505092915050565b60008060008060008060c0878903121561452d57600080fd5b600061453b89828a016141e3565b965050602061454c89828a01614184565b955050604061455d89828a0161420d565b945050606061456e89828a0161420d565b935050608061457f89828a0161420d565b92505060a061459089828a0161420d565b9150509295509295509295565b6000602082840312156145af57600080fd5b60006145bd848285016141f8565b91505092915050565b600080604083850312156145d957600080fd5b60006145e7858286016141f8565b92505060206145f8858286016141f8565b9150509250929050565b600080600080600060a0868803121561461a57600080fd5b6000614628888289016141f8565b9550506020614639888289016141f8565b945050604061464a888289016141f8565b935050606061465b888289016141f8565b925050608061466c88828901614184565b9150509295509295909350565b60008060006060848603121561468e57600080fd5b600061469c868287016141f8565b93505060206146ad8682870161420d565b92505060406146be86828701614184565b9150509250925092565b60006146d48383614daa565b60a08301905092915050565b6146e9816154c3565b82525050565b6146f8816154c3565b82525050565b600061470982615489565b61471381856154a1565b935061471e83615479565b8060005b8381101561474f57815161473688826146c8565b975061474183615494565b925050600181019050614722565b5085935050505092915050565b614765816154e7565b82525050565b614774816154e7565b82525050565b614783816154f3565b82525050565b61479a614795826154f3565b615564565b82525050565b6147a98161550f565b82525050565b60006147bc6016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006000830152602082019050919050565b60006147fc600f836154b2565b91507f45584954494e475f414c524541445900000000000000000000000000000000006000830152602082019050919050565b600061483c6015836154b2565b91507f535041434553484950535f4e4f545f454e4f55474800000000000000000000006000830152602082019050919050565b600061487c600d836154b2565b91507f494e56414c49445f4552433230000000000000000000000000000000000000006000830152602082019050919050565b60006148bc600b836154b2565b91507f504c414e45545f455849540000000000000000000000000000000000000000006000830152602082019050919050565b60006148fc6012836154b2565b91507f464c4545545f444f5f4e4f545f455849535400000000000000000000000000006000830152602082019050919050565b600061493c601a836154b2565b91507f6e6f20706c616e657420696e2074686973206c6f636174696f6e0000000000006000830152602082019050919050565b600061497c600f836154b2565b91507f4641494c45445f5452414e5346455200000000000000000000000000000000006000830152602082019050919050565b60006149bc600c836154b2565b91507f5354494c4c5f41435449564500000000000000000000000000000000000000006000830152602082019050919050565b60006149fc600f836154b2565b91507f4641494c45445f434150545552454400000000000000000000000000000000006000830152602082019050919050565b6000614a3c6016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006000830152602082019050919050565b6000614a7c600d836154b2565b91507f5354494c4c5f45584954494e47000000000000000000000000000000000000006000830152602082019050919050565b6000614abc601d836154b2565b91507f494e56414c49445f464c4545545f444154415f4f525f534543524554270000006000830152602082019050919050565b6000614afc602b836154b2565b91507f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60008301527f737420696e2073706163650000000000000000000000000000000000000000006020830152604082019050919050565b6000614b626016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006000830152602082019050919050565b6000614ba26008836154b2565b91507f4f564552464c4f570000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614be26009836154b2565b91507f4e4f545f4f574e455200000000000000000000000000000000000000000000006000830152602082019050919050565b6000614c226009836154b2565b91507f746f6f206561726c7900000000000000000000000000000000000000000000006000830152602082019050919050565b6000614c62600e836154b2565b91507f77726f6e672064697374616e63650000000000000000000000000000000000006000830152602082019050919050565b6000614ca2600e836154b2565b91507f4e4f545f415554484f52495a45440000000000000000000000000000000000006000830152602082019050919050565b6000614ce2600e836154b2565b91507f494e56414c49445f414d4f554e540000000000000000000000000000000000006000830152602082019050919050565b6000614d226016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006000830152602082019050919050565b608082016000820151614d6b6000850182614f51565b506020820151614d7e6020850182614f51565b506040820151614d916040850182614f51565b506060820151614da46060850182614f51565b50505050565b60a082016000820151614dc060008501826146e0565b506020820151614dd36020850182614f51565b506040820151614de66040850182614f51565b506060820151614df96060850182614f51565b506080820151614e0c608085018261475c565b50505050565b60a082016000820151614e2860008501826146e0565b506020820151614e3b6020850182614f51565b506040820151614e4e6040850182614f51565b506060820151614e616060850182614f51565b506080820151614e74608085018261475c565b50505050565b61010082016000820151614e9160008501826147a0565b506020820151614ea460208501826147a0565b506040820151614eb76040850182614f1c565b506060820151614eca6060850182614f1c565b506080820151614edd6080850182614f1c565b5060a0820151614ef060a0850182614f1c565b5060c0820151614f0360c0850182614f1c565b5060e0820151614f1660e0850182614f1c565b50505050565b614f258161551c565b82525050565b614f348161554a565b82525050565b614f4b614f468261554a565b61556e565b82525050565b614f5a81615554565b82525050565b614f6981615554565b82525050565b6000614f7b8285614789565b602082019150614f8b8284614f3a565b6020820191508190509392505050565b6000606082019050614fb060008301866146ef565b614fbd60208301856146ef565b614fca6040830184614f2b565b949350505050565b6000604082019050614fe760008301856146ef565b614ff46020830184614f2b565b9392505050565b600060608201905061501060008301866146ef565b61501d6020830185614f60565b61502a6040830184614f60565b949350505050565b600060a082019050818103600083015261504c81856146fe565b905061505b6020830184614d55565b9392505050565b6000602082019050615077600083018461476b565b92915050565b6000602082019050615092600083018461477a565b92915050565b600060208201905081810360008301526150b1816147af565b9050919050565b600060208201905081810360008301526150d1816147ef565b9050919050565b600060208201905081810360008301526150f18161482f565b9050919050565b600060208201905081810360008301526151118161486f565b9050919050565b60006020820190508181036000830152615131816148af565b9050919050565b60006020820190508181036000830152615151816148ef565b9050919050565b600060208201905081810360008301526151718161492f565b9050919050565b600060208201905081810360008301526151918161496f565b9050919050565b600060208201905081810360008301526151b1816149af565b9050919050565b600060208201905081810360008301526151d1816149ef565b9050919050565b600060208201905081810360008301526151f181614a2f565b9050919050565b6000602082019050818103600083015261521181614a6f565b9050919050565b6000602082019050818103600083015261523181614aaf565b9050919050565b6000602082019050818103600083015261525181614aef565b9050919050565b6000602082019050818103600083015261527181614b55565b9050919050565b6000602082019050818103600083015261529181614b95565b9050919050565b600060208201905081810360008301526152b181614bd5565b9050919050565b600060208201905081810360008301526152d181614c15565b9050919050565b600060208201905081810360008301526152f181614c55565b9050919050565b6000602082019050818103600083015261531181614c95565b9050919050565b6000602082019050818103600083015261533181614cd5565b9050919050565b6000602082019050818103600083015261535181614d15565b9050919050565b600060808201905061536d6000830184614d55565b92915050565b60006101a0820190506153896000830185614e12565b61539660a0830184614e7a565b9392505050565b60006020820190506153b26000830184614f2b565b92915050565b60006060820190506153cd6000830186614f2b565b6153da6020830185614f60565b6153e76040830184614f60565b949350505050565b600060e082019050615404600083018a614f2b565b6154116020830189614f60565b61541e6040830188614f60565b61542b6060830187614f60565b6154386080830186614f60565b61544560a083018561476b565b61545260c0830184614f60565b98975050505050505050565b60006020820190506154736000830184614f60565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006154ce8261552a565b9050919050565b60006154e08261552a565b9050919050565b60008115159050919050565b6000819050919050565b6000615508826154c3565b9050919050565b60008160000b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000819050919050565b6000819050919050565b615581816154c3565b811461558c57600080fd5b50565b615598816154d5565b81146155a357600080fd5b50565b6155af816154e7565b81146155ba57600080fd5b50565b6155c6816154f3565b81146155d157600080fd5b50565b6155dd816154fd565b81146155e857600080fd5b50565b6155f48161554a565b81146155ff57600080fd5b50565b61560b81615554565b811461561657600080fd5b5056fea264697066735822122055ef5ff63c635234ba7b7ec68c22bbb6c119ae510eb5f4c53ecea5069f598db064736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a22cb465116100a2578063b92ce46711610071578063b92ce467146102b4578063c5aaa0ae146102d0578063c9560838146102ee578063e2e9b0791461031e578063f9740c751461033a5761010b565b8063a22cb4651461021b578063a4c0ed3614610237578063aba789f514610267578063afc82370146102985761010b565b80637ba423fb116100de5780637ba423fb146101955780637cef64d8146101b15780639b6be065146101cf5780639eca672c146101ff5761010b565b8063112e68511461011057806334efcb8e1461012c57806361f018c01461015d5780636adc09e514610179575b600080fd5b61012a60048036038101906101259190614679565b61036c565b005b6101466004803603810190610141919061459d565b610384565b604051610154929190615373565b60405180910390f35b61017760048036038101906101729190614443565b610477565b005b610193600480360381019061018e9190614514565b61059a565b005b6101af60048036038101906101aa91906145c6565b61075c565b005b6101b9610828565b6040516101c6919061507d565b60405180910390f35b6101e960048036038101906101e49190614287565b610850565b6040516101f69190615062565b60405180910390f35b61021960048036038101906102149190614222565b61090c565b005b6102356004803603810190610230919061435f565b61095e565b005b610251600480360381019061024c91906143d7565b610a68565b60405161025e9190615062565b60405180910390f35b610281600480360381019061027c91906144a6565b610b27565b60405161028f929190615032565b60405180910390f35b6102b260048036038101906102ad919061439b565b610d4c565b005b6102ce60048036038101906102c99190614602565b610eb4565b005b6102d8610ec8565b6040516102e59190615358565b60405180910390f35b61030860048036038101906103039190614222565b610f7a565b604051610315919061539d565b60405180910390f35b61033860048036038101906103339190614307565b610fc3565b005b610354600480360381019061034f919061459d565b611130565b60405161036393929190614ffb565b60405180910390f35b61037f6103776111c7565b8484846111cf565b505050565b61038c613e9d565b610394613ef6565b600061039f84611650565b90506000806103c18360000160189054906101000a900463ffffffff1661166b565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff168152602001831515815250945061046d866116aa565b9350505050915091565b60006104816111c7565b90508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461058057600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661057f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610576906152f8565b60405180910390fd5b5b61059361058b6111c7565b8585856111cf565b5050505050565b60006105a46117a9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106175773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610650565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064f57600080fd5b5b6000600560000160009054906101000a900463ffffffff1663ffffffff161415610753576040518060800160405280600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff168152602001600c63ffffffff16815250600560008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b50505050505050565b60006107666111c7565b90506107738183856117d2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8230856040518463ffffffff1660e01b81526004016107d093929190614f9b565b602060405180830381600087803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082291906144eb565b50505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d7906150f8565b60405180910390fd5b600083838101906108f1919061459d565b90506108fe8686836117d2565b600191505095945050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061095a828261185d565b5050565b60006109686111c7565b905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3184604051610a5b9190615062565b60405180910390a3505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef906150f8565b60405180910390fd5b6000808484810190610b0a919061424b565b91509150610b198287836117d2565b600192505050949350505050565b6060610b31613f57565b8383905067ffffffffffffffff81118015610b4b57600080fd5b50604051908082528060200260200182016040528015610b8557816020015b610b72613e9d565b815260200190600190039081610b6a5790505b50915060005b84849050811015610c9d576000610bb3868684818110610ba757fe5b90506020020135611650565b9050600080610bd58360000160189054906101000a900463ffffffff1661166b565b915091506040518060a001604052808460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018460000160149054906101000a900463ffffffff1663ffffffff1681526020018263ffffffff16815260200184600001601c9054906101000a900463ffffffff1663ffffffff168152602001831515815250868581518110610c8257fe5b60200260200101819052505050508080600101915050610b8b565b5060056040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152505090509250929050565b6000610d5782611650565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290615298565b60405180910390fd5b60008160000160149054906101000a900463ffffffff1663ffffffff1614610e48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3f906150b8565b60405180910390fd5b428160000160146101000a81548163ffffffff021916908363ffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff167fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f60405160405180910390a3505050565b610ec18585858585611958565b5050505050565b610ed0613f57565b60056040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905090565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000805b838390508110156110d8576000610fef858584818110610fe357fe5b90506020020135611650565b905061100e8160000160149054906101000a900463ffffffff16611b80565b156110ca578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109c90615298565b60405180910390fd5b6110c58585848181106110b457fe5b905060200201358783600080611bc5565b830192505b508080600101915050610fc7565b50600081600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054019050611129858261185d565b5050505050565b60008060006001600085815260200190815260200160002060000160149054906101000a900463ffffffff1691506001600085815260200190815260200160002060000160189054906101000a900463ffffffff1690506001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692509193909250565b600033905090565b60006111da84611650565b905060008160000160149054906101000a900463ffffffff1663ffffffff1614611239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123090615118565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c290615298565b60405180910390fd5b60006112d685611ca9565b905060006112e382611cfb565b90506000806113218560000160189054906101000a900463ffffffff1686600001601c9054906101000a900463ffffffff1663ffffffff1685611d3d565b915091508663ffffffff168163ffffffff161015611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b906150d8565b60405180910390fd5b600060026107088161138257fe5b04428161138b57fe5b0490506000600460008b8152602001908152602001600020600083815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1690508863ffffffff16810190508863ffffffff168167ffffffffffffffff16101561142c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142390615278565b60405180910390fd5b80600460008c8152602001908152602001600020600084815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600042905060008a850390506114908682611dac565b8960000160186101000a81548163ffffffff021916908363ffffffff1602179055508189600001601c6101000a81548163ffffffff021916908363ffffffff16021790555060008a8d6040516020016114ea929190614f6f565b6040516020818303038152906040528051906020012060001c905060405180606001604052808f73ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1681526020018d63ffffffff168152506001600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff1602179055509050508c8e73ffffffffffffffffffffffffffffffffffffffff167fd7da2af85ac97f64039a5304a609fe0eb346f04985c4fd55e0d9b10b8b886ee7838f86604051611638939291906153b8565b60405180910390a35050505050505050505050505050565b60008060008381526020019081526020016000209050919050565b600080638000000063ffffffff166380000000841663ffffffff16149150638000000063ffffffff168363ffffffff16816116a257fe5b069050915091565b6116b2613ef6565b60006116bd83611ca9565b90506116c881611dca565b611707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fe90615158565b60405180910390fd5b60008061171383611df0565b915091506040518061010001604052808360000b81526020018260000b815260200161173e85611e30565b61ffff16815260200161175085611cfb565b61ffff16815260200161176285611f0d565b61ffff16815260200161177485611f35565b61ffff16815260200161178685611f5d565b61ffff16815260200161179885611f85565b61ffff168152509350505050919050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610354905090565b6117de8160001b611fad565b60006117e982611ca9565b9050670de0b6b3a76400006117fd82611e30565b61ffff16028314611843576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183a90615318565b60405180910390fd5b61184e848383612046565b6118578261243e565b50505050565b61186882600061285e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016118c3929190614fd2565b602060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191591906144eb565b611954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194b90615178565b60405180910390fd5b5050565b611960613f97565b600160008781526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600080611a338389898989896128f4565b91509150611a3f613fda565b611a4887611650565b6040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050611b3f84600001518a83600001518a611b39898e888f8c612a1b565b87612a93565b6000600160008b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550505050505050505050565b6000808263ffffffff16118015611bbe57507f00000000000000000000000000000000000000000000000000000000000000008263ffffffff160142115b9050919050565b600080611bd187611ca9565b90506000611bde82611e30565b905060008660000160146101000a81548163ffffffff021916908363ffffffff160217905550848660000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504286600001601c6101000a81548163ffffffff021916908363ffffffff160217905550838660000160186101000a81548163ffffffff021916908363ffffffff160217905550670de0b6b3a76400008161ffff16029250505095945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001611cde929190614f6f565b604051602081830303815290604052805190602001209050919050565b6000611d36600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee060001b84612b219092919063ffffffff16565b9050919050565b600080611d498561166b565b80925081935050508115611da457600084420390506000610e108561ffff16830281611d7157fe5b048363ffffffff16019050638000000063ffffffff168110611d9e57600163800000000363ffffffff1690505b80925050505b935093915050565b60008183611dbb576000611dc1565b63800000005b01905092915050565b60006001611de56034601085612b7a9092919063ffffffff16565b60ff16149050919050565b600080611e0a6000600385612b7a9092919063ffffffff16565b6001039150611e266002600385612b7a9092919063ffffffff16565b6001039050915091565b600080611e47600c84612b9b90919063ffffffff16565b90506000611e8160047c010001000200020003000300040004000500050006000600070007000860001b86612b219092919063ffffffff16565b90506000818360ff1601905060048161ffff161015611ea35760009050611ec1565b60138161ffff161115611eb957600f9050611ec0565b6004810390505b5b7e0400050005000a000a000f000f00140014001e001e0028002800500050006460001b6001600283020161ffff1660208110611ef957fe5b1a60f81b60f81c60ff169350505050919050565b6000610190611f26601484612b9b90919063ffffffff16565b60ff1602610fa0019050919050565b6000610190611f4e601c84612b9b90919063ffffffff16565b60ff1602610fa0019050919050565b600061014d611f76602484612b9b90919063ffffffff16565b60ff160261138d019050919050565b6000610bb8611f9e602c84612b9b90919063ffffffff16565b60ff1602613a98019050919050565b61204381604051602401808281526020019150506040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c47565b50565b600061205183611650565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082600001601c9054906101000a900463ffffffff16905060008360000160189054906101000a900463ffffffff16905060008460000160149054906101000a900463ffffffff1690506000806120e3848663ffffffff166120de8b611cfb565b611d3d565b9150915060008060008763ffffffff16141561210d576121028a611f85565b61ffff1690506121ef565b60008563ffffffff161461216c5761212485611b80565b612163576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215a906151f8565b60405180910390fd5b600191506121ee565b83156121ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a490615198565b60405180910390fd5b8b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146121e8578290506121ed565b600090505b5b5b8115612234577f0000000000000000000000000000000000000000000000000000000000000000925061222f8b898b8f61222a600189611dac565b612c70565b6123e1565b8b8960000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008163ffffffff161461236a5760006122cd7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff166127106122c48f611f35565b61ffff16612cd4565b5090507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16111561233f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612336906151b8565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000003935050612390565b7f0000000000000000000000000000000000000000000000000000000000000000830192505b61239b600184611dac565b8960000160186101000a81548163ffffffff021916908363ffffffff1602179055504289600001601c6101000a81548163ffffffff021916908363ffffffff1602179055505b8a8c73ffffffffffffffffffffffffffffffffffffffff167f2a71ecd53ebaf1eabe3c13c9f5d7e094b90eb780d3f6f658a4feb23db632a96c85604051612428919061545e565b60405180910390a3505050505050505050505050565b612446613f57565b60056040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905060006fffffffffffffffffffffffffffffffff8316600f0b90506000608084901c600f0b90506000808312156125c457836000015163ffffffff1683600003131561256d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256490615258565b60405180910390fd5b60068360000301925063ffffffff83131561258a5763ffffffff92505b8263ffffffff16846000015163ffffffff1610156125bf5782846000019063ffffffff16908163ffffffff1681525050600190505b612661565b836020015163ffffffff16831315612611576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612608906151d8565b60405180910390fd5b60068301925063ffffffff83131561262b5763ffffffff92505b8263ffffffff16846020015163ffffffff1610156126605782846020019063ffffffff16908163ffffffff1681525050600190505b5b600082121561271157836040015163ffffffff168260000313156126ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b190615098565b60405180910390fd5b60068260000301915063ffffffff8213156126d75763ffffffff91505b8163ffffffff16846040015163ffffffff16101561270c5781846040019063ffffffff16908163ffffffff1681525050600190505b6127ae565b836060015163ffffffff1682131561275e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275590615338565b60405180910390fd5b60068201915063ffffffff8213156127785763ffffffff91505b8163ffffffff16846060015163ffffffff1610156127ad5781846060019063ffffffff16908163ffffffff1681525050600190505b5b80156128575783600560008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050505b5050505050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b019826040516128e8919061539d565b60405180910390a25050565b60008086838660405160200161290b929190614f6f565b6040516020818303038152906040528051906020012087604051602001612933929190614f6f565b6040516020818303038152906040528051906020012060001c1461298c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161298390615218565b60405180910390fd5b8760400151915060008263ffffffff16116129dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d390615138565b60405180910390fd5b6129eb82878a60200151612d91565b9150818860400151039050612a01848787612eca565b612a1084878a60200151612fc1565b965096945050505050565b612a2361402a565b856000015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff161415612a7657612a6f86600001518585856130be565b9050612a8a565b612a878660000151868686866131cd565b90505b95945050505050565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16867f7997eb1d618b1121acb21162e437706631dea1be00abe485637cf356eb5a90fa86866020015187604001518789600001518a606001518b60800151604051612b1197969594939291906153ef565b60405180910390a4505050505050565b600080612b2e8585612b9b565b9050826001600283020160ff1660208110612b4557fe5b1a60f81b60f81c60ff16610100846002840260ff1660208110612b6457fe5b1a60f81b60f81c60ff1602019150509392505050565b60008160ff168360ff1685901c60001c81612b9157fe5b0690509392505050565b600080612baa84846040612b7a565b9050600060028260ff1681612bbb57fe5b049050600060028360ff1681612bcd57fe5b06905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60001b8360ff1660208110612c0457fe5b1a60f81b60f81c905060008260ff161415612c2c5760048160ff16901c945050505050612c41565b60108160ff1681612c3957fe5b069450505050505b92915050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6000612c7f8686868686611bc5565b9050612ccc8582600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540161285e565b505050505050565b60008060008487029050600084870290506000826305f5e100890281612cf657fe5b0490506305f5e10088028382021015612d125780806001019150505b6000826305f5e1008b0281612d2357fe5b0490506305f5e1008a028382021015612d3f5780806001019150505b6000612d4b83836132a0565b9050612d666305f5e10085830281612d5f57fe5b048c6132a0565b9650612d816305f5e10086830281612d7a57fe5b048b6132a0565b9550505050505094509492505050565b600080600261070881612da057fe5b048363ffffffff1681612daf57fe5b049050600060046000868152602001908152602001600020600083815260200190815260200160002060000160089054906101000a900467ffffffffffffffff1690508563ffffffff168167ffffffffffffffff161015612e63578086039550600060046000878152602001908152602001600020600084815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550612ebe565b600095508563ffffffff16810360046000878152602001908152602001600020600084815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b85925050509392505050565b600080612ede612ed985611ca9565b611df0565b91509150600080612ef6612ef186611ca9565b611df0565b91509150600060028460000b600460808a901c02018360000b600460808a901c020103600f0b0a60028660000b60046fffffffffffffffffffffffffffffffff8b1602018560000b60046fffffffffffffffffffffffffffffffff8b16020103600f0b0a01600f0b9050806002890a11158015612f7857506002600189010a81105b612fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fae906152d8565b60405180910390fd5b5050505050505050565b6000612fd4612fcf84611ca9565b611f5d565b61ffff166127107f00000000000000000000000000000000000000000000000000000000000000000285028161300657fe5b048263ffffffff1601905080421015613054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304b906152b8565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000810142106130b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130af90615238565b60405180910390fd5b50505050565b6130c661402a565b6130d38460200151611b80565b15613101576130fa83856000015160008087815260200190815260200160002088866132ba565b90506131c5565b600061310c84611ca9565b9050600061311982611cfb565b90506000806131378860400151896060015163ffffffff1685611d3d565b91509150600086820163ffffffff169050638000000063ffffffff16811061316a57600163800000000363ffffffff1690505b6131748382611dac565b6000808a815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555080866080019063ffffffff16908163ffffffff168152505050505050505b949350505050565b6131d561402a565b6000846060015163ffffffff16141561320a5760006131f384611ca9565b905061320287878684876132f0565b915050613297565b6132178460200151611b80565b156132455761323e83856000015160008087815260200190815260200160002089866132ba565b9050613297565b600061325084611ca9565b9050600061326561326088611ca9565b611f0d565b9050600061327283611f35565b9050600061327f84611cfb565b90506132908a84848b8b868c6134a9565b9450505050505b95945050505050565b6000818311156132b057816132b2565b825b905092915050565b6132c261402a565b6132cf8686868686612c70565b81816080019063ffffffff16908163ffffffff168152505095945050505050565b6132f861402a565b600061330b61330687611ca9565b611f0d565b9050600061331885611f35565b9050600061332586611f85565b90506000806133488763ffffffff168461ffff168761ffff168761ffff16612cd4565b9150915081866020019063ffffffff16908163ffffffff16815250508261ffff168163ffffffff1614801561338857508163ffffffff168763ffffffff16115b1561349b57818703866080019063ffffffff16908163ffffffff16815250506133b660008760800151611dac565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508a6000808b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080866040019063ffffffff16908163ffffffff168152505060018660600190151590811515815250505b505050505095945050505050565b6134b161402a565b6134b9614073565b6134c4868686613623565b90506000816040015163ffffffff161415613606578860008087815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600087815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff160217905550613570816000015184611dac565b60008087815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555042600080878152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550600182606001901515908115158152505082826080019063ffffffff16908163ffffffff168152505050613618565b613614818a87868c8c613735565b9150505b979650505050505050565b61362b614073565b6000806136478660400151876060015163ffffffff1686611d3d565b91509150600080600080600061365d868b613d4b565b945094509450945094508688600001901515908115158152505085886020019063ffffffff16908163ffffffff168152505084886040019063ffffffff16908163ffffffff168152505083886060019067ffffffffffffffff16908167ffffffffffffffff168152505082886080019067ffffffffffffffff16908167ffffffffffffffff1681525050818860a0019067ffffffffffffffff16908167ffffffffffffffff1681525050808860c0019067ffffffffffffffff16908167ffffffffffffffff1681525050505050505050509392505050565b61373d61402a565b6000806137648663ffffffff168a6040015163ffffffff168761ffff168761ffff16612cd4565b9150915081836020019063ffffffff16908163ffffffff168152505080836040019063ffffffff16908163ffffffff1681525050886020015163ffffffff16836040015163ffffffff161115613b335788602001518103836000019063ffffffff16908163ffffffff16815250508860200151836040019063ffffffff16908163ffffffff1681525050826000015163ffffffff16896060015167ffffffffffffffff161061387257826000015163ffffffff16896060018181510391509067ffffffffffffffff16908167ffffffffffffffff1681525050826000015163ffffffff16896080018181510191509067ffffffffffffffff16908167ffffffffffffffff1681525050613990565b8860600151896080018181510191509067ffffffffffffffff16908167ffffffffffffffff168152505060008960600151846000015163ffffffff160390508067ffffffffffffffff168a60a0015167ffffffffffffffff161061392157808a60a0018181510391509067ffffffffffffffff16908167ffffffffffffffff1681525050808a60c0018181510191509067ffffffffffffffff16908167ffffffffffffffff168152505061396d565b8960a001518a60c0018181510191509067ffffffffffffffff16908167ffffffffffffffff168152505060008a60a0019067ffffffffffffffff16908167ffffffffffffffff16815250505b60008a6060019067ffffffffffffffff16908167ffffffffffffffff1681525050505b886060015160046000898152602001908152602001600020600060016002610708816139b857fe5b0442816139c157fe5b0403815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555088608001516004600089815260200190815260200160002060006001600261070881613a2257fe5b044281613a2b57fe5b0403815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508860a00151600460008981526020019081526020016000206000600261070881613a8a57fe5b044281613a9357fe5b04815260200190815260200160002060000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508860c00151600460008981526020019081526020016000206000600261070881613af157fe5b044281613afa57fe5b04815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b886020015163ffffffff16836040015163ffffffff161415613c8157818603836080019063ffffffff16908163ffffffff168152505060018360600190151590811515815250508760008089815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600089815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff160217905550613c1589600001518460800151611dac565b60008089815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555042600080898152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550613d3f565b8563ffffffff16836020015163ffffffff161415613d355780896020015103836080019063ffffffff16908163ffffffff1681525050613cc989600001518460800151611dac565b60008089815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff16021790555042600080898152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550613d3e565b6000613d3d57fe5b5b5b50509695505050505050565b60008060008060008694506000600261070881613d6457fe5b044281613d6d57fe5b04905060046000888152602001908152602001600020600060018303815260200190815260200160002060000160009054906101000a900467ffffffffffffffff16945060046000888152602001908152602001600020600060018303815260200190815260200160002060000160009054906101000a900467ffffffffffffffff16935060046000888152602001908152602001600020600082815260200190815260200160002060000160009054906101000a900467ffffffffffffffff16925060046000888152602001908152602001600020600082815260200190815260200160002060000160089054906101000a900467ffffffffffffffff169150613e908663ffffffff168487010167ffffffffffffffff1663ffffffff6132a0565b9550509295509295909350565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000151581525090565b6040518061010001604052806000800b81526020016000800b8152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff168152602001600061ffff1681525090565b6040518060800160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681525090565b6040518060a00160405280600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600015158152602001600063ffffffff1681525090565b6040518060e00160405280600015158152602001600063ffffffff168152602001600063ffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6000813590506140f581615578565b92915050565b60008135905061410a8161558f565b92915050565b60008083601f84011261412257600080fd5b8235905067ffffffffffffffff81111561413b57600080fd5b60208301915083602082028301111561415357600080fd5b9250929050565b600081359050614169816155a6565b92915050565b60008151905061417e816155a6565b92915050565b600081359050614193816155bd565b92915050565b60008083601f8401126141ab57600080fd5b8235905067ffffffffffffffff8111156141c457600080fd5b6020830191508360018202830111156141dc57600080fd5b9250929050565b6000813590506141f2816155d4565b92915050565b600081359050614207816155eb565b92915050565b60008135905061421c81615602565b92915050565b60006020828403121561423457600080fd5b6000614242848285016140e6565b91505092915050565b6000806040838503121561425e57600080fd5b600061426c858286016140fb565b925050602061427d858286016141f8565b9150509250929050565b60008060008060006080868803121561429f57600080fd5b60006142ad888289016140e6565b95505060206142be888289016140e6565b94505060406142cf888289016141f8565b935050606086013567ffffffffffffffff8111156142ec57600080fd5b6142f888828901614199565b92509250509295509295909350565b60008060006040848603121561431c57600080fd5b600061432a868287016140e6565b935050602084013567ffffffffffffffff81111561434757600080fd5b61435386828701614110565b92509250509250925092565b6000806040838503121561437257600080fd5b6000614380858286016140e6565b92505060206143918582860161415a565b9150509250929050565b600080604083850312156143ae57600080fd5b60006143bc858286016140e6565b92505060206143cd858286016141f8565b9150509250929050565b600080600080606085870312156143ed57600080fd5b60006143fb878288016140e6565b945050602061440c878288016141f8565b935050604085013567ffffffffffffffff81111561442957600080fd5b61443587828801614199565b925092505092959194509250565b6000806000806080858703121561445957600080fd5b6000614467878288016140e6565b9450506020614478878288016141f8565b93505060406144898782880161420d565b925050606061449a87828801614184565b91505092959194509250565b600080602083850312156144b957600080fd5b600083013567ffffffffffffffff8111156144d357600080fd5b6144df85828601614110565b92509250509250929050565b6000602082840312156144fd57600080fd5b600061450b8482850161416f565b91505092915050565b60008060008060008060c0878903121561452d57600080fd5b600061453b89828a016141e3565b965050602061454c89828a01614184565b955050604061455d89828a0161420d565b945050606061456e89828a0161420d565b935050608061457f89828a0161420d565b92505060a061459089828a0161420d565b9150509295509295509295565b6000602082840312156145af57600080fd5b60006145bd848285016141f8565b91505092915050565b600080604083850312156145d957600080fd5b60006145e7858286016141f8565b92505060206145f8858286016141f8565b9150509250929050565b600080600080600060a0868803121561461a57600080fd5b6000614628888289016141f8565b9550506020614639888289016141f8565b945050604061464a888289016141f8565b935050606061465b888289016141f8565b925050608061466c88828901614184565b9150509295509295909350565b60008060006060848603121561468e57600080fd5b600061469c868287016141f8565b93505060206146ad8682870161420d565b92505060406146be86828701614184565b9150509250925092565b60006146d48383614daa565b60a08301905092915050565b6146e9816154c3565b82525050565b6146f8816154c3565b82525050565b600061470982615489565b61471381856154a1565b935061471e83615479565b8060005b8381101561474f57815161473688826146c8565b975061474183615494565b925050600181019050614722565b5085935050505092915050565b614765816154e7565b82525050565b614774816154e7565b82525050565b614783816154f3565b82525050565b61479a614795826154f3565b615564565b82525050565b6147a98161550f565b82525050565b60006147bc6016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006000830152602082019050919050565b60006147fc600f836154b2565b91507f45584954494e475f414c524541445900000000000000000000000000000000006000830152602082019050919050565b600061483c6015836154b2565b91507f535041434553484950535f4e4f545f454e4f55474800000000000000000000006000830152602082019050919050565b600061487c600d836154b2565b91507f494e56414c49445f4552433230000000000000000000000000000000000000006000830152602082019050919050565b60006148bc600b836154b2565b91507f504c414e45545f455849540000000000000000000000000000000000000000006000830152602082019050919050565b60006148fc6012836154b2565b91507f464c4545545f444f5f4e4f545f455849535400000000000000000000000000006000830152602082019050919050565b600061493c601a836154b2565b91507f6e6f20706c616e657420696e2074686973206c6f636174696f6e0000000000006000830152602082019050919050565b600061497c600f836154b2565b91507f4641494c45445f5452414e5346455200000000000000000000000000000000006000830152602082019050919050565b60006149bc600c836154b2565b91507f5354494c4c5f41435449564500000000000000000000000000000000000000006000830152602082019050919050565b60006149fc600f836154b2565b91507f4641494c45445f434150545552454400000000000000000000000000000000006000830152602082019050919050565b6000614a3c6016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006000830152602082019050919050565b6000614a7c600d836154b2565b91507f5354494c4c5f45584954494e47000000000000000000000000000000000000006000830152602082019050919050565b6000614abc601d836154b2565b91507f494e56414c49445f464c4545545f444154415f4f525f534543524554270000006000830152602082019050919050565b6000614afc602b836154b2565b91507f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60008301527f737420696e2073706163650000000000000000000000000000000000000000006020830152604082019050919050565b6000614b626016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006000830152602082019050919050565b6000614ba26008836154b2565b91507f4f564552464c4f570000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614be26009836154b2565b91507f4e4f545f4f574e455200000000000000000000000000000000000000000000006000830152602082019050919050565b6000614c226009836154b2565b91507f746f6f206561726c7900000000000000000000000000000000000000000000006000830152602082019050919050565b6000614c62600e836154b2565b91507f77726f6e672064697374616e63650000000000000000000000000000000000006000830152602082019050919050565b6000614ca2600e836154b2565b91507f4e4f545f415554484f52495a45440000000000000000000000000000000000006000830152602082019050919050565b6000614ce2600e836154b2565b91507f494e56414c49445f414d4f554e540000000000000000000000000000000000006000830152602082019050919050565b6000614d226016836154b2565b91507f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006000830152602082019050919050565b608082016000820151614d6b6000850182614f51565b506020820151614d7e6020850182614f51565b506040820151614d916040850182614f51565b506060820151614da46060850182614f51565b50505050565b60a082016000820151614dc060008501826146e0565b506020820151614dd36020850182614f51565b506040820151614de66040850182614f51565b506060820151614df96060850182614f51565b506080820151614e0c608085018261475c565b50505050565b60a082016000820151614e2860008501826146e0565b506020820151614e3b6020850182614f51565b506040820151614e4e6040850182614f51565b506060820151614e616060850182614f51565b506080820151614e74608085018261475c565b50505050565b61010082016000820151614e9160008501826147a0565b506020820151614ea460208501826147a0565b506040820151614eb76040850182614f1c565b506060820151614eca6060850182614f1c565b506080820151614edd6080850182614f1c565b5060a0820151614ef060a0850182614f1c565b5060c0820151614f0360c0850182614f1c565b5060e0820151614f1660e0850182614f1c565b50505050565b614f258161551c565b82525050565b614f348161554a565b82525050565b614f4b614f468261554a565b61556e565b82525050565b614f5a81615554565b82525050565b614f6981615554565b82525050565b6000614f7b8285614789565b602082019150614f8b8284614f3a565b6020820191508190509392505050565b6000606082019050614fb060008301866146ef565b614fbd60208301856146ef565b614fca6040830184614f2b565b949350505050565b6000604082019050614fe760008301856146ef565b614ff46020830184614f2b565b9392505050565b600060608201905061501060008301866146ef565b61501d6020830185614f60565b61502a6040830184614f60565b949350505050565b600060a082019050818103600083015261504c81856146fe565b905061505b6020830184614d55565b9392505050565b6000602082019050615077600083018461476b565b92915050565b6000602082019050615092600083018461477a565b92915050565b600060208201905081810360008301526150b1816147af565b9050919050565b600060208201905081810360008301526150d1816147ef565b9050919050565b600060208201905081810360008301526150f18161482f565b9050919050565b600060208201905081810360008301526151118161486f565b9050919050565b60006020820190508181036000830152615131816148af565b9050919050565b60006020820190508181036000830152615151816148ef565b9050919050565b600060208201905081810360008301526151718161492f565b9050919050565b600060208201905081810360008301526151918161496f565b9050919050565b600060208201905081810360008301526151b1816149af565b9050919050565b600060208201905081810360008301526151d1816149ef565b9050919050565b600060208201905081810360008301526151f181614a2f565b9050919050565b6000602082019050818103600083015261521181614a6f565b9050919050565b6000602082019050818103600083015261523181614aaf565b9050919050565b6000602082019050818103600083015261525181614aef565b9050919050565b6000602082019050818103600083015261527181614b55565b9050919050565b6000602082019050818103600083015261529181614b95565b9050919050565b600060208201905081810360008301526152b181614bd5565b9050919050565b600060208201905081810360008301526152d181614c15565b9050919050565b600060208201905081810360008301526152f181614c55565b9050919050565b6000602082019050818103600083015261531181614c95565b9050919050565b6000602082019050818103600083015261533181614cd5565b9050919050565b6000602082019050818103600083015261535181614d15565b9050919050565b600060808201905061536d6000830184614d55565b92915050565b60006101a0820190506153896000830185614e12565b61539660a0830184614e7a565b9392505050565b60006020820190506153b26000830184614f2b565b92915050565b60006060820190506153cd6000830186614f2b565b6153da6020830185614f60565b6153e76040830184614f60565b949350505050565b600060e082019050615404600083018a614f2b565b6154116020830189614f60565b61541e6040830188614f60565b61542b6060830187614f60565b6154386080830186614f60565b61544560a083018561476b565b61545260c0830184614f60565b98975050505050505050565b60006020820190506154736000830184614f60565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006154ce8261552a565b9050919050565b60006154e08261552a565b9050919050565b60008115159050919050565b6000819050919050565b6000615508826154c3565b9050919050565b60008160000b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000819050919050565b6000819050919050565b615581816154c3565b811461558c57600080fd5b50565b615598816154d5565b81146155a357600080fd5b50565b6155af816154e7565b81146155ba57600080fd5b50565b6155c6816154f3565b81146155d157600080fd5b50565b6155dd816154fd565b81146155e857600080fd5b50565b6155f48161554a565b81146155ff57600080fd5b50565b61560b81615554565b811461561657600080fd5b5056fea264697066735822122055ef5ff63c635234ba7b7ec68c22bbb6c119ae510eb5f4c53ecea5069f598db064736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8662,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_planets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Planet)8707_storage)"
      },
      {
        "astId": 8666,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_fleets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Fleet)8714_storage)"
      },
      {
        "astId": 8670,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_stakeReadyToBeWithdrawn",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8676,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8687,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_inFlight",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)8681_storage))"
      },
      {
        "astId": 8698,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_discovered",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Discovered)8696_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)8681_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct OuterSpace.InFlight))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InFlight)8681_storage)"
      },
      "t_mapping(t_uint256,t_struct(Fleet)8714_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.Fleet)",
        "numberOfBytes": "32",
        "value": "t_struct(Fleet)8714_storage"
      },
      "t_mapping(t_uint256,t_struct(InFlight)8681_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.InFlight)",
        "numberOfBytes": "32",
        "value": "t_struct(InFlight)8681_storage"
      },
      "t_mapping(t_uint256,t_struct(Planet)8707_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)8707_storage"
      },
      "t_struct(Discovered)8696_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Discovered",
        "members": [
          {
            "astId": 8689,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "minX",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8691,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "maxX",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8693,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "minY",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8695,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "maxY",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fleet)8714_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Fleet",
        "members": [
          {
            "astId": 8709,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8711,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "launchTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8713,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "quantity",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(InFlight)8681_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.InFlight",
        "members": [
          {
            "astId": 8678,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "flying",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8680,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "destroyed",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Planet)8707_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Planet",
        "members": [
          {
            "astId": 8700,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8702,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "exitTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8704,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "numSpaceships",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 8706,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "lastUpdated",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}