{
  "address": "0x9f13E02185d63e6300bAA2Dc1CfD826b11732715",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "contract AllianceRegistry",
          "name": "theAllianceRegistry",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "resolveWindow",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "timePerDistance",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "exitDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "acquireNumSpaceships",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "productionSpeedUp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "frontrunningDelay",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "productionCapAsDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fleetSizeFactor6",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "ExitComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destinationOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destination",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "gift",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fleetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inFlightFleetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inFlightPlanetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        }
      ],
      "name": "FleetArrived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumSpaceships",
          "type": "uint32"
        }
      ],
      "name": "FleetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "minX",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxX",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "minY",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxY",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acquirer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "PlanetStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "giver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStake",
          "type": "uint256"
        }
      ],
      "name": "StakeToWithdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "acquireViaTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allianceRegistry",
      "outputs": [
        {
          "internalType": "contract AllianceRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "exitFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "fetchAndWithdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDiscovered",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "minX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minY",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxY",
              "type": "uint32"
            }
          ],
          "internalType": "struct OuterSpace.Discovered",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "getFleet",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "launchTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "flyingAtLaunch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "destroyedAtLaunch",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGeneisHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "getPlanet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "exitTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "internalType": "struct OuterSpace.ExternalPlanet",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "subX",
              "type": "int8"
            },
            {
              "internalType": "int8",
              "name": "subY",
              "type": "int8"
            },
            {
              "internalType": "uint16",
              "name": "stake",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "production",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "attack",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "defense",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "natives",
              "type": "uint16"
            }
          ],
          "internalType": "struct OuterSpace.PlanetStats",
          "name": "stats",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "locations",
          "type": "uint256[]"
        }
      ],
      "name": "getPlanetStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "exitTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "internalType": "struct OuterSpace.ExternalPlanet[]",
          "name": "planetStates",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "minX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxX",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minY",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "maxY",
              "type": "uint32"
            }
          ],
          "internalType": "struct OuterSpace.Discovered",
          "name": "discovered",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "forAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenPaidFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract AllianceRegistry",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "resetPlanet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "gift",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "specific",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "secret",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "fleetSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct OuterSpace.FleetResolution",
          "name": "resolution",
          "type": "tuple"
        }
      ],
      "name": "resolveFleet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "toHash",
          "type": "bytes32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fleetSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fleetOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "quantity",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "toHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OuterSpace.FleetLaunch",
          "name": "launch",
          "type": "tuple"
        }
      ],
      "name": "sendFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3cc5be39c67ed2146d122b413aa1d07e2ebd57a595a57d5a46a6fb38d2d9216b",
  "receipt": {
    "to": null,
    "from": "0x61c461EcC993aaDEB7e4b47E96d1B8cC37314B20",
    "contractAddress": "0x9f13E02185d63e6300bAA2Dc1CfD826b11732715",
    "transactionIndex": 14,
    "gasUsed": "5306288",
    "logsBloom": "0x
    "blockHash": "0x00c62b441b073177df1ad233cc1bcf8d1a040b512274d1a3acfe50aef2a853f4",
    "transactionHash": "0x3cc5be39c67ed2146d122b413aa1d07e2ebd57a595a57d5a46a6fb38d2d9216b",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 6066151,
        "transactionHash": "0x3cc5be39c67ed2146d122b413aa1d07e2ebd57a595a57d5a46a6fb38d2d9216b",
        "address": "0x9f13E02185d63e6300bAA2Dc1CfD826b11732715",
        "topics": [
          "0x3086e986d6b4ec35754cd5a19b964d1012b58b3584a51a321d0fb693ae4cfcd9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010015e3b02f1bb647546a9856205a64f1c2263856de7acb3fe65aa303c9c8ce7fc",
        "logIndex": 38,
        "blockHash": "0x00c62b441b073177df1ad233cc1bcf8d1a040b512274d1a3acfe50aef2a853f4"
      }
    ],
    "blockNumber": 6066151,
    "cumulativeGasUsed": "7130802",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82E0eef1E826b20B5D16c2d0Bf7E479E06Cb64f8",
    "0x303c54b56ea9aa4318c4A27730aE13F972490Bf6",
    "0x015e3b02f1bb647546a9856205a64f1c2263856de7acb3fe65aa303c9c8ce7fc",
    43200,
    7200,
    259200,
    100000,
    1,
    1800,
    259200,
    500000
  ],
  "linkedData": {
    "genesisHash": "0x015e3b02f1bb647546a9856205a64f1c2263856de7acb3fe65aa303c9c8ce7fc",
    "resolveWindow": 43200,
    "timePerDistance": 7200,
    "exitDuration": 259200,
    "acquireNumSpaceships": 100000,
    "productionSpeedUp": 1,
    "chainGenesisHash": "",
    "frontrunningDelay": 1800,
    "productionCapAsDuration": 259200,
    "fleetSizeFactor6": 500000
  },
  "solcInputHash": "46dd8be70d78d5f5577cd623422b36a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract AllianceRegistry\",\"name\":\"theAllianceRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"resolveWindow\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timePerDistance\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"exitDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"acquireNumSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"productionSpeedUp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"frontrunningDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"productionCapAsDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fleetSizeFactor6\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"ExitComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destination\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fleetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inFlightFleetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inFlightPlanetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"}],\"name\":\"FleetArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumSpaceships\",\"type\":\"uint32\"}],\"name\":\"FleetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acquirer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"PlanetStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"StakeToWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"acquireViaTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allianceRegistry\",\"outputs\":[{\"internalType\":\"contract AllianceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"exitFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"fetchAndWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscovered\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"}],\"internalType\":\"struct OuterSpace.Discovered\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"getFleet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"launchTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"flyingAtLaunch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"destroyedAtLaunch\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneisHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"getPlanet\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"exitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct OuterSpace.ExternalPlanet\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"subX\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"subY\",\"type\":\"int8\"},{\"internalType\":\"uint16\",\"name\":\"stake\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"production\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"attack\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defense\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"natives\",\"type\":\"uint16\"}],\"internalType\":\"struct OuterSpace.PlanetStats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"locations\",\"type\":\"uint256[]\"}],\"name\":\"getPlanetStates\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"exitTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct OuterSpace.ExternalPlanet[]\",\"name\":\"planetStates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"}],\"internalType\":\"struct OuterSpace.Discovered\",\"name\":\"discovered\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenPaidFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract AllianceRegistry\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"resetPlanet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"specific\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct OuterSpace.FleetResolution\",\"name\":\"resolution\",\"type\":\"tuple\"}],\"name\":\"resolveFleet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct OuterSpace.FleetLaunch\",\"name\":\"launch\",\"type\":\"tuple\"}],\"name\":\"sendFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/OuterSpace.sol\":\"OuterSpace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/AllianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"./Interfaces/IAlliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AllianceRegistry is Proxied {\\n     using ECDSA for bytes32;\\n\\n\\n    uint8 internal constant MAX_NUM_ALLIANCES = 4;\\n\\n    mapping(address => mapping(IAlliance => uint256)) internal _allianceNonces;\\n    struct AllianceRow {\\n        IAlliance alliance;\\n        uint96 joinTime;\\n    }\\n    struct Alliances {\\n        AllianceRow alliance0;\\n        AllianceRow alliance1;\\n        AllianceRow alliance2;\\n        AllianceRow alliance3;\\n    }\\n    mapping(address => Alliances) internal _alliances;\\n\\n\\n    event AllianceLink(IAlliance indexed alliance, address indexed player, bool joining);\\n\\n\\n    function getAllianceDataAtSlot(address player, uint8 slot) external view returns (IAlliance alliance, uint96 joinTime, uint256 nonce) {\\n\\n        Alliances storage alliances = _alliances[player];\\n        if (slot == 0) {\\n            alliance = alliances.alliance0.alliance;\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (slot == 1) {\\n            alliance = alliances.alliance1.alliance;\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (slot == 2) {\\n            alliance = alliances.alliance2.alliance;\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (slot == 3) {\\n            alliance = alliances.alliance3.alliance;\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n\\n        nonce = _allianceNonces[player][alliance];\\n    }\\n\\n    function getAllianceData(address player, IAlliance alliance) external view returns (uint96 joinTime, uint256 nonce) {\\n        nonce = _allianceNonces[player][alliance];\\n\\n        Alliances storage alliances = _alliances[player];\\n        if (alliances.alliance0.alliance == alliance) {\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (alliances.alliance1.alliance == alliance) {\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (alliances.alliance2.alliance == alliance) {\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (alliances.alliance3.alliance == alliance) {\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n    }\\n\\n    function havePlayersAnAllianceInCommon(address player1, address player2, uint256 timestamp) external view returns (IAlliance alliance, uint96 joinTime) {\\n        Alliances storage p1Alliances = _alliances[player1];\\n        Alliances storage p2Alliances = _alliances[player2];\\n\\n        AllianceRow[4] memory player1Alliances;\\n        AllianceRow[4] memory player2Alliances;\\n        uint256 num1 = 0;\\n        uint256 num2 = 0;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (i == num1) {\\n                AllianceRow memory allianceRow;\\n                if (i == 0) {\\n                    allianceRow = p1Alliances.alliance0;\\n                } else if(i==1) {\\n                    allianceRow = p1Alliances.alliance1;\\n                } else if(i==2) {\\n                    allianceRow = p1Alliances.alliance2;\\n                } else if(i==3) {\\n                    allianceRow = p1Alliances.alliance3;\\n                }\\n                if (address(allianceRow.alliance) == address(0)) {\\n                    // console.log(\\\"p1 exhausted\\\");\\n                    return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                }\\n                player1Alliances[num1 ++] = allianceRow;\\n            }\\n            for (uint256 j = 0; j < 4; j++) {\\n                if (j == num2) {\\n                    AllianceRow memory allianceRow;\\n                    if (j == 0) {\\n                        allianceRow = p2Alliances.alliance0;\\n                    } else if(j==1) {\\n                        allianceRow = p2Alliances.alliance1;\\n                    } else if(j==2) {\\n                        allianceRow = p2Alliances.alliance2;\\n                    } else if(j==3) {\\n                        allianceRow = p2Alliances.alliance3;\\n                    }\\n                    if (address(allianceRow.alliance) == address(0)) {\\n                        // console.log(\\\"p2 exhausted\\\");\\n                        // return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                        break;\\n                    }\\n                    player2Alliances[num2 ++] = allianceRow;\\n                }\\n\\n                if (player1Alliances[i].alliance == player2Alliances[j].alliance) {\\n                    if (player1Alliances[i].joinTime >= player2Alliances[j].joinTime) {\\n                        if (player1Alliances[i].joinTime < timestamp) {\\n                            return (player1Alliances[i].alliance, player1Alliances[i].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player1Alliances[i].alliance;\\n                            joinTime = player1Alliances[i].joinTime;\\n                        }\\n                    } else {\\n                        if (player2Alliances[j].joinTime < timestamp) {\\n                            return (player2Alliances[j].alliance, player2Alliances[j].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player2Alliances[j].alliance;\\n                            joinTime = player2Alliances[j].joinTime;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // console.log(address(alliance));\\n        // console.log(joinTime);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM PLAYER\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function joinAlliance(IAlliance alliance, bytes calldata data) external returns (bool joined) {\\n        Alliances storage alliances = _alliances[msg.sender];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            slot ++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            slot ++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            slot ++;\\n        }\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        joined = alliance.requestToJoin(msg.sender, data);\\n        if (joined) {\\n            if (slot == 0) {\\n                alliances.alliance0.alliance = alliance;\\n                alliances.alliance0.joinTime = uint96(block.timestamp);\\n            } else if (slot == 1) {\\n                alliances.alliance1.alliance = alliance;\\n                alliances.alliance1.joinTime = uint96(block.timestamp);\\n            } else if (slot == 2) {\\n                alliances.alliance2.alliance = alliance;\\n                alliances.alliance2.joinTime = uint96(block.timestamp);\\n            } else if (slot == 3) {\\n                alliances.alliance3.alliance = alliance;\\n                alliances.alliance3.joinTime = uint96(block.timestamp);\\n            }\\n\\n            emit AllianceLink(alliance, msg.sender, true);\\n        }\\n    }\\n\\n    function leaveAlliance(IAlliance alliance) external {\\n        _leaveAlliance(msg.sender, alliance);\\n        try alliance.playerHasLeft(msg.sender) {} catch {}\\n        // TODO ensure callback not failed due to low gas (1/64 rule)\\n    }\\n\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM ALLIANCE\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function addPlayerToAlliance(address player, uint32 nonce, bytes calldata signature) external {\\n        _addPlayerToAlliance(player, nonce, signature);\\n    }\\n\\n    struct PlayerSubmission {\\n        address addr;\\n        uint32 nonce;\\n        bytes signature;\\n    }\\n\\n\\n    function addMultiplePlayersToAlliance(PlayerSubmission[] calldata playerSubmissions) external {\\n       for(uint256 i = 0 ; i < playerSubmissions.length; i++) {\\n           _addPlayerToAlliance(playerSubmissions[i].addr, playerSubmissions[i].nonce, playerSubmissions[i].signature);\\n       }\\n    }\\n\\n    function ejectPlayerFromAlliance(address player) external {\\n        _leaveAlliance(player, IAlliance(msg.sender));\\n    }\\n\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function _addPlayerToAlliance(address player, uint32 nonce, bytes calldata signature) internal {\\n        IAlliance alliance = IAlliance(msg.sender);\\n\\n        Alliances storage alliances = _alliances[player];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            require(alliances.alliance0.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot ++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            require(alliances.alliance1.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot ++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            require(alliances.alliance2.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot ++;\\n        }\\n        require(alliances.alliance3.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n\\n        uint256 currentNonce = _allianceNonces[player][alliance];\\n        require(currentNonce == nonce, \\\"INVALID_NONCE\\\");\\n\\n        bytes memory message;\\n        if (nonce == 0) {\\n            message = abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n56\\\", \\\"Join Alliance 0x0000000000000000000000000000000000000000\\\");\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n        } else {\\n            message = abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n76\\\", \\\"Join Alliance 0x0000000000000000000000000000000000000000 (nonce:          0)\\\");\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n            _writeUintAsDecimal(message, 28 + 74, nonce);\\n        }\\n\\n\\n        // console.log(string(message));\\n\\n        bytes32 digest = keccak256(message);\\n\\n        address signer = digest.recover(signature);\\n        require(player == signer, \\\"INVALID_SIGNATURE\\\");\\n\\n        if (slot == 0) {\\n            alliances.alliance0.alliance = alliance;\\n            alliances.alliance0.joinTime = uint96(block.timestamp);\\n        } else if (slot == 1) {\\n            alliances.alliance1.alliance = alliance;\\n            alliances.alliance1.joinTime = uint96(block.timestamp);\\n        } else if (slot == 2) {\\n            alliances.alliance2.alliance = alliance;\\n            alliances.alliance2.joinTime = uint96(block.timestamp);\\n        } else if (slot == 3) {\\n            alliances.alliance3.alliance = alliance;\\n            alliances.alliance3.joinTime = uint96(block.timestamp);\\n        }\\n        _allianceNonces[player][alliance] = nonce + 1;\\n\\n        emit AllianceLink(alliance, player, true);\\n    }\\n\\n    bytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n    bytes internal constant decimalAlphabet = \\\"0123456789\\\";\\n    function _writeUintAsHex(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(hexAlphabet[num % 16]);\\n            num /= 16;\\n        }\\n    }\\n    function _writeUintAsDecimal(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(decimalAlphabet[num % 10]);\\n            num /= 10;\\n        }\\n    }\\n\\n    function _leaveAlliance(address player, IAlliance alliance) internal {\\n\\n        Alliances storage alliances = _alliances[msg.sender];\\n\\n        IAlliance lastSlotAlliance;\\n        uint96 lastSlotJoinTime;\\n\\n\\n        require(address(alliances.alliance0.alliance) != address(0), \\\"NOT_PART_OF_ANY_ALLIANCE\\\");\\n\\n        if (address(alliances.alliance1.alliance) == address(0)) {\\n            lastSlotAlliance = alliances.alliance0.alliance;\\n            lastSlotJoinTime = alliances.alliance0.joinTime;\\n            alliances.alliance0.alliance = IAlliance(address(0));\\n            alliances.alliance0.joinTime = 0;\\n        } else {\\n            if (address(alliances.alliance2.alliance) == address(0)) {\\n                lastSlotAlliance = alliances.alliance1.alliance;\\n                lastSlotJoinTime = alliances.alliance1.joinTime;\\n                alliances.alliance1.alliance = IAlliance(address(0));\\n                alliances.alliance1.joinTime = 0;\\n            } else {\\n                if (address(alliances.alliance3.alliance) == address(0)) {\\n                    lastSlotAlliance = alliances.alliance2.alliance;\\n                    lastSlotJoinTime = alliances.alliance2.joinTime;\\n                    alliances.alliance2.alliance = IAlliance(address(0));\\n                    alliances.alliance2.joinTime = 0;\\n                } else {\\n                    lastSlotAlliance = alliances.alliance3.alliance;\\n                    lastSlotJoinTime = alliances.alliance3.joinTime;\\n                    alliances.alliance3.alliance = IAlliance(address(0));\\n                    alliances.alliance3.joinTime = 0;\\n                }\\n            }\\n        }\\n\\n\\n        if (alliance != lastSlotAlliance) {\\n            if (alliances.alliance0.alliance == alliance) {\\n                alliances.alliance0.alliance = lastSlotAlliance;\\n                alliances.alliance0.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance1.alliance == alliance) {\\n                alliances.alliance1.alliance =lastSlotAlliance;\\n                alliances.alliance1.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance2.alliance == alliance) {\\n                alliances.alliance2.alliance =lastSlotAlliance;\\n                alliances.alliance2.joinTime = lastSlotJoinTime;\\n            } else {\\n                revert(\\\"NOT_PART_OF_THE_ALLIANCE\\\");\\n            }\\n        }\\n\\n\\n        emit AllianceLink(alliance, player, false);\\n    }\\n\\n\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n}\\n\",\"keccak256\":\"0x8270121ba959d0424cef4d25e8fc95566c0cf1cba661196094fad24d19d096cc\",\"license\":\"AGPL-1.0\"},\"src/Interfaces/IAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IAlliance {\\n    function requestToJoin(address player, bytes calldata data) external returns (bool);\\n\\n    function playerHasLeft(address player) external;\\n}\\n\\n\",\"keccak256\":\"0xac01ced7552f64f7fe9c4e5e5a4517a4a57473e72c76ecb784df9bc288445703\",\"license\":\"AGPL-1.0\"},\"src/Libraries/Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\n\\n// TODO remove\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Extraction {\\n    function value(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 size\\n    ) internal pure returns (uint256) {\\n        return uint256((data >> leastSignificantBit)) % 2**size;\\n    }\\n\\n    function value8Mod(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 mod\\n    ) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % mod);\\n    }\\n\\n    function value8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % 2**8);\\n    }\\n\\n    // 1+1+2+3+4+6+7+8+8+7+6+4+3+2+1+1 // aproximation of normal distribution with mean=7.5 and standard deviation=3 for 16 values\\n    bytes32 constant n_m7_5_sd3 = 0x01223334444555555666666677777777888888889999999AAAAAABBBBCCCDDEF;\\n\\n    function normal8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        uint8 index = value8Mod(data, leastSignificantBit, 64);\\n        uint8 first = index / 2;\\n        uint8 second = index % 2;\\n        uint8 slot = uint8(n_m7_5_sd3[first]);\\n        if (second == 0) {\\n            return slot >> 4;\\n        } else {\\n            return slot % 16;\\n        }\\n    }\\n\\n    function normal16(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        bytes32 selection\\n    ) internal pure returns (uint16) {\\n        uint8 index = normal8(data, leastSignificantBit);\\n        return uint16(uint8(selection[index * 2])) * 2**8 + uint16(uint8(selection[index * 2 + 1]));\\n    }\\n}\\n\",\"keccak256\":\"0x58d3521ef0078fa6b67a7d8684c4f808b9f7eaea46aacb438a1c8bb5fe65a62e\",\"license\":\"AGPL-1.0\"},\"src/Libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\n\\nlibrary Math {\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require(b == 0 || a == 0 || ((c = a * b) / b) == a, overflowError);\\n    }\\n\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a + b) >= a, overflowError);\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory underflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, underflowError);\\n    }\\n\\n    function mul18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, b18, overflowError) / 10**18;\\n    }\\n\\n    function div18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, 10**18, overflowError) / b18;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function smin(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function smax(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function sqrt(uint256 a) internal pure returns (uint256 c) {\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8302e97d326d0408b331422faebaf19a91102b2a14a395811380417c96d54a57\",\"license\":\"AGPL-1.0\"},\"src/OuterSpace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Libraries/Extraction.sol\\\";\\nimport \\\"./Libraries/Math.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"./Interfaces/IAlliance.sol\\\";\\nimport \\\"./AllianceRegistry.sol\\\";\\n\\ncontract OuterSpace is Proxied {\\n    using Extraction for bytes32;\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // CONSTANTS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    uint256 internal constant DECIMALS_18 = 1e18;\\n    uint32 internal constant ACTIVE_MASK = 2**31;\\n    int256 internal constant UINT32_MAX = 2**32 - 1;\\n\\n    int256 internal constant EXPANSION = 8;\\n    uint32 internal constant INITIAL_SPACE = 16;\\n    uint256 internal constant GIFT_TAX_PER_10000 = 2500;\\n\\n    uint256 internal constant COMBAT_RULE_SWITCH_TIME = 1620144000; // Tuesday, 4 May 2021 16:00:00 GMT\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // CONFIGURATION / IMMUTABLE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    AllianceRegistry public immutable allianceRegistry;\\n    bytes32 internal immutable _genesis;\\n    IERC20 internal immutable _stakingToken;\\n    uint256 internal immutable _resolveWindow;\\n    uint256 internal immutable _timePerDistance;\\n    uint256 internal immutable _exitDuration;\\n    uint32 internal immutable _acquireNumSpaceships;\\n    uint32 internal immutable _productionSpeedUp;\\n    uint256 internal immutable _frontrunningDelay;\\n    uint256 internal immutable _productionCapAsDuration;\\n    uint256 internal immutable _fleetSizeFactor6;\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // STORAGE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    mapping(uint256 => Planet) internal _planets;\\n    mapping(uint256 => Fleet) internal _fleets;\\n\\n    // struct AccountData {\\n    //     uint128 stakeReadyToBeWithdrawn;\\n    //     uint8 numAlliances;\\n    // }\\n    // mapping(address => AccountData) internal _accounts;\\n    mapping(address => uint256) internal _stakeReadyToBeWithdrawn;\\n\\n    mapping(address => mapping(address => bool)) internal _operators;\\n\\n    // mapping(address => mapping(IAlliance => uint256)) internal _alliances;\\n\\n    // front running protection : _frontruunningDelay / 2 slots\\n    struct InFlight {\\n        uint64 flying;\\n        uint64 destroyed;\\n    }\\n    // TODO make it namespaces per user, currently it is possible (though unlikely) for 2 users to share a slot if one attack another and quickly send away spaceships\\n    mapping(uint256 => mapping(uint256 => InFlight)) internal _inFlight;\\n\\n    struct Discovered {\\n        uint32 minX;\\n        uint32 maxX;\\n        uint32 minY;\\n        uint32 maxY;\\n    }\\n\\n    Discovered internal _discovered;\\n\\n    struct Planet {\\n        address owner;\\n        uint32 exitTime; // could be used as startTime with first bit telling whether it is exit or startTime => means exiting would produce spacehips / or not, but not based on startTime\\n        uint32 numSpaceships; // uint31 + first bit => active\\n        uint32 lastUpdated; // also used as native-destruction indicator\\n    }\\n\\n    struct Fleet {\\n        address owner;\\n        uint32 launchTime;\\n        uint32 quantity;\\n        // TODO uint32 delay\\n    }\\n\\n    // rewards\\n    mapping(address => uint256) internal _prevRewardIds;\\n    mapping(uint256 => uint256) internal _rewards;\\n    mapping(address => mapping(uint256 => bool)) internal _rewardsToWithdraw;\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // EVENTS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    event PlanetStake(address indexed acquirer, uint256 indexed location, uint32 numSpaceships, uint256 stake);\\n    event FleetSent(\\n        address indexed fleetSender,\\n        address indexed fleetOwner,\\n        uint256 indexed from,\\n        address operator,\\n        uint256 fleet,\\n        uint32 quantity,\\n        uint32 newNumSpaceships\\n    );\\n\\n    // TODO add fromPlanet to the event ?\\n    event FleetArrived(\\n        uint256 indexed fleet,\\n        address indexed fleetOwner,\\n        address indexed destinationOwner,\\n        uint256 destination,\\n        bool gift,\\n        uint32 fleetLoss,\\n        uint32 planetLoss,\\n        uint32 inFlightFleetLoss,\\n        uint32 inFlightPlanetLoss,\\n        bool won,\\n        uint32 newNumspaceships\\n    );\\n\\n    // event AllianceLink(IAlliance indexed alliance, address indexed player, bool joining);\\n\\n    event PlanetReset(uint256 indexed location);\\n\\n    event PlanetExit(address indexed owner, uint256 indexed location);\\n\\n    event ExitComplete(address indexed owner, uint256 indexed location, uint256 stake);\\n\\n    event RewardSetup(uint256 indexed location, address indexed giver, uint256 rewardId);\\n    event RewardToWithdraw(address indexed owner, uint256 indexed location, uint256 indexed rewardId);\\n\\n    event StakeToWithdraw(address indexed owner, uint256 newStake);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event Initialized(uint32 minX, uint32 maxX, uint32 minY, uint32 maxY, bytes32 genesis);\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // CONSTRUCTOR / INITIALIZATION\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    constructor(\\n        IERC20 stakingToken,\\n        AllianceRegistry theAllianceRegistry,\\n        bytes32 genesis,\\n        uint32 resolveWindow,\\n        uint32 timePerDistance,\\n        uint32 exitDuration,\\n        uint32 acquireNumSpaceships,\\n        uint32 productionSpeedUp,\\n        uint32 frontrunningDelay,\\n        uint32 productionCapAsDuration,\\n        uint32 fleetSizeFactor6\\n    ) {\\n        uint32 t = timePerDistance / 4; // the coordinates space is 4 times bigger\\n        require(t * 4 == timePerDistance, \\\"TIME_PER_DIST_NOT_DIVISIBLE_4\\\");\\n\\n        _stakingToken = stakingToken;\\n        allianceRegistry = theAllianceRegistry;\\n        _genesis = genesis;\\n        _resolveWindow = resolveWindow;\\n        _timePerDistance = t;\\n        _exitDuration = exitDuration;\\n        _acquireNumSpaceships = acquireNumSpaceships;\\n        _productionSpeedUp = productionSpeedUp;\\n        _frontrunningDelay = frontrunningDelay;\\n        _productionCapAsDuration = productionCapAsDuration;\\n        _fleetSizeFactor6 = fleetSizeFactor6;\\n\\n        postUpgrade(\\n            stakingToken,\\n            theAllianceRegistry,\\n            genesis,\\n            resolveWindow,\\n            timePerDistance,\\n            exitDuration,\\n            acquireNumSpaceships,\\n            productionSpeedUp,\\n            frontrunningDelay,\\n            productionCapAsDuration,\\n            fleetSizeFactor6\\n        );\\n    }\\n\\n    function postUpgrade(\\n        IERC20,\\n        AllianceRegistry,\\n        bytes32 genesis,\\n        uint32,\\n        uint32,\\n        uint32,\\n        uint32,\\n        uint32,\\n        uint32,\\n        uint32,\\n        uint32\\n    ) public proxied {\\n        if (_discovered.minX == 0) {\\n            _discovered = Discovered({\\n                minX: INITIAL_SPACE,\\n                maxX: INITIAL_SPACE,\\n                minY: INITIAL_SPACE,\\n                maxY: INITIAL_SPACE\\n            });\\n            emit Initialized(_discovered.minX, _discovered.maxX, _discovered.minY, _discovered.maxY, genesis);\\n        }\\n    }\\n\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function onTokenTransfer(\\n        address,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public returns (bool) {\\n        require(msg.sender == address(_stakingToken), \\\"INVALID_ERC20\\\");\\n        (address acquirer, uint256 location) = abi.decode(data, (address, uint256));\\n        _acquire(acquirer, amount, location); // we do not care of who the payer is\\n        return true;\\n    }\\n\\n    function onTokenPaidFor(\\n        address,\\n        address forAddress,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool) {\\n        require(msg.sender == address(_stakingToken), \\\"INVALID_ERC20\\\");\\n        uint256 location = abi.decode(data, (uint256));\\n        _acquire(forAddress, amount, location); // we do not care of who the payer is\\n        return true;\\n    }\\n\\n    function acquireViaTransferFrom(uint256 location, uint256 amount) public {\\n        address sender = _msgSender();\\n        _acquire(sender, amount, location);\\n        _stakingToken.transferFrom(sender, address(this), amount);\\n    }\\n\\n    function resetPlanet(uint256 location) external onlyProxyAdmin {\\n        _planets[location].owner = address(0);\\n        _planets[location].exitTime = 0;\\n        _planets[location].numSpaceships = 0;\\n        _planets[location].lastUpdated = 0;\\n        emit PlanetReset(location);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // REWARD SETUP\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // TODO : ERC20, ERC721, ERC1155\\n    // remove sponsor, use msg.sender and this could be special contracts\\n    // TODO : reenable, removed because of code size issue\\n    // function addReward(uint256 location, address sponsor) external onlyProxyAdmin {\\n    //     Planet memory planet = _planets[location];\\n    //     if (_hasJustExited(planet.exitTime)) {\\n    //         _setPlanetAfterExit(location, planet.owner, _planets[location], address(0), 0);\\n    //     }\\n\\n    //     uint256 rewardId = _rewards[location];\\n    //     if (rewardId == 0) {\\n    //         rewardId = ++_prevRewardIds[sponsor];\\n    //         _rewards[location] = (uint256(uint160(sponsor)) << 96) + rewardId;\\n    //     }\\n    //     // TODO should it fails if different sponsor added reward before\\n\\n    //     // TODO rewardId association with the actual rewards // probably contract address holding the reward\\n    //     emit RewardSetup(location, sponsor, rewardId);\\n    // }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // EXIT / WITHDRAWALS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function exitFor(address owner, uint256 location) external {\\n        Planet storage planet = _getPlanet(location);\\n        require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n        require(planet.exitTime == 0, \\\"EXITING_ALREADY\\\"); // if you own the planet again, you ll need to first withdraw\\n        planet.exitTime = uint32(block.timestamp);\\n        emit PlanetExit(owner, location);\\n    }\\n\\n    function fetchAndWithdrawFor(address owner, uint256[] calldata locations) external {\\n        uint256 addedStake = 0;\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            if (_hasJustExited(planet.exitTime)) {\\n                require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n                addedStake += _setPlanetAfterExitWithoutUpdatingStake(locations[i], owner, planet, address(0), 0); // no need of event as exitTime passed basically mean owner zero and spaceships zero\\n            }\\n        }\\n        uint256 newStake = _stakeReadyToBeWithdrawn[owner] + addedStake;\\n        _withdrawAll(owner, newStake);\\n    }\\n\\n    function balanceToWithdraw(address owner) external view returns (uint256) {\\n        return _stakeReadyToBeWithdrawn[owner];\\n    }\\n\\n    function withdrawFor(address owner) external {\\n        uint256 amount = _stakeReadyToBeWithdrawn[owner];\\n        _withdrawAll(owner, amount);\\n    }\\n\\n    function _withdrawAll(address owner, uint256 amount) internal {\\n        _updateStake(owner, 0);\\n        require(_stakingToken.transfer(owner, amount), \\\"FAILED_TRANSFER\\\"); // TODO FundManager\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    struct FleetResolution {\\n        uint256 from;\\n        uint256 to;\\n        uint256 distance;\\n        bool gift;\\n        address specific;\\n        bytes32 secret;\\n        address fleetSender;\\n        address operator;\\n    }\\n\\n    function resolveFleet(uint256 fleetId, FleetResolution calldata resolution) external {\\n         require(\\n            uint256(keccak256(\\n                abi.encodePacked(\\n                    keccak256(abi.encodePacked(resolution.secret, resolution.to, resolution.gift, resolution.specific)),\\n                    resolution.from, resolution.fleetSender, resolution.operator\\n                )\\n            )) == fleetId,\\n            \\\"INVALID_FLEET_DATA_OR_SECRET\\\"\\n        );\\n        _resolveFleet(fleetId, resolution);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n\\n    struct FleetLaunch {\\n        address fleetSender;\\n        address fleetOwner;\\n        uint256 from;\\n        uint32 quantity;\\n        bytes32 toHash;\\n    }\\n\\n    function send(\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external {\\n        address sender = _msgSender();\\n        uint256 fleetId = uint256(keccak256(abi.encodePacked(toHash, from, sender, sender)));\\n        _sendFor(fleetId, sender, FleetLaunch({\\n            fleetSender: sender,\\n            fleetOwner: sender,\\n            from: from,\\n            quantity: quantity,\\n            toHash: toHash\\n        }));\\n    }\\n\\n    function sendFor(FleetLaunch calldata launch) external { //  bytes calldata fleetSignature // TODO for fleetOwner's signature ?\\n\\n        address operator = _msgSender();\\n        if (operator != launch.fleetSender) {\\n            require(_operators[launch.fleetSender][operator], \\\"NOT_AUTHORIZED_TO_SEND\\\");\\n        }\\n        uint256 fleetId = uint256(keccak256(abi.encodePacked(launch.toHash, launch.from, launch.fleetSender, operator)));\\n\\n        if (launch.fleetOwner != launch.fleetSender && launch.fleetOwner != operator) {\\n            // TODO use signature from fleetOwner instead?\\n            require(_operators[launch.fleetOwner][operator], \\\"NOT_AUTHORIZED_TO_FLEET\\\");\\n        }\\n\\n        _sendFor(fleetId, operator, launch);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function getFleet(uint256 fleetId, uint256 from)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint32 launchTime,\\n            uint32 quantity,\\n            uint64 flyingAtLaunch, // can be more than quantity if multiple fleet were launched around the same time from the same planet\\n            uint64 destroyedAtLaunch\\n        )\\n    {\\n        launchTime = _fleets[fleetId].launchTime;\\n        quantity = _fleets[fleetId].quantity;\\n        owner = _fleets[fleetId].owner;\\n\\n        uint256 timeSlot = launchTime / (_frontrunningDelay / 2);\\n        destroyedAtLaunch = _inFlight[from][timeSlot].destroyed;\\n        flyingAtLaunch = _inFlight[from][timeSlot].flying;\\n    }\\n\\n    function getGeneisHash() external view returns (bytes32) {\\n        return _genesis;\\n    }\\n\\n    struct PlanetStats {\\n        int8 subX;\\n        int8 subY;\\n        uint16 stake;\\n        uint16 production;\\n        uint16 attack;\\n        uint16 defense;\\n        uint16 speed;\\n        uint16 natives;\\n    }\\n\\n    struct ExternalPlanet {\\n        address owner;\\n        uint32 exitTime;\\n        uint32 numSpaceships;\\n        uint32 lastUpdated;\\n        bool active;\\n        uint256 reward;\\n    }\\n\\n    function getPlanet(uint256 location) external view returns (ExternalPlanet memory state, PlanetStats memory stats) {\\n        Planet storage planet = _getPlanet(location);\\n        (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n        state = ExternalPlanet({\\n            owner: planet.owner,\\n            exitTime: planet.exitTime,\\n            numSpaceships: numSpaceships,\\n            lastUpdated: planet.lastUpdated,\\n            active: active,\\n            reward: _rewards[location]\\n        });\\n        stats = _getPlanetStats(location);\\n    }\\n\\n    function getPlanetStates(uint256[] calldata locations)\\n        external\\n        view\\n        returns (ExternalPlanet[] memory planetStates, Discovered memory discovered)\\n    {\\n        planetStates = new ExternalPlanet[](locations.length);\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            (bool active, uint32 numSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n            planetStates[i] = ExternalPlanet({\\n                owner: planet.owner,\\n                exitTime: planet.exitTime,\\n                numSpaceships: numSpaceships,\\n                lastUpdated: planet.lastUpdated,\\n                active: active,\\n                reward: _rewards[locations[i]]\\n            });\\n        }\\n        discovered = _discovered;\\n    }\\n\\n    function getDiscovered() external view returns (Discovered memory) {\\n        return _discovered;\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // ERC721 : // TODO\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        address sender = _msgSender();\\n        _operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // INTERNALS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    // function _actualiseExit(uint256 location) internal {\\n    //     Planet storage planet = _getPlanet(location);\\n    //     if (planet.exitTime > 0 && block.timestamp > planet.exitTime + _exitDuration) {\\n    //         uint16 stake = _stake(location);\\n    //         address owner = planet.owner;\\n    //         planet.exitTime = 0;\\n    //         planet.owner = address(0); // This is fine as long as _actualiseExit is called on every move\\n    //         planet.numSpaceships = 0; // This is fine as long as _actualiseExit is called on every move\\n    //         planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\\n    //         _stakeReadyToBeWithdrawn[owner] += stake * DECIMALS_18;\\n    //     }\\n    // }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _acquire(\\n        address sender,\\n        uint256 stake,\\n        uint256 location\\n    ) internal {\\n        // console.logBytes32(bytes32(location));\\n        bytes32 data = _planetData(location);\\n        require(stake == uint256(_stake(data)) * (DECIMALS_18), \\\"INVALID_AMOUNT\\\");\\n\\n        uint32 numSpaceships = _handleSpaceships(sender, location, data);\\n        _handleDiscovery(location);\\n        emit PlanetStake(sender, location, numSpaceships, stake);\\n    }\\n\\n    function _handleSpaceships(\\n        address sender,\\n        uint256 location,\\n        bytes32 data\\n    ) internal returns (uint32) {\\n        Planet storage planet = _getPlanet(location);\\n        Planet memory mplanet = planet;\\n\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            mplanet.numSpaceships,\\n            mplanet.lastUpdated,\\n            _production(data)\\n        );\\n\\n        bool justExited;\\n        uint32 defense;\\n        if (mplanet.lastUpdated == 0) {\\n            defense = _natives(data);\\n        } else {\\n            if (mplanet.exitTime != 0) {\\n                require(_hasJustExited(mplanet.exitTime), \\\"STILL_EXITING\\\");\\n                justExited = true;\\n            } else {\\n                require(!active, \\\"STILL_ACTIVE\\\");\\n\\n                // Do not allow staking over occupied planets\\n                require(mplanet.owner == sender || currentNumSpaceships == 0, \\\"OCCUPIED\\\");\\n                // used to be the following (but this gave too many cons to send spaceships to non-active planets):\\n                // if (mplanet.owner != sender) {\\n                //     defense = currentNumSpaceships;\\n                // } else {\\n                //     defense = 0;\\n                // }\\n            }\\n        }\\n        if (justExited) {\\n            currentNumSpaceships = _acquireNumSpaceships;\\n            _setPlanetAfterExit(\\n                location,\\n                mplanet.owner,\\n                planet,\\n                sender,\\n                _setActiveNumSpaceships(true, currentNumSpaceships)\\n            );\\n        } else {\\n            planet.owner = sender;\\n            if (defense != 0) {\\n                uint32 attackerLoss;\\n                if (block.timestamp > COMBAT_RULE_SWITCH_TIME) {\\n                    (attackerLoss, ) = _computeFight(_acquireNumSpaceships, defense, 10000, _defense(data));\\n                } else {\\n                    (attackerLoss, ) = _old_computeFight(_acquireNumSpaceships, defense, 10000, _defense(data));\\n                }\\n\\n                // attacker alwasy win as defense (and stats.native) is restricted to 3500\\n                // (attackerLoss: 0, defenderLoss: 0) would mean defense was zero\\n                require(attackerLoss < _acquireNumSpaceships, \\\"FAILED_CAPTURED\\\");\\n                currentNumSpaceships = _acquireNumSpaceships - attackerLoss;\\n            } else {\\n                currentNumSpaceships += _acquireNumSpaceships;\\n            }\\n\\n            // planet.exitTime = 0; // should not be needed : // TODO actualiseExit\\n            planet.numSpaceships = _setActiveNumSpaceships(true, currentNumSpaceships);\\n            planet.lastUpdated = uint32(block.timestamp);\\n        }\\n        return currentNumSpaceships;\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _handleDiscovery(uint256 location) internal {\\n        Discovered memory discovered = _discovered;\\n\\n        int256 x = int256(int128(int256(location & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\\n        int256 y = int256(int128(int256(location >> 128)));\\n\\n        bool changes = false;\\n        if (x < 0) {\\n            require(-x <= int256(uint256(discovered.minX)), \\\"NOT_REACHABLE_YET_MINX\\\");\\n            x = -x + EXPANSION;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minX)) < x) {\\n                discovered.minX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        } else {\\n            require(x <= int256(uint256(discovered.maxX)), \\\"NOT_REACHABLE_YET_MAXX\\\");\\n            x = x + EXPANSION;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.maxX < uint32(uint256(x))) {\\n                discovered.maxX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        }\\n\\n        if (y < 0) {\\n            require(-y <= int256(uint256(discovered.minY)), \\\"NOT_REACHABLE_YET_MINY\\\");\\n            y = -y + EXPANSION;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minY)) < y) {\\n                discovered.minY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        } else {\\n            require(y <= int256(uint256(discovered.maxY)), \\\"NOT_REACHABLE_YET_MAXY\\\");\\n            y = y + EXPANSION;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.maxY)) < y) {\\n                discovered.maxY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        }\\n        if (changes) {\\n            _discovered = discovered;\\n        }\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // EXITS / WITHDRAWALS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _hasJustExited(uint32 exitTime) internal view returns (bool) {\\n        return exitTime > 0 && block.timestamp > exitTime + _exitDuration;\\n    }\\n\\n    function _setPlanetAfterExit(\\n        uint256 location,\\n        address owner,\\n        Planet storage planet,\\n        address newOwner,\\n        uint32 spaceshipsData\\n    ) internal {\\n        uint256 addedStake = _setPlanetAfterExitWithoutUpdatingStake(location, owner, planet, newOwner, spaceshipsData);\\n        _updateStake(owner, _stakeReadyToBeWithdrawn[owner] + addedStake);\\n    }\\n\\n    function _updateStake(address owner, uint256 newStake) internal {\\n        _stakeReadyToBeWithdrawn[owner] = newStake;\\n        emit StakeToWithdraw(owner, newStake);\\n    }\\n\\n    function _setPlanetAfterExitWithoutUpdatingStake(\\n        uint256 location,\\n        address owner,\\n        Planet storage planet,\\n        address newOwner,\\n        uint32 spaceshipsData\\n    ) internal returns (uint256) {\\n        bytes32 data = _planetData(location);\\n        uint256 stake = uint256(_stake(data)) * (DECIMALS_18);\\n        emit ExitComplete(owner, location, stake);\\n\\n        // --------------------------------------------------------\\n        // Extra Reward was added\\n        // --------------------------------------------------------\\n        uint256 rewardId = _rewards[location];\\n        if (rewardId != 0) {\\n            _rewardsToWithdraw[owner][rewardId] = true; // rewardId would contains the package. maybe this could be handled by an external contract\\n            _rewards[location] = 0; // reset / if you had reward to a planet in he process of exiting, you are adding the reward to the player exiting unless _setPlanetAfterExit is called first\\n            emit RewardToWithdraw(owner, location, rewardId);\\n        }\\n        // --------------------------------------------------------\\n\\n        planet.exitTime = 0;\\n        planet.owner = newOwner; // This is fine as long as _actualiseExit is called on every move\\n        planet.lastUpdated = uint32(block.timestamp); // This is fine as long as _actualiseExit is called on every move\\n        planet.numSpaceships = spaceshipsData;\\n        return stake;\\n    }\\n\\n    /*\\n    uint256 newStake = _stakeReadyToBeWithdrawn[owner] + stake * DECIMALS_18;\\n    _stakeReadyToBeWithdrawn[owner] = newStake;\\n    emit StakeToWithdraw(owner, newStake);\\n    */\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _sendFor(uint256 fleetId, address operator, FleetLaunch memory launch) internal {\\n        Planet storage planet = _getPlanet(launch.from);\\n\\n        require(planet.exitTime == 0, \\\"PLANET_EXIT\\\");\\n        require(launch.fleetSender == planet.owner, \\\"NOT_OWNER\\\");\\n\\n        bytes32 data = _planetData(launch.from);\\n        uint16 production = _production(data);\\n\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            planet.numSpaceships,\\n            planet.lastUpdated,\\n            production\\n        );\\n        require(currentNumSpaceships >= launch.quantity, \\\"SPACESHIPS_NOT_ENOUGH\\\");\\n\\n        (uint32 launchTime, uint32 numSpaceships) = _computeSpaceshipBeforeSending(currentNumSpaceships, active, launch.from, launch.quantity);\\n\\n\\n        _fleets[fleetId] = Fleet({launchTime: launchTime, owner: launch.fleetOwner, quantity: launch.quantity});\\n\\n        emit FleetSent(launch.fleetSender, launch.fleetOwner, launch.from, operator, fleetId, launch.quantity, numSpaceships);\\n    }\\n\\n    function _computeSpaceshipBeforeSending(\\n        uint32 currentNumSpaceships,\\n        bool active,\\n        uint256 from,\\n        uint32 quantity\\n    ) internal returns( uint32 launchTime, uint32 numSpaceships) {\\n        Planet storage planet = _getPlanet(from);\\n         // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // record flying fleets (to prevent front-running, see resolution)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        uint64 flying = _inFlight[from][timeSlot].flying;\\n        flying = flying + quantity;\\n        require(flying >= quantity, \\\"OVERFLOW\\\"); // unlikely to ever happen, would need a hug amount of spaceships to be received and each in turn being sent\\n        _inFlight[from][timeSlot].flying = flying;\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n        launchTime = uint32(block.timestamp); // TODO allow delay : launchTime in future\\n        numSpaceships = currentNumSpaceships - quantity;\\n        planet.numSpaceships = _setActiveNumSpaceships(active, numSpaceships);\\n        planet.lastUpdated = launchTime;\\n\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    struct FleetResult {\\n        uint32 inFlightPlanetLoss;\\n        uint32 attackerLoss;\\n        uint32 defenderLoss;\\n        bool won;\\n        uint32 numSpaceships;\\n    }\\n\\n    function _resolveFleet(uint256 fleetId, FleetResolution memory resolution) internal {\\n        Fleet memory fleet = _fleets[fleetId];\\n        (uint32 quantity, uint32 inFlightFleetLoss) = _checkFleetAndComputeQuantityLeft(\\n            fleet,\\n            resolution\\n        );\\n        Planet memory toPlanet = _getPlanet(resolution.to);\\n        _resolveAndEmit(fleetId, toPlanet, _hasJustExited(toPlanet.exitTime) ? address(0) : toPlanet.owner, fleet, resolution, quantity, inFlightFleetLoss);\\n    }\\n\\n    function _resolveAndEmit(uint256 fleetId, Planet memory toPlanet, address destinationOwner, Fleet memory fleet, FleetResolution memory resolution, uint32 quantity, uint32 inFlightFleetLoss) internal {\\n        (bool gifting, bool taxed) = _checkGifting(fleet.owner, resolution, toPlanet, fleet.launchTime); // TODO fleet.owner or sender or origin (or seller) ?\\n        FleetResult memory result = _performResolution(fleet, resolution.from, toPlanet, resolution.to, gifting, taxed, quantity);\\n         emit_fleet_arrived(\\n            fleet.owner,\\n            fleetId,\\n            destinationOwner,\\n            resolution.to,\\n            gifting,\\n            result,\\n            inFlightFleetLoss\\n        );\\n        _fleets[fleetId].quantity = 0; // TODO reset all to get gas refund? // TODO ensure frontend can still easily check fleet status\\n    }\\n\\n\\n    function _checkGifting(address sender, FleetResolution memory resolution, Planet memory toPlanet, uint256 fleetLaunchTime) internal returns(bool gifting, bool taxed) {\\n        if (toPlanet.owner == address(0)) {\\n            // destination has no owner : this is an attack\\n            return (false, false);\\n        }\\n        if (toPlanet.owner == sender) {\\n            // destination is sender: this is a non-taxed gift\\n            return (true, false);\\n        }\\n\\n        if (resolution.gift) {\\n            // intent was gift\\n            if (resolution.specific == address(0) || resolution.specific == toPlanet.owner) {\\n                // and it was for anyone or specific destination owner that is the same as the current one\\n\\n                (, uint96 joinTime) = allianceRegistry.havePlayersAnAllianceInCommon(sender, toPlanet.owner, fleetLaunchTime);\\n                return (true, joinTime == 0 || joinTime > fleetLaunchTime);\\n            }\\n\\n            if (resolution.specific == address(1)) {\\n                // or the specific specify any common alliances (1)\\n\\n                (, uint96 joinTime) = allianceRegistry.havePlayersAnAllianceInCommon(sender, toPlanet.owner, fleetLaunchTime);\\n\\n                // -------------------------------------------------------------------------------------------------------------------------------------\\n                // TODO remove  exception to fix bug for player 0xb006c644258e01b437eff06e16e56e938a239712 and its sending gifts\\n                // -------------------------------------------------------------------------------------------------------------------------------------\\n                if (\\n                    fleetLaunchTime < 1640165416 &&\\n                    joinTime == 0 &&\\n                    sender == 0xB006c644258e01b437eFF06e16E56e938a239712 &&\\n                    (toPlanet.owner == 0x9dab5A6393eEf78eB36cd84bB9Bbb055189429A5 || toPlanet.owner == 0xF8b109aF18cfA614Bef1C2899e522d77b3C64c14))\\n                {\\n                    joinTime = uint96(block.timestamp);\\n                }\\n                // -------------------------------------------------------------------------------------------------------------------------------------\\n\\n                return (joinTime > 0, joinTime > fleetLaunchTime);\\n            }\\n\\n            if (uint160(resolution.specific) > 1) {\\n                // or a specific one that matches\\n\\n                (uint96 joinTimeToSpecific,) = allianceRegistry.getAllianceData(toPlanet.owner, IAlliance(resolution.specific));\\n\\n                if (joinTimeToSpecific > 0) {\\n                    (, uint96 joinTime) = allianceRegistry.havePlayersAnAllianceInCommon(sender, toPlanet.owner, fleetLaunchTime);\\n                    return (true, joinTime == 0 || joinTime > fleetLaunchTime);\\n                }\\n            }\\n        } else {\\n            // intent was attack\\n            if (resolution.specific == address(1)) {\\n                // and the attack was on any non-allies\\n\\n                // make it a gift if the destination owner is actually an ally\\n                (, uint96 joinTime) = allianceRegistry.havePlayersAnAllianceInCommon(sender, toPlanet.owner, fleetLaunchTime);\\n                return (joinTime > 0, joinTime > fleetLaunchTime);\\n            }\\n\\n            if (uint160(resolution.specific) > 1 && resolution.specific != toPlanet.owner) {\\n                // but specific not matching current owner\\n\\n                (uint96 joinTimeToSpecific,) = allianceRegistry.getAllianceData(toPlanet.owner, IAlliance(resolution.specific));\\n\\n                // make it a gift if the destination is not matching the specific alliance (or owner, in which case since it is not an alliance, it will also not match)\\n                if (joinTimeToSpecific == 0) {\\n                    (, uint96 joinTime) = allianceRegistry.havePlayersAnAllianceInCommon(sender, toPlanet.owner, fleetLaunchTime);\\n                    return (true, joinTime == 0 || joinTime > fleetLaunchTime);\\n                }\\n            }\\n\\n        }\\n    }\\n\\n    function _performResolution(\\n        Fleet memory fleet,\\n        uint256 from,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        bool gifting,\\n        bool taxed,\\n        uint32 quantity\\n    ) internal returns (FleetResult memory result) {\\n        if (gifting) {\\n            return _performReinforcement(fleet.owner, toPlanet, to, quantity, taxed, fleet.launchTime);\\n        } else {\\n            return _performAttack(fleet.owner, fleet.launchTime, from, toPlanet, to, quantity);\\n        }\\n    }\\n\\n    function _checkFleetAndComputeQuantityLeft(\\n        Fleet memory fleet,\\n        FleetResolution memory resolution\\n    ) internal returns (uint32 quantity, uint32 inFlightFleetLoss) {\\n\\n        quantity = fleet.quantity;\\n        require(quantity > 0, \\\"FLEET_DO_NOT_EXIST\\\");\\n\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // check if fleet was attacked while departing (used to prevent front-running, see fleet sending)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        quantity = _fleet_flying_at_origin(quantity, resolution.from, fleet.launchTime);\\n        inFlightFleetLoss = fleet.quantity - quantity;\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n        _checkDistance(resolution.distance, resolution.from, resolution.to);\\n        _checkTime(resolution.distance, resolution.from, fleet.launchTime);\\n    }\\n\\n    function emit_fleet_arrived(\\n        address fleetOwner,\\n        uint256 fleetID,\\n        address toOwner,\\n        uint256 to,\\n        bool gift,\\n        FleetResult memory result,\\n        uint32 inFlightFleetLoss\\n    ) internal {\\n        emit FleetArrived(\\n            fleetID,\\n            fleetOwner,\\n            toOwner,\\n            to,\\n            gift,\\n            result.attackerLoss,\\n            result.defenderLoss,\\n            inFlightFleetLoss,\\n            result.inFlightPlanetLoss,\\n            result.won,\\n            result.numSpaceships\\n        );\\n    }\\n\\n    function _fleet_flying_at_origin(\\n        uint32 quantity,\\n        uint256 from,\\n        uint32 launchTime\\n    ) internal returns (uint32) {\\n        uint256 timeSlot = launchTime / (_frontrunningDelay / 2);\\n        uint64 destroyed = _inFlight[from][timeSlot].destroyed;\\n        if (destroyed < quantity) {\\n            quantity -= uint32(destroyed);\\n            _inFlight[from][timeSlot].destroyed = 0;\\n        } else {\\n            quantity = 0;\\n            _inFlight[from][timeSlot].destroyed = destroyed - quantity;\\n        }\\n        return quantity;\\n    }\\n\\n    function _performAttack(\\n        address attacker,\\n        uint32 launchTime,\\n        uint256 from,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint32 numAttack\\n    ) internal returns (FleetResult memory result) {\\n        if (toPlanet.lastUpdated == 0) {\\n            // Planet was never touched (previous attack could have failed to succeed attack on natives)\\n            bytes32 toPlanetData = _planetData(to);\\n            return _nativeAttack(attacker, launchTime, from, to, toPlanetData, numAttack);\\n        } else if (_hasJustExited(toPlanet.exitTime)) {\\n            return _fleetAfterExit(to, toPlanet.owner, _planets[to], attacker, numAttack);\\n        } else {\\n            bytes32 toPlanetData = _planetData(to);\\n            uint16 attack = _attack(_planetData(from));\\n            uint16 defense = _defense(toPlanetData);\\n            uint16 production = _production(toPlanetData);\\n            return _actualAttack(attacker, launchTime, attack, defense, toPlanet, to, production, numAttack);\\n        }\\n    }\\n\\n    function _fleetAfterExit(\\n        uint256 to,\\n        address owner,\\n        Planet storage planet,\\n        address newOwner,\\n        uint32 numSpaceshipsArrived\\n    ) internal returns (FleetResult memory result) {\\n        _setPlanetAfterExit(to, owner, planet, numSpaceshipsArrived > 0 ? newOwner : address(0), numSpaceshipsArrived);\\n        result.numSpaceships = numSpaceshipsArrived;\\n        result.won = numSpaceshipsArrived > 0; // TODO does it make sense if reinforcement ?\\n    }\\n\\n    function _nativeAttack(\\n        address attacker,\\n        uint32 launchTime,\\n        uint256 from,\\n        uint256 to,\\n        bytes32 toData,\\n        uint32 numAttack\\n    ) internal returns (FleetResult memory result) {\\n        uint16 attack = _attack(_planetData(from));\\n        uint16 defense = _defense(toData);\\n        uint16 natives = _natives(toData);\\n        uint32 attackerLoss;\\n        uint32 defenderLoss;\\n        if (launchTime > COMBAT_RULE_SWITCH_TIME) {\\n            (attackerLoss, defenderLoss) = _computeFight(numAttack, natives, attack, defense);\\n        } else {\\n            (attackerLoss, defenderLoss) = _old_computeFight(numAttack, natives, attack, defense);\\n        }\\n        result.attackerLoss = attackerLoss;\\n        if (defenderLoss == natives && numAttack > attackerLoss) {\\n            // (attackerLoss: 0, defenderLoss: 0) means that numAttack was zero as natives cannot be zero\\n            result.numSpaceships = numAttack - attackerLoss;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(false, result.numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n            _planets[to].owner = attacker;\\n            result.defenderLoss = defenderLoss;\\n            result.won = true;\\n        }\\n    }\\n\\n    function _actualAttack(\\n        address attacker,\\n        uint32 launchTime,\\n        uint16 attack,\\n        uint16 defense,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint16 production,\\n        uint32 numAttack\\n    ) internal returns (FleetResult memory result) {\\n        PreCombatState memory state = _getPlanetPreCombatState(toPlanet, to, production);\\n\\n        if (state.numDefense == 0 && numAttack > 0) {\\n            _planets[to].owner = attacker;\\n            _planets[to].exitTime = 0;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, numAttack);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n            result.won = true;\\n            result.numSpaceships = numAttack;\\n            return result;\\n        }\\n\\n        return _completeCombatResult(state, attacker, launchTime, to, numAttack, attack, defense);\\n    }\\n\\n    struct PreCombatState {\\n        bool active;\\n        uint32 currentNumSpaceships;\\n        uint32 numDefense;\\n        uint64 flying1;\\n        uint64 destroyed1;\\n        uint64 flying2;\\n        uint64 destroyed2;\\n    }\\n\\n    function _getPlanetPreCombatState(\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint16 production\\n    ) internal view returns (PreCombatState memory state) {\\n        (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n            toPlanet.numSpaceships,\\n            toPlanet.lastUpdated,\\n            production\\n        );\\n\\n        (\\n            uint32 numDefense,\\n            uint64 flying1,\\n            uint64 destroyed1,\\n            uint64 flying2,\\n            uint64 destroyed2\\n        ) = computeDefenseWithInFlightFleets(currentNumSpaceships, to);\\n        state.active = active;\\n        state.currentNumSpaceships = currentNumSpaceships;\\n        state.numDefense = numDefense;\\n        state.flying1 = flying1;\\n        state.destroyed1 = destroyed1;\\n        state.flying2 = flying2;\\n        state.destroyed2 = destroyed2;\\n    }\\n\\n    function computeDefenseWithInFlightFleets(uint32 numSpaceships, uint256 to)\\n        internal\\n        view\\n        returns (\\n            uint32 numDefense,\\n            uint64 flying1,\\n            uint64 destroyed1,\\n            uint64 flying2,\\n            uint64 destroyed2\\n        )\\n    {\\n        numDefense = numSpaceships;\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        flying1 = _inFlight[to][timeSlot - 1].flying;\\n        destroyed1 = _inFlight[to][timeSlot - 1].flying;\\n        flying2 = _inFlight[to][timeSlot].flying;\\n        destroyed2 = _inFlight[to][timeSlot].destroyed;\\n        numDefense = uint32(Math.min(flying1 + flying2 + numDefense, 2**32 - 1));\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n    }\\n\\n    function _completeCombatResult(\\n        PreCombatState memory state,\\n        address attacker,\\n        uint32 launchTime,\\n        uint256 to,\\n        uint32 numAttack,\\n        uint16 attack,\\n        uint16 defense\\n    ) internal returns (FleetResult memory result) {\\n        uint32 attackerLoss;\\n        uint32 defenderLoss;\\n        if (launchTime > COMBAT_RULE_SWITCH_TIME) {\\n            (attackerLoss, defenderLoss) = _computeFight(numAttack, state.numDefense, attack, defense);\\n        } else {\\n            (attackerLoss, defenderLoss) = _old_computeFight(numAttack, state.numDefense, attack, defense);\\n        }\\n        result.attackerLoss = attackerLoss;\\n        result.defenderLoss = defenderLoss;\\n\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        if (result.defenderLoss > state.currentNumSpaceships) {\\n            result.inFlightPlanetLoss = defenderLoss - state.currentNumSpaceships;\\n            result.defenderLoss = state.currentNumSpaceships;\\n            if (state.flying1 >= result.inFlightPlanetLoss) {\\n                state.flying1 -= result.inFlightPlanetLoss;\\n                state.destroyed1 += result.inFlightPlanetLoss;\\n            } else {\\n                state.destroyed1 += state.flying1;\\n                uint64 extra = (result.inFlightPlanetLoss - state.flying1);\\n                if (state.flying2 >= extra) {\\n                    state.flying2 -= extra;\\n                    state.destroyed2 += extra;\\n                } else {\\n                    state.destroyed2 += state.flying2;\\n                    state.flying2 = 0; // should never reach minus but let simply set it to zero\\n                }\\n                state.flying1 = 0;\\n            }\\n            _inFlight[to][block.timestamp / (_frontrunningDelay / 2) - 1].flying = state.flying1;\\n            _inFlight[to][block.timestamp / (_frontrunningDelay / 2) - 1].destroyed = state.destroyed1;\\n            _inFlight[to][block.timestamp / (_frontrunningDelay / 2)].flying = state.flying2;\\n            _inFlight[to][block.timestamp / (_frontrunningDelay / 2)].destroyed = state.destroyed2;\\n        }\\n        // ----------------------------------------------------------------------------------------------------------------------------------------------------------\\n        // (attackerLoss: 0, defenderLoss: 0) could either mean attack was zero or defense was zero :\\n        if (numAttack > 0 && result.defenderLoss == state.currentNumSpaceships) {\\n            result.numSpaceships = numAttack - attackerLoss;\\n            result.won = true;\\n            _planets[to].owner = attacker;\\n            _planets[to].exitTime = 0;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, result.numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n        } else if (result.attackerLoss == numAttack) {\\n            // always true as if attack won it will be going in the \\\"if\\\" above\\n            result.numSpaceships = state.currentNumSpaceships - defenderLoss;\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(state.active, result.numSpaceships);\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n        } else {\\n            assert(false); // should not happen\\n        }\\n    }\\n\\n    function _performReinforcement(\\n        address sender,\\n        Planet memory toPlanet,\\n        uint256 to,\\n        uint32 quantity,\\n        bool taxed,\\n        uint32 launchTime\\n    ) internal returns (FleetResult memory result) {\\n        if (_hasJustExited(toPlanet.exitTime)) {\\n            address newOwner = toPlanet.owner;\\n            if (newOwner == address(0)) {\\n                newOwner = sender;\\n            }\\n            return _fleetAfterExit(to, toPlanet.owner, _planets[to], quantity > 0 ? newOwner : address(0), quantity);\\n        } else {\\n            if (taxed) {\\n                quantity = uint32(uint256(quantity) - (uint256(quantity) * GIFT_TAX_PER_10000) / 10000);\\n            }\\n            bytes32 toPlanetData = _planetData(to);\\n            uint16 production = _production(toPlanetData);\\n            (bool active, uint32 currentNumSpaceships) = _getCurrentNumSpaceships(\\n                toPlanet.numSpaceships,\\n                toPlanet.lastUpdated,\\n                production\\n            );\\n            uint256 newNumSpaceships = currentNumSpaceships + quantity;\\n            if (newNumSpaceships >= ACTIVE_MASK) {\\n                newNumSpaceships = ACTIVE_MASK - 1;\\n            }\\n            _planets[to].lastUpdated = uint32(block.timestamp);\\n            _planets[to].numSpaceships = _setActiveNumSpaceships(active, uint32(newNumSpaceships));\\n            result.numSpaceships = uint32(newNumSpaceships);\\n        }\\n    }\\n\\n    function _computeFight(\\n        uint256 numAttack,\\n        uint256 numDefense,\\n        uint256 attack,\\n        uint256 defense\\n    ) internal view returns (uint32 attackerLoss, uint32 defenderLoss) {\\n        if (numAttack == 0 || numDefense == 0) {\\n            return (0, 0); // this edge case need to be considered, as the result of this function cannot tell from it whos is winning here\\n        }\\n\\n        uint256 attackFactor = numAttack * ((1000000 - _fleetSizeFactor6) + (_fleetSizeFactor6 * numAttack / numDefense));\\n        uint256 attackDamage = (attackFactor * attack) / defense / 1000000;\\n\\n        if (numDefense > attackDamage) {\\n            // attack fails\\n            attackerLoss = uint32(numAttack); // all attack destroyed\\n            defenderLoss = uint32(attackDamage); // 1 spaceship will be left at least as attackDamage < numDefense\\n        } else {\\n            // attack succeed\\n            uint256 defenseFactor = numDefense * ((1000000 - _fleetSizeFactor6) + (_fleetSizeFactor6 * numDefense / numAttack));\\n            uint256 defenseDamage = uint32((defenseFactor * defense) / attack / 1000000);\\n\\n            if (defenseDamage >= numAttack) {\\n                defenseDamage = numAttack - 1; // ensure 1 spaceship left\\n            }\\n\\n            attackerLoss = uint32(defenseDamage);\\n            defenderLoss = uint32(numDefense); // all defense destroyed\\n        }\\n    }\\n\\n    function _old_computeFight(\\n        uint256 numAttack,\\n        uint256 numDefense,\\n        uint256 attack,\\n        uint256 defense\\n    ) internal pure returns (uint32 attackerLoss, uint32 defenderLoss) {\\n        if (numAttack == 0 || numDefense == 0) {\\n            return (0, 0);\\n        }\\n        uint256 attackPower = (numAttack * attack);\\n        uint256 defensePower = (numDefense * defense);\\n\\n        uint256 numAttackRound = (numDefense * 100000000) / attackPower;\\n        if (numAttackRound * attackPower < (numDefense * 100000000)) {\\n            numAttackRound++;\\n        }\\n        uint256 numDefenseRound = (numAttack * 100000000) / defensePower;\\n        if (numDefenseRound * defensePower < (numAttack * 100000000)) {\\n            numDefenseRound++;\\n        }\\n\\n        uint256 numRound = Math.min(numAttackRound, numDefenseRound);\\n        attackerLoss = uint32(Math.min((numRound * defensePower) / 100000000, numAttack));\\n        defenderLoss = uint32(Math.min((numRound * attackPower) / 100000000, numDefense));\\n    }\\n\\n    function _checkDistance(\\n        uint256 distance,\\n        uint256 from,\\n        uint256 to\\n    ) internal view {\\n        (int8 fromSubX, int8 fromSubY) = _subLocation(_planetData(from));\\n        (int8 toSubX, int8 toSubY) = _subLocation(_planetData(to));\\n        // check input instead of compute sqrt\\n\\n        uint256 distanceSquared = uint256(int256( // check input instead of compute sqrt\\n            ((int128(int256(to & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + toSubX) -\\n                (int128(int256(from & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + fromSubX)) **\\n                2 +\\n                ((int128(int256(to >> 128)) * 4 + toSubY) - (int128(int256(from >> 128)) * 4 + fromSubY))**2\\n        ));\\n        require(distance**2 <= distanceSquared && distanceSquared < (distance + 1)**2, \\\"wrong distance\\\");\\n    }\\n\\n    function _checkTime(\\n        uint256 distance,\\n        uint256 from,\\n        uint32 launchTime\\n    ) internal view {\\n        uint256 reachTime = launchTime + (distance * (_timePerDistance * 10000)) / _speed(_planetData(from));\\n        require(block.timestamp >= reachTime, \\\"too early\\\");\\n        require(block.timestamp < reachTime + _resolveWindow, \\\"too late, your spaceships are lost in space\\\");\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // PLANET STATS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _planetData(uint256 location) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_genesis, location));\\n    }\\n\\n    function _subLocation(bytes32 data) internal pure returns (int8 subX, int8 subY) {\\n        subX = 1 - int8(data.value8Mod(0, 3));\\n        subY = 1 - int8(data.value8Mod(2, 3));\\n    }\\n\\n    // // 4,5,5,10,10,15,15, 20, 20, 30,30,40,40,80,80,100\\n    // bytes32 constant stakeRange = 0x000400050005000A000A000F000F00140014001E001E00280028005000500064;\\n\\n    // 6, 8, 10, 12, 14, 16, 18, 20, 20, 22, 24, 32, 40, 48, 56, 72\\n    bytes32 constant stakeRange = 0x00060008000A000C000E00100012001400140016001800200028003000380048;\\n\\n    function _stake(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // return data.normal16(4, 0x000400050005000A000A000F000F00140014001E001E00280028005000500064);\\n        uint8 productionIndex = data.normal8(12); // production affect the stake value\\n\\n        // TODO remove or decide otherwise:\\n        // uint16 offset = data.normal16(4, 0x0000000100010002000200030003000400040005000500060006000700070008);\\n        // uint16 stakeIndex = productionIndex + offset;\\n        // if (stakeIndex < 4) {\\n        //     stakeIndex = 0;\\n        // } else if (stakeIndex > 19) {\\n        //     stakeIndex = 15;\\n        // } else {\\n        //     stakeIndex -= 4;\\n        // }\\n        uint16 stakeIndex = productionIndex;\\n        return uint16(uint8(stakeRange[stakeIndex * 2 + 1])); // skip stakeIndex * 2 + 0 as it is always zero in stakeRange\\n    }\\n\\n    function _production(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // TODO TRY : 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4000,4400,4800,5400,6200,7200 ?\\n\\n        // 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4200,5400,6600,7800,9000,12000\\n        // 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0\\n        return data.normal16(12, 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0); // per hour\\n    }\\n\\n    function _attack(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(20) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _defense(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(28) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _speed(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 5005 + data.normal8(36) * 333; // 5,005 - 7,502.5 - 10,000\\n    }\\n\\n    function _natives(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 15000 + data.normal8(44) * 3000; // 15,000 - 37,500 - 60,000\\n    }\\n\\n    function _exists(bytes32 data) internal pure returns (bool) {\\n        return data.value8Mod(52, 16) == 1; // 16 => 36 so : 1 planet per 6 (=24 min unit) square\\n        // also:\\n        // 20000 average starting numSpaceships (or max?)\\n        // speed of min unit = 30 min ( 1 hour per square)\\n        // production : 20000 per 6 hours\\n        // exit : 3 days ? => 72 distance\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _getPlanet(uint256 location) internal view returns (Planet storage) {\\n        return _planets[location];\\n    }\\n\\n    function _getPlanetStats(uint256 location) internal view returns (PlanetStats memory) {\\n        bytes32 data = _planetData(location);\\n        require(_exists(data), \\\"no planet in this location\\\");\\n\\n        (int8 subX, int8 subY) = _subLocation(data);\\n        return\\n            PlanetStats({\\n                subX: subX,\\n                subY: subY,\\n                stake: _stake(data),\\n                production: _production(data),\\n                attack: _attack(data),\\n                defense: _defense(data),\\n                speed: _speed(data),\\n                natives: _natives(data)\\n            });\\n    }\\n\\n    function _getCurrentNumSpaceships(\\n        uint32 numSpaceshipsData,\\n        uint256 lastUpdated,\\n        uint16 production\\n    ) internal view returns (bool active, uint32 currentNumSpaceships) {\\n        (active, currentNumSpaceships) = _activeNumSpaceships(numSpaceshipsData);\\n\\n        uint256 maxIncrease = ACTIVE_MASK -1;\\n        uint256 timePassed = block.timestamp - lastUpdated;\\n        uint256 newSpaceships = currentNumSpaceships;\\n        if (_productionCapAsDuration > 0) {\\n            uint256 decrease = 0;\\n            uint256 cap = _acquireNumSpaceships + _productionCapAsDuration * uint256(production) / 1 hours;\\n            if (currentNumSpaceships > cap) {\\n                decrease = timePassed * 1800 / 3600; // 1800 per hours\\n                if (decrease > currentNumSpaceships - cap) {\\n                    decrease = currentNumSpaceships - cap;\\n                }\\n                maxIncrease = 0;\\n            } else {\\n                maxIncrease = cap - currentNumSpaceships;\\n            }\\n\\n            if (active) {\\n                uint256 increase = (timePassed * uint256(production) * _productionSpeedUp) / 1 hours;\\n                if (increase > maxIncrease) {\\n                    increase = maxIncrease;\\n                }\\n                newSpaceships += increase;\\n            }\\n\\n            if (decrease > newSpaceships) {\\n                newSpaceships = 0; // not possible\\n            } else {\\n                newSpaceships -= decrease;\\n            }\\n        } else if (active) {\\n            newSpaceships += (timePassed * uint256(production) * _productionSpeedUp) / 1 hours;\\n        }\\n\\n        if (newSpaceships >= ACTIVE_MASK) {\\n            newSpaceships = ACTIVE_MASK - 1;\\n        }\\n        currentNumSpaceships = uint32(newSpaceships);\\n\\n    }\\n\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n    // UTILS\\n    // --------------------------------------------------------------------------------------------------------------------------------------------------------------\\n\\n    function _activeNumSpaceships(uint32 numSpaceshipsData) internal pure returns (bool active, uint32 numSpaceships) {\\n        active = (numSpaceshipsData & ACTIVE_MASK) == ACTIVE_MASK;\\n        numSpaceships = numSpaceshipsData % (ACTIVE_MASK);\\n    }\\n\\n    function _setActiveNumSpaceships(bool active, uint32 numSpaceships) internal pure returns (uint32) {\\n        return uint32((active ? ACTIVE_MASK : 0) + numSpaceships);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n}\\n\",\"keccak256\":\"0x80e2e441a9ae10aa24d5cfa2ef60a3845f9cb7ee1db30466d7c1a49af3eaa699\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x6101e06040523480156200001257600080fd5b50604051620063da380380620063da83398101604081905262000035916200029a565b6000620000446004896200037a565b905063ffffffff88166200005a826004620003ac565b63ffffffff1614620000b25760405162461bcd60e51b815260206004820152601d60248201527f54494d455f5045525f444953545f4e4f545f444956495349424c455f34000000604482015260640160405180910390fd5b6001600160a01b03808d1660c0528b1660805260a08a905263ffffffff808a1660e05281811661010052878116610120528681166101405285811661016052848116610180528381166101a05282166101c0526200011a8c8c8c8c8c8c8c8c8c8c8c6200012c565b505050505050505050505050620003e7565b600062000146600080516020620063ba8339815191525490565b90506001600160a01b03811662000176576001600160a01b03600080516020620063ba833981519152556200018c565b336001600160a01b038216146200018c57600080fd5b60055463ffffffff1662000259576040805160808082018352601080835260208084018290528385018290526060938401829052600580546001600160801b0319166c100000001000000010000000101790819055855192835263ffffffff64010000000082048116928401929092526801000000000000000081048216838701526c010000000000000000000000009004169281019290925281018c905290517f3086e986d6b4ec35754cd5a19b964d1012b58b3584a51a321d0fb693ae4cfcd99160a0908290030190a15b505050505050505050505050565b6001600160a01b03811681146200027d57600080fd5b50565b805163ffffffff811681146200029557600080fd5b919050565b60008060008060008060008060008060006101608c8e031215620002bd57600080fd5b8b51620002ca8162000267565b60208d0151909b50620002dd8162000267565b60408d0151909a509850620002f560608d0162000280565b97506200030560808d0162000280565b96506200031560a08d0162000280565b95506200032560c08d0162000280565b94506200033560e08d0162000280565b9350620003466101008d0162000280565b9250620003576101208d0162000280565b9150620003686101408d0162000280565b90509295989b509295989b9093969950565b600063ffffffff80841680620003a057634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600063ffffffff80831681851681830481118215151615620003de57634e487b7160e01b600052601160045260246000fd5b02949350505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051615e3b6200057f60003960008181612fcb01528181612ffe0152818161307f01526130b2015260008181611dea0152611e1e0152600081816112c10152818161202a0152818161327f01528181614a1201528181614a9a01528181614b2701528181614ba80152614d7a015260008181611eff0152611f91015260008181611e570152818161262e015281816126bf0152818161270d01528181612754015281816127d3015261280401526000611b5101526000613617015260006136b901526000818161085a01528181610a4801528181610b780152611a720152600081816101d001528181611413015281816116de0152818161181801528181611b8b015281816133ac01528181613412015281816135be015281816140810152818161420a0152818161429801526143e20152600081816103db015281816138100152818161390b01528181613aa201528181613b6501528181613c6901528181613d870152613e490152615e3b6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063a22cb465116100cd578063c956083811610081578063e2e9b07911610066578063e2e9b07914610368578063ee5433931461037b578063f9c8974d146103d657600080fd5b8063c95608381461032c578063cf3ecf071461035557600080fd5b8063aba789f5116100b2578063aba789f51461026d578063afc823701461028e578063c5aaa0ae146102a157600080fd5b8063a22cb46514610247578063a4c0ed361461025a57600080fd5b80637ba423fb1161012457806388f3532b1161010957806388f3532b146101fe5780639b6be065146102115780639eca672c1461023457600080fd5b80637ba423fb146101bb5780637cef64d8146101ce57600080fd5b80630b9c522814610156578063112e68511461016b5780631b7c9c171461017e57806334efcb8e14610191575b600080fd5b610169610164366004614e87565b610415565b005b610169610179366004614eb9565b6104d7565b61016961018c366004614f06565b61057e565b6101a461019f366004614e87565b6106ee565b6040516101b2929190614fcf565b60405180910390f35b6101696101c93660046150ab565b610809565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016101b2565b61016961020c3660046150cd565b6108dc565b61022461021f366004615154565b610a3b565b60405190151581526020016101b2565b6101696102423660046151c7565b610add565b6101696102553660046151f2565b610b00565b61022461026836600461522b565b610b6b565b61028061027b3660046152cc565b610c03565b6040516101b292919061530e565b61016961029c3660046153e4565b610e13565b61031f604080516080810182526000808252602082018190529181018290526060810191909152506040805160808101825260055463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c010000000000000000000000009004909116606082015290565b6040516101b29190615410565b6101f061033a3660046151c7565b6001600160a01b031660009081526002602052604090205490565b610169610363366004615449565b610f48565b610169610376366004615461565b611170565b61038e6103893660046150ab565b611286565b604080516001600160a01b03909616865263ffffffff9485166020870152939092169284019290925267ffffffffffffffff918216606084015216608082015260a0016101b2565b6103fd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b2565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316336001600160a01b03161461049c5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b6000818152602081905260408082208290555182917fb9e622395e3bd0e793c5448e9c44434069fc36c8904b50ab65bca22b05d425e691a250565b6000336040805160208101859052908101869052606082811b6bffffffffffffffffffffffff191690820181905260748201529091506000906088016040516020818303038152906040528051906020012060001c905061057781836040518060a00160405280866001600160a01b03168152602001866001600160a01b031681526020018981526020018863ffffffff16815260200187815250611338565b5050505050565b60006105a87fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b0381166105e7576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556105fc565b336001600160a01b038216146105fc57600080fd5b60055463ffffffff166106e0576040805160808082018352601080835260208084018290528385018290526060938401829052600580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166c100000001000000010000000101790819055855192835263ffffffff64010000000082048116928401929092526801000000000000000081048216838701526c010000000000000000000000009004169281019290925281018c905290517f3086e986d6b4ec35754cd5a19b964d1012b58b3584a51a321d0fb693ae4cfcd99160a0908290030190a15b505050505050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915260008381526020819052604081208054909150600090819061078f90600160c01b900463ffffffff16611678565b6040805160c08101825286546001600160a01b038116825263ffffffff600160a01b8204811660208085019190915281861684860152600160e01b909204166060830152841515608083015260008b81526007909152919091205460a0820152965090925090506107ff86611697565b9350505050915091565b33610815818385611812565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401602060405180830381600087803b15801561089e57600080fd5b505af11580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d691906154b6565b50505050565b8160a082013560208301356108f760808501606086016154d3565b61090760a08601608087016151c7565b60405160200161094794939291909384526020840192909252151560f81b604083015260601b6bffffffffffffffffffffffff1916604182015260550190565b60408051601f198184030181529190528051602090910120823561097160e0850160c086016151c7565b610982610100860160e087016151c7565b6040805160208101959095528401929092526bffffffffffffffffffffffff19606091821b81168285015291901b1660748201526088016040516020818303038152906040528051906020012060001c14610a1f5760405162461bcd60e51b815260206004820152601c60248201527f494e56414c49445f464c4545545f444154415f4f525f534543524554000000006044820152606401610493565b610a3782610a3236849003840184615506565b611935565b5050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ab55760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610493565b6000610ac383850185614e87565b9050610ad0868683611812565b5060019695505050505050565b6001600160a01b038116600090815260026020526040902054610a378282611a28565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff19168615159081179091558151908152905184927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31928290030190a3505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610be55760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610493565b600080610bf4848601866153e4565b91509150610ad0828783611812565b604080516080810182526000808252602082018190529181018290526060818101929092528267ffffffffffffffff811115610c4157610c416154f0565b604051908082528060200260200182016040528015610ca157816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a08201528252600019909201910181610c5f5790505b50915060005b83811015610db5576000610cde868684818110610cc657610cc66155c2565b90506020020135600090815260208190526040902090565b80549091506000908190610cfe90600160c01b900463ffffffff16611678565b6040805160c08101825286546001600160a01b038116825263ffffffff600160a01b82048116602084015280851693830193909352600160e01b900490911660608201528215156080820152919350915060a08101600760008b8b89818110610d6957610d696155c2565b90506020020135815260200190815260200160002054815250868581518110610d9457610d946155c2565b60200260200101819052505050508080610dad906155ee565b915050610ca7565b50506040805160808101825260055463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c010000000000000000000000009004909116606082015290939092509050565b600081815260208190526040902080546001600160a01b03848116911614610e7d5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610493565b8054600160a01b900463ffffffff1615610ed95760405162461bcd60e51b815260206004820152600f60248201527f45584954494e475f414c524541445900000000000000000000000000000000006044820152606401610493565b80547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff16600160a01b4263ffffffff160217815560405182906001600160a01b038516907fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f90600090a3505050565b33610f5660208301836151c7565b6001600160a01b0316816001600160a01b031614610ff85760036000610f7f60208501856151c7565b6001600160a01b039081168252602080830193909352604091820160009081209185168152925290205460ff16610ff85760405162461bcd60e51b815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e44000000000000000000006044820152606401610493565b60006080830135604084013561101160208601866151c7565b6040805160208101949094528301919091526bffffffffffffffffffffffff19606091821b8116828401529084901b16607482015260880160408051601f198184030181529190528051602091820120915061106f908401846151c7565b6001600160a01b031661108860408501602086016151c7565b6001600160a01b0316141580156110c057506001600160a01b0382166110b460408501602086016151c7565b6001600160a01b031614155b1561115257600360006110d960408601602087016151c7565b6001600160a01b039081168252602080830193909352604091820160009081209186168152925290205460ff166111525760405162461bcd60e51b815260206004820152601760248201527f4e4f545f415554484f52495a45445f544f5f464c4545540000000000000000006044820152606401610493565b61116b818361116636879003870187615609565b611338565b505050565b6000805b82811015611255576000611193858584818110610cc657610cc66155c2565b80549091506111ae90600160a01b900463ffffffff16611b3a565b156112425780546001600160a01b0387811691161461120f5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610493565b611235858584818110611224576112246155c2565b905060200201358783600080611b85565b61123f908461569e565b92505b508061124d816155ee565b915050611174565b506001600160a01b03841660009081526002602052604081205461127a90839061569e565b90506105778582611a28565b6000828152600160205260408120546001600160a01b0381169163ffffffff600160a01b8304811692600160c01b9004169080806112e560027f00000000000000000000000000000000000000000000000000000000000000006156cc565b6112f59063ffffffff87166156cc565b6000978852600460209081526040808a20928a529190529096205494979396509194505067ffffffffffffffff8084169368010000000000000000900416919050565b60408181015160009081526020819052208054600160a01b900463ffffffff16156113a55760405162461bcd60e51b815260206004820152600b60248201527f504c414e45545f455849540000000000000000000000000000000000000000006044820152606401610493565b805482516001600160a01b039081169116146114035760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610493565b60006114608360400151604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b9050600061146d82611d32565b835490915060009081906114989063ffffffff600160c01b8204811691600160e01b90041685611da9565b91509150856060015163ffffffff168163ffffffff1610156114fc5760405162461bcd60e51b815260206004820152601560248201527f535041434553484950535f4e4f545f454e4f55474800000000000000000000006044820152606401610493565b60008061151383858a604001518b60600151612011565b91509150604051806060016040528089602001516001600160a01b031681526020018363ffffffff168152602001896060015163ffffffff16815250600160008c815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550905050876040015188602001516001600160a01b031689600001516001600160a01b03167fa069887d9311acae9fe31657a1cc64ab2f9d55b74319d0193094208f946a0e778c8e8d606001518760405161166494939291906001600160a01b03949094168452602084019290925263ffffffff908116604084015216606082015260800190565b60405180910390a450505050505050505050565b638000000081811681149060009061169090846156e0565b9050915091565b60408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905260e084019290925283517f00000000000000000000000000000000000000000000000000000000000000008183015280850186905284518082038601815292019093528051920191909120611726816121a4565b6117725760405162461bcd60e51b815260206004820152601a60248201527f6e6f20706c616e657420696e2074686973206c6f636174696f6e0000000000006044820152606401610493565b60008061177e836121c0565b915091506040518061010001604052808360000b81526020018260000b81526020016117a9856121f4565b61ffff1681526020016117bb85611d32565b61ffff1681526020016117cd856122a5565b61ffff1681526020016117df85612316565b61ffff1681526020016117f18561236c565b61ffff168152602001611803856123dd565b61ffff16905295945050505050565b604080517f000000000000000000000000000000000000000000000000000000000000000060208083019190915281830184905282518083038401815260609092019092528051910120670de0b6b3a764000061186e826121f4565b61ffff1661187c9190615703565b83146118ca5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610493565b60006118d785848461244e565b90506118e2836128a0565b6040805163ffffffff831681526020810186905284916001600160a01b038816917f5a2bd9d3c37a402271eaa8b4cd01a1a65831589c630b4b8ab1967eca76c0412c910160405180910390a35050505050565b6000828152600160209081526040808320815160608101835290546001600160a01b038116825263ffffffff600160a01b8204811694830194909452600160c01b900490921690820152908061198b8385612c6a565b9150915060006119aa8560200151600090815260208190526040902090565b6040805160808101825291546001600160a01b038116835263ffffffff600160a01b8204811660208501819052600160c01b8304821693850193909352600160e01b909104166060830152909150611a209087908390611a0990611b3a565b611a14578351611a17565b60005b87898888612d20565b505050505050565b611a33826000612db3565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee91906154b6565b610a375760405162461bcd60e51b815260206004820152600f60248201527f4641494c45445f5452414e5346455200000000000000000000000000000000006044820152606401610493565b6000808263ffffffff16118015611b7f5750611b7c7f000000000000000000000000000000000000000000000000000000000000000063ffffffff841661569e565b42115b92915050565b604080517f0000000000000000000000000000000000000000000000000000000000000000602080830191909152818301889052825180830384018152606090920190925280519101206000906000670de0b6b3a7640000611be6836121f4565b61ffff16611bf49190615703565b905087876001600160a01b03167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f73883604051611c3291815260200190565b60405180910390a36000888152600760205260409020548015611cb7576001600160a01b03881660008181526008602090815260408083208584528252808320805460ff191660011790558c835260079091528082208290555183928c9290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b50855463ffffffff858116600160c01b027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff42909216600160e01b027bffffffff0000000000000000000000000000000000000000000000009093166001600160a01b03891617929092171617865591505095945050505050565b6000611d3d826121a4565b611d7d5760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b611b7f82600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0612e0c565b600080611db585611678565b90925090506000611dcb60016380000000615722565b63ffffffff1690506000611ddf8642615747565b905063ffffffff83167f000000000000000000000000000000000000000000000000000000000000000015611f8157600080610e10611e4261ffff8a167f0000000000000000000000000000000000000000000000000000000000000000615703565b611e4c91906156cc565b611e7c9063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661569e565b9050808663ffffffff161115611eda57610e10611e9b85610708615703565b611ea591906156cc565b9150611eb78163ffffffff8816615747565b821115611ed157611ece8163ffffffff8816615747565b91505b60009450611eed565b611eea63ffffffff871682615747565b94505b8615611f5c576000610e1063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016611f2d61ffff8c1688615703565b611f379190615703565b611f4191906156cc565b905085811115611f4e5750845b611f58818561569e565b9350505b82821115611f6d5760009250611f7a565b611f778284615747565b92505b5050611fe0565b8415611fe057610e1063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016611fbf61ffff891685615703565b611fc99190615703565b611fd391906156cc565b611fdd908261569e565b90505b6380000000811061200357611ffa60016380000000615722565b63ffffffff1690505b809350505050935093915050565b60008281526020819052604081208190600061204e60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b61205890426156cc565b600087815260046020908152604080832084845290915290205490915067ffffffffffffffff1661208f63ffffffff87168261575e565b90508563ffffffff168167ffffffffffffffff1610156120f15760405162461bcd60e51b815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152606401610493565b60008781526004602090815260408083208584529091529020805467ffffffffffffffff191667ffffffffffffffff8316179055429450612132868a615722565b935061213e8885612e86565b835477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff928316027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b91871691909102179092555091969095509350505050565b60006121b38260346010612eac565b60ff166001149050919050565b6000806121cf83826003612eac565b6121da90600161578a565b91506121e98360026003612eac565b61169090600161578a565b60006121ff826121a4565b61223f5760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b600061224c83600c612ec9565b905060ff81167e060008000a000c000e0010001200140014001600180020002800300038004861227d8260026157ec565b612288906001615816565b61ffff166020811061229c5761229c6155c2565b1a949350505050565b60006122b0826121a4565b6122f05760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b6122fb826014612ec9565b61230a9060ff166101906157ec565b611b7f90610fa0615816565b6000612321826121a4565b6123615760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b6122fb82601c612ec9565b6000612377826121a4565b6123b75760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b6123c2826024612ec9565b6123d19060ff1661014d6157ec565b611b7f9061138d615816565b60006123e8826121a4565b6124285760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b61243382602c612ec9565b6124429060ff16610bb86157ec565b611b7f90613a98615816565b600082815260208190526040812081906040805160808101825282546001600160a01b038116825263ffffffff600160a01b820481166020840152600160c01b82048116938301849052600160e01b90910416606082018190529293509160009182916124c491906124bf89611d32565b611da9565b91509150600080846060015163ffffffff16600014156124f2576124e7886123dd565b61ffff169050612626565b602085015163ffffffff16156125645761250f8560200151611b3a565b61255b5760405162461bcd60e51b815260206004820152600d60248201527f5354494c4c5f45584954494e47000000000000000000000000000000000000006044820152606401610493565b60019150612626565b83156125b25760405162461bcd60e51b815260206004820152600c60248201527f5354494c4c5f41435449564500000000000000000000000000000000000000006044820152606401610493565b896001600160a01b031685600001516001600160a01b031614806125da575063ffffffff8316155b6126265760405162461bcd60e51b815260206004820152600860248201527f4f434355504945440000000000000000000000000000000000000000000000006044820152606401610493565b811561266f577f0000000000000000000000000000000000000000000000000000000000000000925061266a898660000151888d612665600189612e86565b612f63565b612892565b85547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038b1617865563ffffffff8116156127ff5760006360916f80421115612708576127007f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff166127106126f78d612316565b61ffff16612fa4565b509050612752565b61274e7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff166127106127458d612316565b61ffff16613145565b5090505b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16106127cd5760405162461bcd60e51b815260206004820152600f60248201527f4641494c45445f434150545552454400000000000000000000000000000000006044820152606401610493565b6127f7817f0000000000000000000000000000000000000000000000000000000000000000615722565b93505061282c565b6128297f000000000000000000000000000000000000000000000000000000000000000084615833565b92505b612837600184612e86565b865477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff928316027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b4292909216919091021786555b509098975050505050505050565b604080516080808201835260055463ffffffff80821684526401000000008204811660208501526801000000000000000082048116948401949094526c0100000000000000000000000090049092166060820152906fffffffffffffffffffffffffffffffff8316600f0b9083901d6000808312156129c457835163ffffffff1661292a84615852565b13156129785760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006044820152606401610493565b600861298384615852565b61298d919061588b565b925063ffffffff8313156129a35763ffffffff92505b835163ffffffff168313156129bf575063ffffffff8216835260015b612a67565b836020015163ffffffff16831315612a1e5760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006044820152606401610493565b612a2960088461588b565b925063ffffffff831315612a3f5763ffffffff92505b8263ffffffff16846020015163ffffffff161015612a67575063ffffffff8216602084015260015b6000821215612b2457604084015163ffffffff16612a8483615852565b1315612ad25760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006044820152606401610493565b6008612add83615852565b612ae7919061588b565b915063ffffffff821315612afd5763ffffffff91505b81846040015163ffffffff161215612b1f575063ffffffff8116604084015260015b612bc1565b836060015163ffffffff16821315612b7e5760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006044820152606401610493565b612b8960088361588b565b915063ffffffff821315612b9f5763ffffffff91505b81846060015163ffffffff161215612bc1575063ffffffff8116606084015260015b80156105775783516005805460208701516040880151606089015163ffffffff9081166c01000000000000000000000000027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff9282166801000000000000000002929092166fffffffffffffffff0000000000000000199382166401000000000267ffffffffffffffff1990951691909616179290921716929092179190911790555050505050565b6040820151600063ffffffff8216612cc45760405162461bcd60e51b815260206004820152601260248201527f464c4545545f444f5f4e4f545f455849535400000000000000000000000000006044820152606401610493565b612cd78284600001518660200151613275565b9150818460400151612ce99190615722565b9050612d0283604001518460000151856020015161339c565b612d198360400151846000015186602001516135b8565b9250929050565b600080612d3d8660000151868a896020015163ffffffff16613752565b915091506000612d5a8787600001518b896020015187878b613e82565b9050612d7387600001518b8a896020015187868a613ef1565b5050506000968752505060016020525050604090922080547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1690555050565b6001600160a01b03821660008181526002602052604090819020839055517f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b01990612e009084815260200190565b60405180910390a25050565b600080612e198585612ec9565b905082612e278260026158ff565b612e32906001615928565b60ff1660208110612e4557612e456155c2565b1a83612e528360026158ff565b60ff1660208110612e6557612e656155c2565b612e7391901a6101006157ec565b612e7d9190615816565b95945050505050565b60008183612e95576000612e9b565b63800000005b612ea59190615833565b9392505050565b6000612ec160ff80841690851686901c61594d565b949350505050565b600080612ed884846040612eac565b90506000612ee7600283615961565b90506000612ef6600284615983565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff841660208110612f2f57612f2f6155c2565b1a905060ff8216612f4d5760048160ff16901c945050505050611b7f565b612f58601082615983565b945050505050611b7f565b6000612f728686868686611b85565b6001600160a01b038616600090815260026020526040902054909150611a20908690612f9f90849061569e565b612db3565b600080851580612fb2575084155b15612fc25750600090508061313c565b600085612fef887f0000000000000000000000000000000000000000000000000000000000000000615703565b612ff991906156cc565b6130267f0000000000000000000000000000000000000000000000000000000000000000620f4240615747565b613030919061569e565b61303a9088615703565b90506000620f42408561304d8885615703565b61305791906156cc565b61306191906156cc565b90508087111561307657879350809250613139565b6000886130a3897f0000000000000000000000000000000000000000000000000000000000000000615703565b6130ad91906156cc565b6130da7f0000000000000000000000000000000000000000000000000000000000000000620f4240615747565b6130e4919061569e565b6130ee9089615703565b90506000620f4240886131018985615703565b61310b91906156cc565b61311591906156cc565b63ffffffff1690508981106131325761312f60018b615747565b90505b9450879350505b50505b94509492505050565b600080851580613153575084155b156131635750600090508061313c565b600061316f8588615703565b9050600061317d8588615703565b9050600082613190896305f5e100615703565b61319a91906156cc565b90506131aa886305f5e100615703565b6131b48483615703565b10156131c857806131c4816155ee565b9150505b6000826131d98b6305f5e100615703565b6131e391906156cc565b90506131f38a6305f5e100615703565b6131fd8483615703565b1015613211578061320d816155ee565b9150505b600061321d8383613fa6565b90506132416305f5e1006132318684615703565b61323b91906156cc565b8c613fa6565b96506132656305f5e1006132558784615703565b61325f91906156cc565b8b613fa6565b9550505050505094509492505050565b6000806132a360027f00000000000000000000000000000000000000000000000000000000000000006156cc565b6132b39063ffffffff85166156cc565b600085815260046020908152604080832084845290915290205490915068010000000000000000900467ffffffffffffffff1663ffffffff8616811015613335576132fe8187615722565b6000868152600460209081526040808320868452909152902080546fffffffffffffffff0000000000000000191690559550613392565b6000955061334386826159a5565b60008681526004602090815260408083208684529091529020805467ffffffffffffffff9290921668010000000000000000026fffffffffffffffff0000000000000000199092169190911790555b5093949350505050565b6000806133fe6133f985604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b6121c0565b9150915060008061345f6133f986604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b90925090506000600284820b61347a60808a901c60046159c6565b6134849190615a6d565b600084900b61349860808a901c60046159c6565b6134a29190615a6d565b6134ac9190615ace565b6134b69190615cc2565b6002600087900b6134da6fffffffffffffffffffffffffffffffff8b1660046159c6565b6134e49190615a6d565b600086900b6135066fffffffffffffffffffffffffffffffff8b1660046159c6565b6135109190615a6d565b61351a9190615ace565b6135249190615cc2565b61352e9190615a6d565b600f0b90508061353f60028a615d63565b111580156135625750600261355589600161569e565b61355f9190615d63565b81105b6135ae5760405162461bcd60e51b815260206004820152600e60248201527f77726f6e672064697374616e63650000000000000000000000000000000000006044820152606401610493565b5050505050505050565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091528183018590528251808303840181526060909201909252805191012060009061360e9061236c565b61ffff1661363e7f0000000000000000000000000000000000000000000000000000000000000000612710615703565b6136489086615703565b61365291906156cc565b6136629063ffffffff841661569e565b9050804210156136b45760405162461bcd60e51b815260206004820152600960248201527f746f6f206561726c7900000000000000000000000000000000000000000000006044820152606401610493565b6136de7f00000000000000000000000000000000000000000000000000000000000000008261569e565b42106108d65760405162461bcd60e51b815260206004820152602b60248201527f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60448201527f737420696e2073706163650000000000000000000000000000000000000000006064820152608401610493565b815160009081906001600160a01b03166137715750600090508061313c565b856001600160a01b031684600001516001600160a01b0316141561379b575060019050600061313c565b846060015115613c205760808501516001600160a01b031615806137d8575083600001516001600160a01b031685608001516001600160a01b0316145b156138c257835160405163df2c0f4960e01b81526001600160a01b0388811660048301529182166024820152604481018590526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b15801561385157600080fd5b505afa158015613865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138899190615d8e565b9150506001816bffffffffffffffffffffffff16600014806138b8575084826bffffffffffffffffffffffff16115b925092505061313c565b60808501516001600160a01b031660011415613a4257835160405163df2c0f4960e01b81526001600160a01b0388811660048301529182166024820152604481018590526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b15801561394c57600080fd5b505afa158015613960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139849190615d8e565b9150506361c2f028841080156139a657506bffffffffffffffffffffffff8116155b80156139ce575073b006c644258e01b437eff06e16e56e938a2397126001600160a01b038816145b8015613a1e575084516001600160a01b0316739dab5a6393eef78eb36cd84bb9bbb055189429a51480613a1e575084516001600160a01b031673f8b109af18cfa614bef1c2899e522d77b3c64c14145b15613a265750425b6bffffffffffffffffffffffff1680151592508310905061313c565b600185608001516001600160a01b03161115613c1b57835160808601516040517f4ed2986d0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b158015613ae357600080fd5b505afa158015613af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b1b9190615dc3565b5090506bffffffffffffffffffffffff811615613c1957845160405163df2c0f4960e01b81526001600160a01b0389811660048301529182166024820152604481018690526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015613ba757600080fd5b505afa158015613bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bdf9190615d8e565b9150506001816bffffffffffffffffffffffff1660001480613c0e575085826bffffffffffffffffffffffff16115b93509350505061313c565b505b61313c565b60808501516001600160a01b031660011415613d0157835160405163df2c0f4960e01b81526001600160a01b0388811660048301529182166024820152604481018590526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015613caa57600080fd5b505afa158015613cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce29190615d8e565b6bffffffffffffffffffffffff1680151594508510925061313c915050565b600185608001516001600160a01b0316118015613d38575083600001516001600160a01b031685608001516001600160a01b031614155b1561313c57835160808601516040517f4ed2986d0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b158015613dc857600080fd5b505afa158015613ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e009190615dc3565b5090506bffffffffffffffffffffffff8116613e7857845160405163df2c0f4960e01b81526001600160a01b0389811660048301529182166024820152604481018690526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401613b90565b5094509492505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091528315613ed057613ec98860000151878785878d60200151613fbd565b9050613ee6565b613ec988600001518960200151898989876141ca565b979650505050505050565b846001600160a01b0316876001600160a01b0316877f606ed05ee5450c129097ad509fc76dd97bde7b9bfc9a935df4671051779e0eb0878787602001518860400151888a600001518b606001518c60800151604051613f95989796959493929190978852951515602088015263ffffffff948516604088015292841660608701529083166080860152821660a0850152151560c08401521660e08201526101000190565b60405180910390a450505050505050565b600081831115613fb65781612ea5565b5090919050565b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015290860151613ff390611b3a565b156140435785516001600160a01b03811661400b5750865b8651600087815260208190526040902061403b91889163ffffffff8916614033576000614035565b845b89614346565b9150506141c0565b821561407b5761271061405e6109c463ffffffff8716615703565b61406891906156cc565b6140789063ffffffff8616615747565b93505b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091528183018890528251808303840181526060909201909252805191012060006140d082611d32565b90506000806140ee8a604001518b6060015163ffffffff1685611da9565b909250905060006140ff8983615833565b63ffffffff1690506380000000811061412a5761412160016380000000615722565b63ffffffff1690505b60008a815260208190526040902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b4263ffffffff16021790556141728382612e86565b60008b815260208190526040902080547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff93841602179055166080860152505050505b9695505050505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152606084015163ffffffff1661425c57604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091528183018690528251808303840181526060909201909252805191012061403b8888888785886143b2565b6142698460200151611b3a565b15614292578351600084815260208190526040902061428b9185918a86614346565b90506141c0565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301829052828401879052835180840385018152606084018552805190820120608084019290925260a08084018a90528451808503909101815260c09093019093528151919092012060009061430f906122a5565b9050600061431c83612316565b9050600061432984611d32565b905061433b8b8b85858c8c878d6145d8565b9450505050506141c0565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261439486868660008663ffffffff161161438c57600061438e565b865b86612f63565b63ffffffff9091166080820181905215156060820152949350505050565b6040805160a0810182526000808252602080830182905282840182905260608084018390526080840183905284517f0000000000000000000000000000000000000000000000000000000000000000818401528086018a90528551808203870181529101909452835193019290922090919061442d906122a5565b9050600061443a85612316565b90506000614447866123dd565b90506000806360916f808b63ffffffff1611156144865761447c8763ffffffff168461ffff168761ffff168761ffff16612fa4565b90925090506144aa565b6144a48763ffffffff168461ffff168761ffff168761ffff16613145565b90925090505b63ffffffff8083166020880152811661ffff84161480156144d657508163ffffffff168763ffffffff16115b156145c9576144e58288615722565b63ffffffff16608087018190526144fe90600090612e86565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508b6000808b815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080866040019063ffffffff16908163ffffffff168152505060018660600190151590811515815250505b50505050509695505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290529061460e868686614716565b9050806040015163ffffffff166000148015614630575060008363ffffffff16115b156146f757600085815260208190526040902080547fffffffffffffffff000000000000000000000000000000000000000000000000166001600160a01b038c1617905580516146809084612e86565b6000868152602081905260409020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff938416027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b4284160217905560016060840152831660808301525061470a565b614706818b8b88878d8d6147cf565b9150505b98975050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260008061476b8660400151876060015163ffffffff1686611da9565b915091506000806000806000614781868b614d6c565b9a15158c5263ffffffff998a1660208d01529290981660408b015267ffffffffffffffff90811660608b015296871660808a0152861660a089015250505050911660c0830152509392505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905290806360916f8063ffffffff8916111561483b576148318663ffffffff168b6040015163ffffffff168761ffff168761ffff16612fa4565b9092509050614865565b61485f8663ffffffff168b6040015163ffffffff168761ffff168761ffff16613145565b90925090505b63ffffffff80831660208086019190915282821660408601819052908c01519091161015614c0e5760208a015161489c9082615722565b63ffffffff90811680855260208c0151909116604085015260608b015167ffffffffffffffff161061491f57826000015163ffffffff168a6060018181516148e491906159a5565b67ffffffffffffffff16905250825160808b01805163ffffffff9092169161490d90839061575e565b67ffffffffffffffff169052506149f5565b89606001518a608001818151614935919061575e565b67ffffffffffffffff1690525060608a0151835160009161495b9163ffffffff166159a5565b90508067ffffffffffffffff168b60a0015167ffffffffffffffff16106149c157808b60a00181815161498e91906159a5565b67ffffffffffffffff1690525060c08b0180518291906149af90839061575e565b67ffffffffffffffff169052506149ec565b8a60a001518b60c0018181516149d7919061575e565b67ffffffffffffffff16905250600060a08c01525b50600060608b01525b60608a01516000888152600460205260408120906001614a3660027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614a4090426156cc565b614a4a9190615747565b815260208082019290925260409081016000908120805467ffffffffffffffff191667ffffffffffffffff959095169490941790935560808d01518a84526004909252822090916001614abe60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614ac890426156cc565b614ad29190615747565b815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508960a0015160046000898152602001908152602001600020600060027f0000000000000000000000000000000000000000000000000000000000000000614b5091906156cc565b614b5a90426156cc565b815260208082019290925260409081016000908120805467ffffffffffffffff191667ffffffffffffffff959095169490941790935560c08d01518a8452600490925282209091614bcc60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614bd690426156cc565b815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b60008663ffffffff16118015614c375750896020015163ffffffff16836040015163ffffffff16145b15614d1757614c468287615722565b63ffffffff166080840190815260016060850152600088815260208190526040902080547fffffffffffffffff000000000000000000000000000000000000000000000000166001600160a01b038c161790558a519051614ca79190612e86565b6000888152602081905260409020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff938416027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b429390931692909202919091179055614d5f565b8563ffffffff16836020015163ffffffff161415614d5757808a60200151614d3f9190615722565b63ffffffff16608084018190528a51614ca791612e86565b614d5f615def565b5050979650505050505050565b81600080808080614d9e60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614da890426156cc565b6000888152600460205260408120919250614dc4600184615747565b815260208082019290925260409081016000908120548a8252600490935290812067ffffffffffffffff9092169650614dfe600184615747565b815260208082019290925260409081016000908120548a825260048452828220858352909352205467ffffffffffffffff91821695508181169450680100000000000000009004169150614e7a63ffffffff8716614e5c858861575e565b614e66919061575e565b67ffffffffffffffff1663ffffffff613fa6565b9550509295509295909350565b600060208284031215614e9957600080fd5b5035919050565b803563ffffffff81168114614eb457600080fd5b919050565b600080600060608486031215614ece57600080fd5b83359250614ede60208501614ea0565b9150604084013590509250925092565b6001600160a01b0381168114614f0357600080fd5b50565b60008060008060008060008060008060006101608c8e031215614f2857600080fd5b8b35614f3381614eee565b9a5060208c0135614f4381614eee565b995060408c01359850614f5860608d01614ea0565b9750614f6660808d01614ea0565b9650614f7460a08d01614ea0565b9550614f8260c08d01614ea0565b9450614f9060e08d01614ea0565b9350614f9f6101008d01614ea0565b9250614fae6101208d01614ea0565b9150614fbd6101408d01614ea0565b90509295989b509295989b9093969950565b6101c0810161502c82856001600160a01b038151168252602081015163ffffffff8082166020850152806040840151166040850152806060840151166060850152505060808101511515608083015260a081015160a08301525050565b8251600090810b60c08401526020840151900b60e0830152604083015161ffff908116610100840152606084015116610120830152608083015161507761014084018261ffff169052565b5060a083015161ffff90811661016084015260c0840151811661018084015260e0909301519092166101a090910152919050565b600080604083850312156150be57600080fd5b50508035926020909101359150565b6000808284036101208112156150e257600080fd5b83359250610100601f19820112156150f957600080fd5b506020830190509250929050565b8035614eb481614eee565b60008083601f84011261512457600080fd5b50813567ffffffffffffffff81111561513c57600080fd5b602083019150836020828501011115612d1957600080fd5b60008060008060006080868803121561516c57600080fd5b853561517781614eee565b9450602086013561518781614eee565b935060408601359250606086013567ffffffffffffffff8111156151aa57600080fd5b6151b688828901615112565b969995985093965092949392505050565b6000602082840312156151d957600080fd5b8135612ea581614eee565b8015158114614f0357600080fd5b6000806040838503121561520557600080fd5b823561521081614eee565b91506020830135615220816151e4565b809150509250929050565b6000806000806060858703121561524157600080fd5b843561524c81614eee565b935060208501359250604085013567ffffffffffffffff81111561526f57600080fd5b61527b87828801615112565b95989497509550505050565b60008083601f84011261529957600080fd5b50813567ffffffffffffffff8111156152b157600080fd5b6020830191508360208260051b8501011115612d1957600080fd5b600080602083850312156152df57600080fd5b823567ffffffffffffffff8111156152f657600080fd5b61530285828601615287565b90969095509350505050565b60a0808252835190820181905260009060c090818401906020808801855b8381101561539d5761538d8583516001600160a01b038151168252602081015163ffffffff8082166020850152806040840151166040850152806060840151166060850152505060808101511515608083015260a081015160a08301525050565b938501939082019060010161532c565b50508294506153d981870188805163ffffffff908116835260208083015182169084015260408083015182169084015260609182015116910152565b505050509392505050565b600080604083850312156153f757600080fd5b823561540281614eee565b946020939093013593505050565b60808101611b7f8284805163ffffffff908116835260208083015182169084015260408083015182169084015260609182015116910152565b600060a0828403121561545b57600080fd5b50919050565b60008060006040848603121561547657600080fd5b833561548181614eee565b9250602084013567ffffffffffffffff81111561549d57600080fd5b6154a986828701615287565b9497909650939450505050565b6000602082840312156154c857600080fd5b8151612ea5816151e4565b6000602082840312156154e557600080fd5b8135612ea5816151e4565b634e487b7160e01b600052604160045260246000fd5b600061010080838503121561551a57600080fd5b6040519081019067ffffffffffffffff8211818310171561554b57634e487b7160e01b600052604160045260246000fd5b8160405283358152602084013560208201526040840135604082015260608401359150615577826151e4565b81606082015261558960808501615107565b608082015260a084013560a08201526155a460c08501615107565b60c08201526155b560e08501615107565b60e0820152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415615602576156026155d8565b5060010190565b600060a0828403121561561b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561564c57634e487b7160e01b600052604160045260246000fd5b604052823561565a81614eee565b8152602083013561566a81614eee565b60208201526040838101359082015261568560608401614ea0565b6060820152608083013560808201528091505092915050565b600082198211156156b1576156b16155d8565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826156db576156db6156b6565b500490565b600063ffffffff808416806156f7576156f76156b6565b92169190910692915050565b600081600019048311821515161561571d5761571d6155d8565b500290565b600063ffffffff8381169083168181101561573f5761573f6155d8565b039392505050565b600082821015615759576157596155d8565b500390565b600067ffffffffffffffff808316818516808303821115615781576157816155d8565b01949350505050565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018312811516156157cd576157cd6155d8565b81607f0183138116156157e2576157e26155d8565b5090039392505050565b600061ffff8083168185168183048111821515161561580d5761580d6155d8565b02949350505050565b600061ffff808316818516808303821115615781576157816155d8565b600063ffffffff808316818516808303821115615781576157816155d8565b60007f8000000000000000000000000000000000000000000000000000000000000000821415615884576158846155d8565b5060000390565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156158c5576158c56155d8565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156158f9576158f96155d8565b50500190565b600060ff821660ff84168160ff0481118215151615615920576159206155d8565b029392505050565b600060ff821660ff84168060ff03821115615945576159456155d8565b019392505050565b60008261595c5761595c6156b6565b500690565b600060ff831680615974576159746156b6565b8060ff84160491505092915050565b600060ff831680615996576159966156b6565b8060ff84160691505092915050565b600067ffffffffffffffff8381169083168181101561573f5761573f6155d8565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff6000821360008413838304851182821616156159ff576159ff6155d8565b6f7fffffffffffffffffffffffffffffff196000851286820586128184161615615a2b57615a2b6155d8565b60008712925085820587128484161615615a4757615a476155d8565b85850587128184161615615a5d57615a5d6155d8565b5050509290910295945050505050565b600081600f0b83600f0b60008212826f7fffffffffffffffffffffffffffffff03821381151615615aa057615aa06155d8565b826f7fffffffffffffffffffffffffffffff19038212811615615ac557615ac56155d8565b50019392505050565b600081600f0b83600f0b60008112816f7fffffffffffffffffffffffffffffff1901831281151615615b0257615b026155d8565b816f7fffffffffffffffffffffffffffffff0183138116156157e2576157e26155d8565b600181815b80851115615b61578160001904821115615b4757615b476155d8565b80851615615b5457918102915b93841c9390800290615b2b565b509250929050565b80825b6001808611615b7b5750615bb6565b816f7fffffffffffffffffffffffffffffff04821115615b9d57615b9d6155d8565b80861615615baa57918102915b9490941c938002615b6c565b935093915050565b6000828015615bd45760018114615bde57615be7565b6001915050611b7f565b82915050611b7f565b5081615bf557506000611b7f565b50600160008213808214615c0e578015615c3557615c57565b826f7fffffffffffffffffffffffffffffff04831115615c3057615c306155d8565b615c57565b826f7fffffffffffffffffffffffffffffff05831215615c5757615c576155d8565b5080831615615c635750805b615c738360011c83840283615b69565b806f7fffffffffffffffffffffffffffffff048211600083131615615c9a57615c9a6155d8565b806f7fffffffffffffffffffffffffffffff19058212600083121615615920576159206155d8565b6000612ea560ff841683600f0b615bbe565b600082615ce357506001611b7f565b81615cf057506000611b7f565b8160018114615bd45760028114615d0657615d22565b60ff841115615d1757615d176155d8565b50506001821b611b7f565b5060208310610133831016604e8410600b8410161715615d45575081810a611b7f565b615d4f8383615b26565b8060001904821115615920576159206155d8565b6000612ea560ff841683615cd4565b80516bffffffffffffffffffffffff81168114614eb457600080fd5b60008060408385031215615da157600080fd5b8251615dac81614eee565b9150615dba60208401615d72565b90509250929050565b60008060408385031215615dd657600080fd5b615ddf83615d72565b9150602083015190509250929050565b634e487b7160e01b600052600160045260246000fdfea264697066735822122066b56b69b1628369d057abd895f8d542f16f984ded6386ae255c113dbfe5e04664736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063a22cb465116100cd578063c956083811610081578063e2e9b07911610066578063e2e9b07914610368578063ee5433931461037b578063f9c8974d146103d657600080fd5b8063c95608381461032c578063cf3ecf071461035557600080fd5b8063aba789f5116100b2578063aba789f51461026d578063afc823701461028e578063c5aaa0ae146102a157600080fd5b8063a22cb46514610247578063a4c0ed361461025a57600080fd5b80637ba423fb1161012457806388f3532b1161010957806388f3532b146101fe5780639b6be065146102115780639eca672c1461023457600080fd5b80637ba423fb146101bb5780637cef64d8146101ce57600080fd5b80630b9c522814610156578063112e68511461016b5780631b7c9c171461017e57806334efcb8e14610191575b600080fd5b610169610164366004614e87565b610415565b005b610169610179366004614eb9565b6104d7565b61016961018c366004614f06565b61057e565b6101a461019f366004614e87565b6106ee565b6040516101b2929190614fcf565b60405180910390f35b6101696101c93660046150ab565b610809565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016101b2565b61016961020c3660046150cd565b6108dc565b61022461021f366004615154565b610a3b565b60405190151581526020016101b2565b6101696102423660046151c7565b610add565b6101696102553660046151f2565b610b00565b61022461026836600461522b565b610b6b565b61028061027b3660046152cc565b610c03565b6040516101b292919061530e565b61016961029c3660046153e4565b610e13565b61031f604080516080810182526000808252602082018190529181018290526060810191909152506040805160808101825260055463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c010000000000000000000000009004909116606082015290565b6040516101b29190615410565b6101f061033a3660046151c7565b6001600160a01b031660009081526002602052604090205490565b610169610363366004615449565b610f48565b610169610376366004615461565b611170565b61038e6103893660046150ab565b611286565b604080516001600160a01b03909616865263ffffffff9485166020870152939092169284019290925267ffffffffffffffff918216606084015216608082015260a0016101b2565b6103fd7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b2565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316336001600160a01b03161461049c5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a454400000000000000000000000000000000000060448201526064015b60405180910390fd5b6000818152602081905260408082208290555182917fb9e622395e3bd0e793c5448e9c44434069fc36c8904b50ab65bca22b05d425e691a250565b6000336040805160208101859052908101869052606082811b6bffffffffffffffffffffffff191690820181905260748201529091506000906088016040516020818303038152906040528051906020012060001c905061057781836040518060a00160405280866001600160a01b03168152602001866001600160a01b031681526020018981526020018863ffffffff16815260200187815250611338565b5050505050565b60006105a87fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b0381166105e7576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103556105fc565b336001600160a01b038216146105fc57600080fd5b60055463ffffffff166106e0576040805160808082018352601080835260208084018290528385018290526060938401829052600580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166c100000001000000010000000101790819055855192835263ffffffff64010000000082048116928401929092526801000000000000000081048216838701526c010000000000000000000000009004169281019290925281018c905290517f3086e986d6b4ec35754cd5a19b964d1012b58b3584a51a321d0fb693ae4cfcd99160a0908290030190a15b505050505050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915260008381526020819052604081208054909150600090819061078f90600160c01b900463ffffffff16611678565b6040805160c08101825286546001600160a01b038116825263ffffffff600160a01b8204811660208085019190915281861684860152600160e01b909204166060830152841515608083015260008b81526007909152919091205460a0820152965090925090506107ff86611697565b9350505050915091565b33610815818385611812565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401602060405180830381600087803b15801561089e57600080fd5b505af11580156108b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d691906154b6565b50505050565b8160a082013560208301356108f760808501606086016154d3565b61090760a08601608087016151c7565b60405160200161094794939291909384526020840192909252151560f81b604083015260601b6bffffffffffffffffffffffff1916604182015260550190565b60408051601f198184030181529190528051602090910120823561097160e0850160c086016151c7565b610982610100860160e087016151c7565b6040805160208101959095528401929092526bffffffffffffffffffffffff19606091821b81168285015291901b1660748201526088016040516020818303038152906040528051906020012060001c14610a1f5760405162461bcd60e51b815260206004820152601c60248201527f494e56414c49445f464c4545545f444154415f4f525f534543524554000000006044820152606401610493565b610a3782610a3236849003840184615506565b611935565b5050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ab55760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610493565b6000610ac383850185614e87565b9050610ad0868683611812565b5060019695505050505050565b6001600160a01b038116600090815260026020526040902054610a378282611a28565b3360008181526003602090815260408083206001600160a01b03871680855290835292819020805460ff19168615159081179091558151908152905184927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31928290030190a3505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610be55760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4552433230000000000000000000000000000000000000006044820152606401610493565b600080610bf4848601866153e4565b91509150610ad0828783611812565b604080516080810182526000808252602082018190529181018290526060818101929092528267ffffffffffffffff811115610c4157610c416154f0565b604051908082528060200260200182016040528015610ca157816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a08201528252600019909201910181610c5f5790505b50915060005b83811015610db5576000610cde868684818110610cc657610cc66155c2565b90506020020135600090815260208190526040902090565b80549091506000908190610cfe90600160c01b900463ffffffff16611678565b6040805160c08101825286546001600160a01b038116825263ffffffff600160a01b82048116602084015280851693830193909352600160e01b900490911660608201528215156080820152919350915060a08101600760008b8b89818110610d6957610d696155c2565b90506020020135815260200190815260200160002054815250868581518110610d9457610d946155c2565b60200260200101819052505050508080610dad906155ee565b915050610ca7565b50506040805160808101825260055463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c010000000000000000000000009004909116606082015290939092509050565b600081815260208190526040902080546001600160a01b03848116911614610e7d5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610493565b8054600160a01b900463ffffffff1615610ed95760405162461bcd60e51b815260206004820152600f60248201527f45584954494e475f414c524541445900000000000000000000000000000000006044820152606401610493565b80547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff16600160a01b4263ffffffff160217815560405182906001600160a01b038516907fb9182e4e152947f1e6691fa0ee6f68f21f607fed825945c270e69995acad805f90600090a3505050565b33610f5660208301836151c7565b6001600160a01b0316816001600160a01b031614610ff85760036000610f7f60208501856151c7565b6001600160a01b039081168252602080830193909352604091820160009081209185168152925290205460ff16610ff85760405162461bcd60e51b815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e44000000000000000000006044820152606401610493565b60006080830135604084013561101160208601866151c7565b6040805160208101949094528301919091526bffffffffffffffffffffffff19606091821b8116828401529084901b16607482015260880160408051601f198184030181529190528051602091820120915061106f908401846151c7565b6001600160a01b031661108860408501602086016151c7565b6001600160a01b0316141580156110c057506001600160a01b0382166110b460408501602086016151c7565b6001600160a01b031614155b1561115257600360006110d960408601602087016151c7565b6001600160a01b039081168252602080830193909352604091820160009081209186168152925290205460ff166111525760405162461bcd60e51b815260206004820152601760248201527f4e4f545f415554484f52495a45445f544f5f464c4545540000000000000000006044820152606401610493565b61116b818361116636879003870187615609565b611338565b505050565b6000805b82811015611255576000611193858584818110610cc657610cc66155c2565b80549091506111ae90600160a01b900463ffffffff16611b3a565b156112425780546001600160a01b0387811691161461120f5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610493565b611235858584818110611224576112246155c2565b905060200201358783600080611b85565b61123f908461569e565b92505b508061124d816155ee565b915050611174565b506001600160a01b03841660009081526002602052604081205461127a90839061569e565b90506105778582611a28565b6000828152600160205260408120546001600160a01b0381169163ffffffff600160a01b8304811692600160c01b9004169080806112e560027f00000000000000000000000000000000000000000000000000000000000000006156cc565b6112f59063ffffffff87166156cc565b6000978852600460209081526040808a20928a529190529096205494979396509194505067ffffffffffffffff8084169368010000000000000000900416919050565b60408181015160009081526020819052208054600160a01b900463ffffffff16156113a55760405162461bcd60e51b815260206004820152600b60248201527f504c414e45545f455849540000000000000000000000000000000000000000006044820152606401610493565b805482516001600160a01b039081169116146114035760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e455200000000000000000000000000000000000000000000006044820152606401610493565b60006114608360400151604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b9050600061146d82611d32565b835490915060009081906114989063ffffffff600160c01b8204811691600160e01b90041685611da9565b91509150856060015163ffffffff168163ffffffff1610156114fc5760405162461bcd60e51b815260206004820152601560248201527f535041434553484950535f4e4f545f454e4f55474800000000000000000000006044820152606401610493565b60008061151383858a604001518b60600151612011565b91509150604051806060016040528089602001516001600160a01b031681526020018363ffffffff168152602001896060015163ffffffff16815250600160008c815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550905050876040015188602001516001600160a01b031689600001516001600160a01b03167fa069887d9311acae9fe31657a1cc64ab2f9d55b74319d0193094208f946a0e778c8e8d606001518760405161166494939291906001600160a01b03949094168452602084019290925263ffffffff908116604084015216606082015260800190565b60405180910390a450505050505050505050565b638000000081811681149060009061169090846156e0565b9050915091565b60408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840183905260e084019290925283517f00000000000000000000000000000000000000000000000000000000000000008183015280850186905284518082038601815292019093528051920191909120611726816121a4565b6117725760405162461bcd60e51b815260206004820152601a60248201527f6e6f20706c616e657420696e2074686973206c6f636174696f6e0000000000006044820152606401610493565b60008061177e836121c0565b915091506040518061010001604052808360000b81526020018260000b81526020016117a9856121f4565b61ffff1681526020016117bb85611d32565b61ffff1681526020016117cd856122a5565b61ffff1681526020016117df85612316565b61ffff1681526020016117f18561236c565b61ffff168152602001611803856123dd565b61ffff16905295945050505050565b604080517f000000000000000000000000000000000000000000000000000000000000000060208083019190915281830184905282518083038401815260609092019092528051910120670de0b6b3a764000061186e826121f4565b61ffff1661187c9190615703565b83146118ca5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f414d4f554e540000000000000000000000000000000000006044820152606401610493565b60006118d785848461244e565b90506118e2836128a0565b6040805163ffffffff831681526020810186905284916001600160a01b038816917f5a2bd9d3c37a402271eaa8b4cd01a1a65831589c630b4b8ab1967eca76c0412c910160405180910390a35050505050565b6000828152600160209081526040808320815160608101835290546001600160a01b038116825263ffffffff600160a01b8204811694830194909452600160c01b900490921690820152908061198b8385612c6a565b9150915060006119aa8560200151600090815260208190526040902090565b6040805160808101825291546001600160a01b038116835263ffffffff600160a01b8204811660208501819052600160c01b8304821693850193909352600160e01b909104166060830152909150611a209087908390611a0990611b3a565b611a14578351611a17565b60005b87898888612d20565b505050505050565b611a33826000612db3565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b158015611ab657600080fd5b505af1158015611aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aee91906154b6565b610a375760405162461bcd60e51b815260206004820152600f60248201527f4641494c45445f5452414e5346455200000000000000000000000000000000006044820152606401610493565b6000808263ffffffff16118015611b7f5750611b7c7f000000000000000000000000000000000000000000000000000000000000000063ffffffff841661569e565b42115b92915050565b604080517f0000000000000000000000000000000000000000000000000000000000000000602080830191909152818301889052825180830384018152606090920190925280519101206000906000670de0b6b3a7640000611be6836121f4565b61ffff16611bf49190615703565b905087876001600160a01b03167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f73883604051611c3291815260200190565b60405180910390a36000888152600760205260409020548015611cb7576001600160a01b03881660008181526008602090815260408083208584528252808320805460ff191660011790558c835260079091528082208290555183928c9290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b50855463ffffffff858116600160c01b027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff42909216600160e01b027bffffffff0000000000000000000000000000000000000000000000009093166001600160a01b03891617929092171617865591505095945050505050565b6000611d3d826121a4565b611d7d5760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b611b7f82600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0612e0c565b600080611db585611678565b90925090506000611dcb60016380000000615722565b63ffffffff1690506000611ddf8642615747565b905063ffffffff83167f000000000000000000000000000000000000000000000000000000000000000015611f8157600080610e10611e4261ffff8a167f0000000000000000000000000000000000000000000000000000000000000000615703565b611e4c91906156cc565b611e7c9063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661569e565b9050808663ffffffff161115611eda57610e10611e9b85610708615703565b611ea591906156cc565b9150611eb78163ffffffff8816615747565b821115611ed157611ece8163ffffffff8816615747565b91505b60009450611eed565b611eea63ffffffff871682615747565b94505b8615611f5c576000610e1063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016611f2d61ffff8c1688615703565b611f379190615703565b611f4191906156cc565b905085811115611f4e5750845b611f58818561569e565b9350505b82821115611f6d5760009250611f7a565b611f778284615747565b92505b5050611fe0565b8415611fe057610e1063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016611fbf61ffff891685615703565b611fc99190615703565b611fd391906156cc565b611fdd908261569e565b90505b6380000000811061200357611ffa60016380000000615722565b63ffffffff1690505b809350505050935093915050565b60008281526020819052604081208190600061204e60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b61205890426156cc565b600087815260046020908152604080832084845290915290205490915067ffffffffffffffff1661208f63ffffffff87168261575e565b90508563ffffffff168167ffffffffffffffff1610156120f15760405162461bcd60e51b815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152606401610493565b60008781526004602090815260408083208584529091529020805467ffffffffffffffff191667ffffffffffffffff8316179055429450612132868a615722565b935061213e8885612e86565b835477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff928316027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b91871691909102179092555091969095509350505050565b60006121b38260346010612eac565b60ff166001149050919050565b6000806121cf83826003612eac565b6121da90600161578a565b91506121e98360026003612eac565b61169090600161578a565b60006121ff826121a4565b61223f5760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b600061224c83600c612ec9565b905060ff81167e060008000a000c000e0010001200140014001600180020002800300038004861227d8260026157ec565b612288906001615816565b61ffff166020811061229c5761229c6155c2565b1a949350505050565b60006122b0826121a4565b6122f05760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b6122fb826014612ec9565b61230a9060ff166101906157ec565b611b7f90610fa0615816565b6000612321826121a4565b6123615760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b6122fb82601c612ec9565b6000612377826121a4565b6123b75760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b6123c2826024612ec9565b6123d19060ff1661014d6157ec565b611b7f9061138d615816565b60006123e8826121a4565b6124285760405162461bcd60e51b8152602060048201526011602482015270504c414e45545f4e4f545f45584953545360781b6044820152606401610493565b61243382602c612ec9565b6124429060ff16610bb86157ec565b611b7f90613a98615816565b600082815260208190526040812081906040805160808101825282546001600160a01b038116825263ffffffff600160a01b820481166020840152600160c01b82048116938301849052600160e01b90910416606082018190529293509160009182916124c491906124bf89611d32565b611da9565b91509150600080846060015163ffffffff16600014156124f2576124e7886123dd565b61ffff169050612626565b602085015163ffffffff16156125645761250f8560200151611b3a565b61255b5760405162461bcd60e51b815260206004820152600d60248201527f5354494c4c5f45584954494e47000000000000000000000000000000000000006044820152606401610493565b60019150612626565b83156125b25760405162461bcd60e51b815260206004820152600c60248201527f5354494c4c5f41435449564500000000000000000000000000000000000000006044820152606401610493565b896001600160a01b031685600001516001600160a01b031614806125da575063ffffffff8316155b6126265760405162461bcd60e51b815260206004820152600860248201527f4f434355504945440000000000000000000000000000000000000000000000006044820152606401610493565b811561266f577f0000000000000000000000000000000000000000000000000000000000000000925061266a898660000151888d612665600189612e86565b612f63565b612892565b85547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038b1617865563ffffffff8116156127ff5760006360916f80421115612708576127007f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff166127106126f78d612316565b61ffff16612fa4565b509050612752565b61274e7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff166127106127458d612316565b61ffff16613145565b5090505b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff16106127cd5760405162461bcd60e51b815260206004820152600f60248201527f4641494c45445f434150545552454400000000000000000000000000000000006044820152606401610493565b6127f7817f0000000000000000000000000000000000000000000000000000000000000000615722565b93505061282c565b6128297f000000000000000000000000000000000000000000000000000000000000000084615833565b92505b612837600184612e86565b865477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff928316027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b4292909216919091021786555b509098975050505050505050565b604080516080808201835260055463ffffffff80821684526401000000008204811660208501526801000000000000000082048116948401949094526c0100000000000000000000000090049092166060820152906fffffffffffffffffffffffffffffffff8316600f0b9083901d6000808312156129c457835163ffffffff1661292a84615852565b13156129785760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e58000000000000000000006044820152606401610493565b600861298384615852565b61298d919061588b565b925063ffffffff8313156129a35763ffffffff92505b835163ffffffff168313156129bf575063ffffffff8216835260015b612a67565b836020015163ffffffff16831315612a1e5760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415858000000000000000000006044820152606401610493565b612a2960088461588b565b925063ffffffff831315612a3f5763ffffffff92505b8263ffffffff16846020015163ffffffff161015612a67575063ffffffff8216602084015260015b6000821215612b2457604084015163ffffffff16612a8483615852565b1315612ad25760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d494e59000000000000000000006044820152606401610493565b6008612add83615852565b612ae7919061588b565b915063ffffffff821315612afd5763ffffffff91505b81846040015163ffffffff161215612b1f575063ffffffff8116604084015260015b612bc1565b836060015163ffffffff16821315612b7e5760405162461bcd60e51b815260206004820152601660248201527f4e4f545f524541434841424c455f5945545f4d415859000000000000000000006044820152606401610493565b612b8960088361588b565b915063ffffffff821315612b9f5763ffffffff91505b81846060015163ffffffff161215612bc1575063ffffffff8116606084015260015b80156105775783516005805460208701516040880151606089015163ffffffff9081166c01000000000000000000000000027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff9282166801000000000000000002929092166fffffffffffffffff0000000000000000199382166401000000000267ffffffffffffffff1990951691909616179290921716929092179190911790555050505050565b6040820151600063ffffffff8216612cc45760405162461bcd60e51b815260206004820152601260248201527f464c4545545f444f5f4e4f545f455849535400000000000000000000000000006044820152606401610493565b612cd78284600001518660200151613275565b9150818460400151612ce99190615722565b9050612d0283604001518460000151856020015161339c565b612d198360400151846000015186602001516135b8565b9250929050565b600080612d3d8660000151868a896020015163ffffffff16613752565b915091506000612d5a8787600001518b896020015187878b613e82565b9050612d7387600001518b8a896020015187868a613ef1565b5050506000968752505060016020525050604090922080547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1690555050565b6001600160a01b03821660008181526002602052604090819020839055517f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b01990612e009084815260200190565b60405180910390a25050565b600080612e198585612ec9565b905082612e278260026158ff565b612e32906001615928565b60ff1660208110612e4557612e456155c2565b1a83612e528360026158ff565b60ff1660208110612e6557612e656155c2565b612e7391901a6101006157ec565b612e7d9190615816565b95945050505050565b60008183612e95576000612e9b565b63800000005b612ea59190615833565b9392505050565b6000612ec160ff80841690851686901c61594d565b949350505050565b600080612ed884846040612eac565b90506000612ee7600283615961565b90506000612ef6600284615983565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff841660208110612f2f57612f2f6155c2565b1a905060ff8216612f4d5760048160ff16901c945050505050611b7f565b612f58601082615983565b945050505050611b7f565b6000612f728686868686611b85565b6001600160a01b038616600090815260026020526040902054909150611a20908690612f9f90849061569e565b612db3565b600080851580612fb2575084155b15612fc25750600090508061313c565b600085612fef887f0000000000000000000000000000000000000000000000000000000000000000615703565b612ff991906156cc565b6130267f0000000000000000000000000000000000000000000000000000000000000000620f4240615747565b613030919061569e565b61303a9088615703565b90506000620f42408561304d8885615703565b61305791906156cc565b61306191906156cc565b90508087111561307657879350809250613139565b6000886130a3897f0000000000000000000000000000000000000000000000000000000000000000615703565b6130ad91906156cc565b6130da7f0000000000000000000000000000000000000000000000000000000000000000620f4240615747565b6130e4919061569e565b6130ee9089615703565b90506000620f4240886131018985615703565b61310b91906156cc565b61311591906156cc565b63ffffffff1690508981106131325761312f60018b615747565b90505b9450879350505b50505b94509492505050565b600080851580613153575084155b156131635750600090508061313c565b600061316f8588615703565b9050600061317d8588615703565b9050600082613190896305f5e100615703565b61319a91906156cc565b90506131aa886305f5e100615703565b6131b48483615703565b10156131c857806131c4816155ee565b9150505b6000826131d98b6305f5e100615703565b6131e391906156cc565b90506131f38a6305f5e100615703565b6131fd8483615703565b1015613211578061320d816155ee565b9150505b600061321d8383613fa6565b90506132416305f5e1006132318684615703565b61323b91906156cc565b8c613fa6565b96506132656305f5e1006132558784615703565b61325f91906156cc565b8b613fa6565b9550505050505094509492505050565b6000806132a360027f00000000000000000000000000000000000000000000000000000000000000006156cc565b6132b39063ffffffff85166156cc565b600085815260046020908152604080832084845290915290205490915068010000000000000000900467ffffffffffffffff1663ffffffff8616811015613335576132fe8187615722565b6000868152600460209081526040808320868452909152902080546fffffffffffffffff0000000000000000191690559550613392565b6000955061334386826159a5565b60008681526004602090815260408083208684529091529020805467ffffffffffffffff9290921668010000000000000000026fffffffffffffffff0000000000000000199092169190911790555b5093949350505050565b6000806133fe6133f985604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b6121c0565b9150915060008061345f6133f986604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b90925090506000600284820b61347a60808a901c60046159c6565b6134849190615a6d565b600084900b61349860808a901c60046159c6565b6134a29190615a6d565b6134ac9190615ace565b6134b69190615cc2565b6002600087900b6134da6fffffffffffffffffffffffffffffffff8b1660046159c6565b6134e49190615a6d565b600086900b6135066fffffffffffffffffffffffffffffffff8b1660046159c6565b6135109190615a6d565b61351a9190615ace565b6135249190615cc2565b61352e9190615a6d565b600f0b90508061353f60028a615d63565b111580156135625750600261355589600161569e565b61355f9190615d63565b81105b6135ae5760405162461bcd60e51b815260206004820152600e60248201527f77726f6e672064697374616e63650000000000000000000000000000000000006044820152606401610493565b5050505050505050565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091528183018590528251808303840181526060909201909252805191012060009061360e9061236c565b61ffff1661363e7f0000000000000000000000000000000000000000000000000000000000000000612710615703565b6136489086615703565b61365291906156cc565b6136629063ffffffff841661569e565b9050804210156136b45760405162461bcd60e51b815260206004820152600960248201527f746f6f206561726c7900000000000000000000000000000000000000000000006044820152606401610493565b6136de7f00000000000000000000000000000000000000000000000000000000000000008261569e565b42106108d65760405162461bcd60e51b815260206004820152602b60248201527f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60448201527f737420696e2073706163650000000000000000000000000000000000000000006064820152608401610493565b815160009081906001600160a01b03166137715750600090508061313c565b856001600160a01b031684600001516001600160a01b0316141561379b575060019050600061313c565b846060015115613c205760808501516001600160a01b031615806137d8575083600001516001600160a01b031685608001516001600160a01b0316145b156138c257835160405163df2c0f4960e01b81526001600160a01b0388811660048301529182166024820152604481018590526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b15801561385157600080fd5b505afa158015613865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138899190615d8e565b9150506001816bffffffffffffffffffffffff16600014806138b8575084826bffffffffffffffffffffffff16115b925092505061313c565b60808501516001600160a01b031660011415613a4257835160405163df2c0f4960e01b81526001600160a01b0388811660048301529182166024820152604481018590526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b15801561394c57600080fd5b505afa158015613960573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139849190615d8e565b9150506361c2f028841080156139a657506bffffffffffffffffffffffff8116155b80156139ce575073b006c644258e01b437eff06e16e56e938a2397126001600160a01b038816145b8015613a1e575084516001600160a01b0316739dab5a6393eef78eb36cd84bb9bbb055189429a51480613a1e575084516001600160a01b031673f8b109af18cfa614bef1c2899e522d77b3c64c14145b15613a265750425b6bffffffffffffffffffffffff1680151592508310905061313c565b600185608001516001600160a01b03161115613c1b57835160808601516040517f4ed2986d0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b158015613ae357600080fd5b505afa158015613af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b1b9190615dc3565b5090506bffffffffffffffffffffffff811615613c1957845160405163df2c0f4960e01b81526001600160a01b0389811660048301529182166024820152604481018690526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015613ba757600080fd5b505afa158015613bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bdf9190615d8e565b9150506001816bffffffffffffffffffffffff1660001480613c0e575085826bffffffffffffffffffffffff16115b93509350505061313c565b505b61313c565b60808501516001600160a01b031660011415613d0157835160405163df2c0f4960e01b81526001600160a01b0388811660048301529182166024820152604481018590526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015613caa57600080fd5b505afa158015613cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce29190615d8e565b6bffffffffffffffffffffffff1680151594508510925061313c915050565b600185608001516001600160a01b0316118015613d38575083600001516001600160a01b031685608001516001600160a01b031614155b1561313c57835160808601516040517f4ed2986d0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b158015613dc857600080fd5b505afa158015613ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e009190615dc3565b5090506bffffffffffffffffffffffff8116613e7857845160405163df2c0f4960e01b81526001600160a01b0389811660048301529182166024820152604481018690526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401613b90565b5094509492505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091528315613ed057613ec98860000151878785878d60200151613fbd565b9050613ee6565b613ec988600001518960200151898989876141ca565b979650505050505050565b846001600160a01b0316876001600160a01b0316877f606ed05ee5450c129097ad509fc76dd97bde7b9bfc9a935df4671051779e0eb0878787602001518860400151888a600001518b606001518c60800151604051613f95989796959493929190978852951515602088015263ffffffff948516604088015292841660608701529083166080860152821660a0850152151560c08401521660e08201526101000190565b60405180910390a450505050505050565b600081831115613fb65781612ea5565b5090919050565b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015290860151613ff390611b3a565b156140435785516001600160a01b03811661400b5750865b8651600087815260208190526040902061403b91889163ffffffff8916614033576000614035565b845b89614346565b9150506141c0565b821561407b5761271061405e6109c463ffffffff8716615703565b61406891906156cc565b6140789063ffffffff8616615747565b93505b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091528183018890528251808303840181526060909201909252805191012060006140d082611d32565b90506000806140ee8a604001518b6060015163ffffffff1685611da9565b909250905060006140ff8983615833565b63ffffffff1690506380000000811061412a5761412160016380000000615722565b63ffffffff1690505b60008a815260208190526040902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b4263ffffffff16021790556141728382612e86565b60008b815260208190526040902080547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff93841602179055166080860152505050505b9695505050505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152606084015163ffffffff1661425c57604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091528183018690528251808303840181526060909201909252805191012061403b8888888785886143b2565b6142698460200151611b3a565b15614292578351600084815260208190526040902061428b9185918a86614346565b90506141c0565b604080517f00000000000000000000000000000000000000000000000000000000000000006020808301829052828401879052835180840385018152606084018552805190820120608084019290925260a08084018a90528451808503909101815260c09093019093528151919092012060009061430f906122a5565b9050600061431c83612316565b9050600061432984611d32565b905061433b8b8b85858c8c878d6145d8565b9450505050506141c0565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261439486868660008663ffffffff161161438c57600061438e565b865b86612f63565b63ffffffff9091166080820181905215156060820152949350505050565b6040805160a0810182526000808252602080830182905282840182905260608084018390526080840183905284517f0000000000000000000000000000000000000000000000000000000000000000818401528086018a90528551808203870181529101909452835193019290922090919061442d906122a5565b9050600061443a85612316565b90506000614447866123dd565b90506000806360916f808b63ffffffff1611156144865761447c8763ffffffff168461ffff168761ffff168761ffff16612fa4565b90925090506144aa565b6144a48763ffffffff168461ffff168761ffff168761ffff16613145565b90925090505b63ffffffff8083166020880152811661ffff84161480156144d657508163ffffffff168763ffffffff16115b156145c9576144e58288615722565b63ffffffff16608087018190526144fe90600090612e86565b6000808b815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550426000808b8152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff1602179055508b6000808b815260200190815260200160002060000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080866040019063ffffffff16908163ffffffff168152505060018660600190151590811515815250505b50505050509695505050505050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081018290529061460e868686614716565b9050806040015163ffffffff166000148015614630575060008363ffffffff16115b156146f757600085815260208190526040902080547fffffffffffffffff000000000000000000000000000000000000000000000000166001600160a01b038c1617905580516146809084612e86565b6000868152602081905260409020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff938416027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b4284160217905560016060840152831660808301525061470a565b614706818b8b88878d8d6147cf565b9150505b98975050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260008061476b8660400151876060015163ffffffff1686611da9565b915091506000806000806000614781868b614d6c565b9a15158c5263ffffffff998a1660208d01529290981660408b015267ffffffffffffffff90811660608b015296871660808a0152861660a089015250505050911660c0830152509392505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905290806360916f8063ffffffff8916111561483b576148318663ffffffff168b6040015163ffffffff168761ffff168761ffff16612fa4565b9092509050614865565b61485f8663ffffffff168b6040015163ffffffff168761ffff168761ffff16613145565b90925090505b63ffffffff80831660208086019190915282821660408601819052908c01519091161015614c0e5760208a015161489c9082615722565b63ffffffff90811680855260208c0151909116604085015260608b015167ffffffffffffffff161061491f57826000015163ffffffff168a6060018181516148e491906159a5565b67ffffffffffffffff16905250825160808b01805163ffffffff9092169161490d90839061575e565b67ffffffffffffffff169052506149f5565b89606001518a608001818151614935919061575e565b67ffffffffffffffff1690525060608a0151835160009161495b9163ffffffff166159a5565b90508067ffffffffffffffff168b60a0015167ffffffffffffffff16106149c157808b60a00181815161498e91906159a5565b67ffffffffffffffff1690525060c08b0180518291906149af90839061575e565b67ffffffffffffffff169052506149ec565b8a60a001518b60c0018181516149d7919061575e565b67ffffffffffffffff16905250600060a08c01525b50600060608b01525b60608a01516000888152600460205260408120906001614a3660027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614a4090426156cc565b614a4a9190615747565b815260208082019290925260409081016000908120805467ffffffffffffffff191667ffffffffffffffff959095169490941790935560808d01518a84526004909252822090916001614abe60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614ac890426156cc565b614ad29190615747565b815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508960a0015160046000898152602001908152602001600020600060027f0000000000000000000000000000000000000000000000000000000000000000614b5091906156cc565b614b5a90426156cc565b815260208082019290925260409081016000908120805467ffffffffffffffff191667ffffffffffffffff959095169490941790935560c08d01518a8452600490925282209091614bcc60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614bd690426156cc565b815260200190815260200160002060000160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b60008663ffffffff16118015614c375750896020015163ffffffff16836040015163ffffffff16145b15614d1757614c468287615722565b63ffffffff166080840190815260016060850152600088815260208190526040902080547fffffffffffffffff000000000000000000000000000000000000000000000000166001600160a01b038c161790558a519051614ca79190612e86565b6000888152602081905260409020805477ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b63ffffffff938416027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160e01b429390931692909202919091179055614d5f565b8563ffffffff16836020015163ffffffff161415614d5757808a60200151614d3f9190615722565b63ffffffff16608084018190528a51614ca791612e86565b614d5f615def565b5050979650505050505050565b81600080808080614d9e60027f00000000000000000000000000000000000000000000000000000000000000006156cc565b614da890426156cc565b6000888152600460205260408120919250614dc4600184615747565b815260208082019290925260409081016000908120548a8252600490935290812067ffffffffffffffff9092169650614dfe600184615747565b815260208082019290925260409081016000908120548a825260048452828220858352909352205467ffffffffffffffff91821695508181169450680100000000000000009004169150614e7a63ffffffff8716614e5c858861575e565b614e66919061575e565b67ffffffffffffffff1663ffffffff613fa6565b9550509295509295909350565b600060208284031215614e9957600080fd5b5035919050565b803563ffffffff81168114614eb457600080fd5b919050565b600080600060608486031215614ece57600080fd5b83359250614ede60208501614ea0565b9150604084013590509250925092565b6001600160a01b0381168114614f0357600080fd5b50565b60008060008060008060008060008060006101608c8e031215614f2857600080fd5b8b35614f3381614eee565b9a5060208c0135614f4381614eee565b995060408c01359850614f5860608d01614ea0565b9750614f6660808d01614ea0565b9650614f7460a08d01614ea0565b9550614f8260c08d01614ea0565b9450614f9060e08d01614ea0565b9350614f9f6101008d01614ea0565b9250614fae6101208d01614ea0565b9150614fbd6101408d01614ea0565b90509295989b509295989b9093969950565b6101c0810161502c82856001600160a01b038151168252602081015163ffffffff8082166020850152806040840151166040850152806060840151166060850152505060808101511515608083015260a081015160a08301525050565b8251600090810b60c08401526020840151900b60e0830152604083015161ffff908116610100840152606084015116610120830152608083015161507761014084018261ffff169052565b5060a083015161ffff90811661016084015260c0840151811661018084015260e0909301519092166101a090910152919050565b600080604083850312156150be57600080fd5b50508035926020909101359150565b6000808284036101208112156150e257600080fd5b83359250610100601f19820112156150f957600080fd5b506020830190509250929050565b8035614eb481614eee565b60008083601f84011261512457600080fd5b50813567ffffffffffffffff81111561513c57600080fd5b602083019150836020828501011115612d1957600080fd5b60008060008060006080868803121561516c57600080fd5b853561517781614eee565b9450602086013561518781614eee565b935060408601359250606086013567ffffffffffffffff8111156151aa57600080fd5b6151b688828901615112565b969995985093965092949392505050565b6000602082840312156151d957600080fd5b8135612ea581614eee565b8015158114614f0357600080fd5b6000806040838503121561520557600080fd5b823561521081614eee565b91506020830135615220816151e4565b809150509250929050565b6000806000806060858703121561524157600080fd5b843561524c81614eee565b935060208501359250604085013567ffffffffffffffff81111561526f57600080fd5b61527b87828801615112565b95989497509550505050565b60008083601f84011261529957600080fd5b50813567ffffffffffffffff8111156152b157600080fd5b6020830191508360208260051b8501011115612d1957600080fd5b600080602083850312156152df57600080fd5b823567ffffffffffffffff8111156152f657600080fd5b61530285828601615287565b90969095509350505050565b60a0808252835190820181905260009060c090818401906020808801855b8381101561539d5761538d8583516001600160a01b038151168252602081015163ffffffff8082166020850152806040840151166040850152806060840151166060850152505060808101511515608083015260a081015160a08301525050565b938501939082019060010161532c565b50508294506153d981870188805163ffffffff908116835260208083015182169084015260408083015182169084015260609182015116910152565b505050509392505050565b600080604083850312156153f757600080fd5b823561540281614eee565b946020939093013593505050565b60808101611b7f8284805163ffffffff908116835260208083015182169084015260408083015182169084015260609182015116910152565b600060a0828403121561545b57600080fd5b50919050565b60008060006040848603121561547657600080fd5b833561548181614eee565b9250602084013567ffffffffffffffff81111561549d57600080fd5b6154a986828701615287565b9497909650939450505050565b6000602082840312156154c857600080fd5b8151612ea5816151e4565b6000602082840312156154e557600080fd5b8135612ea5816151e4565b634e487b7160e01b600052604160045260246000fd5b600061010080838503121561551a57600080fd5b6040519081019067ffffffffffffffff8211818310171561554b57634e487b7160e01b600052604160045260246000fd5b8160405283358152602084013560208201526040840135604082015260608401359150615577826151e4565b81606082015261558960808501615107565b608082015260a084013560a08201526155a460c08501615107565b60c08201526155b560e08501615107565b60e0820152949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415615602576156026155d8565b5060010190565b600060a0828403121561561b57600080fd5b60405160a0810181811067ffffffffffffffff8211171561564c57634e487b7160e01b600052604160045260246000fd5b604052823561565a81614eee565b8152602083013561566a81614eee565b60208201526040838101359082015261568560608401614ea0565b6060820152608083013560808201528091505092915050565b600082198211156156b1576156b16155d8565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826156db576156db6156b6565b500490565b600063ffffffff808416806156f7576156f76156b6565b92169190910692915050565b600081600019048311821515161561571d5761571d6155d8565b500290565b600063ffffffff8381169083168181101561573f5761573f6155d8565b039392505050565b600082821015615759576157596155d8565b500390565b600067ffffffffffffffff808316818516808303821115615781576157816155d8565b01949350505050565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018312811516156157cd576157cd6155d8565b81607f0183138116156157e2576157e26155d8565b5090039392505050565b600061ffff8083168185168183048111821515161561580d5761580d6155d8565b02949350505050565b600061ffff808316818516808303821115615781576157816155d8565b600063ffffffff808316818516808303821115615781576157816155d8565b60007f8000000000000000000000000000000000000000000000000000000000000000821415615884576158846155d8565b5060000390565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156158c5576158c56155d8565b827f80000000000000000000000000000000000000000000000000000000000000000384128116156158f9576158f96155d8565b50500190565b600060ff821660ff84168160ff0481118215151615615920576159206155d8565b029392505050565b600060ff821660ff84168060ff03821115615945576159456155d8565b019392505050565b60008261595c5761595c6156b6565b500690565b600060ff831680615974576159746156b6565b8060ff84160491505092915050565b600060ff831680615996576159966156b6565b8060ff84160691505092915050565b600067ffffffffffffffff8381169083168181101561573f5761573f6155d8565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff6000821360008413838304851182821616156159ff576159ff6155d8565b6f7fffffffffffffffffffffffffffffff196000851286820586128184161615615a2b57615a2b6155d8565b60008712925085820587128484161615615a4757615a476155d8565b85850587128184161615615a5d57615a5d6155d8565b5050509290910295945050505050565b600081600f0b83600f0b60008212826f7fffffffffffffffffffffffffffffff03821381151615615aa057615aa06155d8565b826f7fffffffffffffffffffffffffffffff19038212811615615ac557615ac56155d8565b50019392505050565b600081600f0b83600f0b60008112816f7fffffffffffffffffffffffffffffff1901831281151615615b0257615b026155d8565b816f7fffffffffffffffffffffffffffffff0183138116156157e2576157e26155d8565b600181815b80851115615b61578160001904821115615b4757615b476155d8565b80851615615b5457918102915b93841c9390800290615b2b565b509250929050565b80825b6001808611615b7b5750615bb6565b816f7fffffffffffffffffffffffffffffff04821115615b9d57615b9d6155d8565b80861615615baa57918102915b9490941c938002615b6c565b935093915050565b6000828015615bd45760018114615bde57615be7565b6001915050611b7f565b82915050611b7f565b5081615bf557506000611b7f565b50600160008213808214615c0e578015615c3557615c57565b826f7fffffffffffffffffffffffffffffff04831115615c3057615c306155d8565b615c57565b826f7fffffffffffffffffffffffffffffff05831215615c5757615c576155d8565b5080831615615c635750805b615c738360011c83840283615b69565b806f7fffffffffffffffffffffffffffffff048211600083131615615c9a57615c9a6155d8565b806f7fffffffffffffffffffffffffffffff19058212600083121615615920576159206155d8565b6000612ea560ff841683600f0b615bbe565b600082615ce357506001611b7f565b81615cf057506000611b7f565b8160018114615bd45760028114615d0657615d22565b60ff841115615d1757615d176155d8565b50506001821b611b7f565b5060208310610133831016604e8410600b8410161715615d45575081810a611b7f565b615d4f8383615b26565b8060001904821115615920576159206155d8565b6000612ea560ff841683615cd4565b80516bffffffffffffffffffffffff81168114614eb457600080fd5b60008060408385031215615da157600080fd5b8251615dac81614eee565b9150615dba60208401615d72565b90509250929050565b60008060408385031215615dd657600080fd5b615ddf83615d72565b9150602083015190509250929050565b634e487b7160e01b600052600160045260246000fdfea264697066735822122066b56b69b1628369d057abd895f8d542f16f984ded6386ae255c113dbfe5e04664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15968,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_planets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Planet)16016_storage)"
      },
      {
        "astId": 15973,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_fleets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Fleet)16023_storage)"
      },
      {
        "astId": 15977,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_stakeReadyToBeWithdrawn",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15983,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15995,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_inFlight",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)15988_storage))"
      },
      {
        "astId": 16007,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_discovered",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Discovered)16004_storage"
      },
      {
        "astId": 16027,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_prevRewardIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16031,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16037,
        "contract": "src/OuterSpace.sol:OuterSpace",
        "label": "_rewardsToWithdraw",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)15988_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct OuterSpace.InFlight))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InFlight)15988_storage)"
      },
      "t_mapping(t_uint256,t_struct(Fleet)16023_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.Fleet)",
        "numberOfBytes": "32",
        "value": "t_struct(Fleet)16023_storage"
      },
      "t_mapping(t_uint256,t_struct(InFlight)15988_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.InFlight)",
        "numberOfBytes": "32",
        "value": "t_struct(InFlight)15988_storage"
      },
      "t_mapping(t_uint256,t_struct(Planet)16016_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OuterSpace.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)16016_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Discovered)16004_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Discovered",
        "members": [
          {
            "astId": 15997,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "minX",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 15999,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "maxX",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16001,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "minY",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16003,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "maxY",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fleet)16023_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Fleet",
        "members": [
          {
            "astId": 16018,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16020,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "launchTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16022,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "quantity",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(InFlight)15988_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.InFlight",
        "members": [
          {
            "astId": 15985,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "flying",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 15987,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "destroyed",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Planet)16016_storage": {
        "encoding": "inplace",
        "label": "struct OuterSpace.Planet",
        "members": [
          {
            "astId": 16009,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16011,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "exitTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16013,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "numSpaceships",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16015,
            "contract": "src/OuterSpace.sol:OuterSpace",
            "label": "lastUpdated",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}