{
  "address": "0xb25de4c8422b9882B0a7eFd2808D73E1E1b9BF3E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "joining",
          "type": "bool"
        }
      ],
      "name": "AllianceLink",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "nonce",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct AllianceRegistry.PlayerSubmission[]",
          "name": "playerSubmissions",
          "type": "tuple[]"
        }
      ],
      "name": "addMultiplePlayersToAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "addPlayerToAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "ejectPlayerFromAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        }
      ],
      "name": "getAllianceData",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "joinTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "getAllianceDataAtSlot",
      "outputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "joinTime",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "player2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "havePlayersAnAllianceInCommon",
      "outputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "joinTime",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "joinAlliance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "joined",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAlliance",
          "name": "alliance",
          "type": "address"
        }
      ],
      "name": "leaveAlliance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x508d17a00bb139c38c22b33881f4f2b0c97634cbe01f1b7f85f651550a3300fe",
  "receipt": {
    "to": null,
    "from": "0xbE19B59E8C588d68f475A407C7BA5fE813AEb792",
    "contractAddress": "0xb25de4c8422b9882B0a7eFd2808D73E1E1b9BF3E",
    "transactionIndex": 3,
    "gasUsed": "2275803",
    "logsBloom": "0x
    "blockHash": "0x87ed1812b5ae2c1bb150ff898048e21ba0954014afeb9f8009c6fcb4ba467b9b",
    "transactionHash": "0x508d17a00bb139c38c22b33881f4f2b0c97634cbe01f1b7f85f651550a3300fe",
    "logs": [],
    "blockNumber": 20964733,
    "cumulativeGasUsed": "2569426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "40ae1f29867b66b4deced9f7221d8843",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"joining\",\"type\":\"bool\"}],\"name\":\"AllianceLink\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct AllianceRegistry.PlayerSubmission[]\",\"name\":\"playerSubmissions\",\"type\":\"tuple[]\"}],\"name\":\"addMultiplePlayersToAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addPlayerToAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"ejectPlayerFromAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"}],\"name\":\"getAllianceData\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"joinTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"getAllianceDataAtSlot\",\"outputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"joinTime\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"havePlayersAnAllianceInCommon\",\"outputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"joinTime\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"joinAlliance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAlliance\",\"name\":\"alliance\",\"type\":\"address\"}],\"name\":\"leaveAlliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/alliances/AllianceRegistry.sol\":\"AllianceRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"src/alliances/AllianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"../interfaces/IAlliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AllianceRegistry is Proxied {\\n    using ECDSA for bytes32;\\n\\n    uint8 internal constant MAX_NUM_ALLIANCES = 4;\\n\\n    mapping(address => mapping(IAlliance => uint256)) internal _allianceNonces;\\n    struct AllianceRow {\\n        IAlliance alliance;\\n        uint96 joinTime;\\n    }\\n    struct Alliances {\\n        AllianceRow alliance0;\\n        AllianceRow alliance1;\\n        AllianceRow alliance2;\\n        AllianceRow alliance3;\\n    }\\n    mapping(address => Alliances) internal _alliances;\\n\\n    event AllianceLink(IAlliance indexed alliance, address indexed player, bool joining);\\n\\n    function getAllianceDataAtSlot(address player, uint8 slot)\\n        external\\n        view\\n        returns (\\n            IAlliance alliance,\\n            uint96 joinTime,\\n            uint256 nonce\\n        )\\n    {\\n        Alliances storage alliances = _alliances[player];\\n        if (slot == 0) {\\n            alliance = alliances.alliance0.alliance;\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (slot == 1) {\\n            alliance = alliances.alliance1.alliance;\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (slot == 2) {\\n            alliance = alliances.alliance2.alliance;\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (slot == 3) {\\n            alliance = alliances.alliance3.alliance;\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n\\n        nonce = _allianceNonces[player][alliance];\\n    }\\n\\n    function getAllianceData(address player, IAlliance alliance)\\n        external\\n        view\\n        returns (uint96 joinTime, uint256 nonce)\\n    {\\n        nonce = _allianceNonces[player][alliance];\\n\\n        Alliances storage alliances = _alliances[player];\\n        if (alliances.alliance0.alliance == alliance) {\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (alliances.alliance1.alliance == alliance) {\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (alliances.alliance2.alliance == alliance) {\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (alliances.alliance3.alliance == alliance) {\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n    }\\n\\n    function havePlayersAnAllianceInCommon(\\n        address player1,\\n        address player2,\\n        uint256 timestamp\\n    ) external view returns (IAlliance alliance, uint96 joinTime) {\\n        Alliances storage p1Alliances = _alliances[player1];\\n        Alliances storage p2Alliances = _alliances[player2];\\n\\n        AllianceRow[4] memory player1Alliances;\\n        AllianceRow[4] memory player2Alliances;\\n        uint256 num1 = 0;\\n        uint256 num2 = 0;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (i == num1) {\\n                AllianceRow memory allianceRow;\\n                if (i == 0) {\\n                    allianceRow = p1Alliances.alliance0;\\n                } else if (i == 1) {\\n                    allianceRow = p1Alliances.alliance1;\\n                } else if (i == 2) {\\n                    allianceRow = p1Alliances.alliance2;\\n                } else if (i == 3) {\\n                    allianceRow = p1Alliances.alliance3;\\n                }\\n                if (address(allianceRow.alliance) == address(0)) {\\n                    // console.log(\\\"p1 exhausted\\\");\\n                    return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                }\\n                player1Alliances[num1++] = allianceRow;\\n            }\\n            for (uint256 j = 0; j < 4; j++) {\\n                if (j == num2) {\\n                    AllianceRow memory allianceRow;\\n                    if (j == 0) {\\n                        allianceRow = p2Alliances.alliance0;\\n                    } else if (j == 1) {\\n                        allianceRow = p2Alliances.alliance1;\\n                    } else if (j == 2) {\\n                        allianceRow = p2Alliances.alliance2;\\n                    } else if (j == 3) {\\n                        allianceRow = p2Alliances.alliance3;\\n                    }\\n                    if (address(allianceRow.alliance) == address(0)) {\\n                        // console.log(\\\"p2 exhausted\\\");\\n                        // return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                        break;\\n                    }\\n                    player2Alliances[num2++] = allianceRow;\\n                }\\n\\n                if (player1Alliances[i].alliance == player2Alliances[j].alliance) {\\n                    if (player1Alliances[i].joinTime >= player2Alliances[j].joinTime) {\\n                        if (player1Alliances[i].joinTime < timestamp) {\\n                            return (player1Alliances[i].alliance, player1Alliances[i].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player1Alliances[i].alliance;\\n                            joinTime = player1Alliances[i].joinTime;\\n                        }\\n                    } else {\\n                        if (player2Alliances[j].joinTime < timestamp) {\\n                            return (player2Alliances[j].alliance, player2Alliances[j].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player2Alliances[j].alliance;\\n                            joinTime = player2Alliances[j].joinTime;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // console.log(address(alliance));\\n        // console.log(joinTime);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM PLAYER\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function joinAlliance(IAlliance alliance, bytes calldata data) external returns (bool joined) {\\n        Alliances storage alliances = _alliances[msg.sender];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            slot++;\\n        }\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        joined = alliance.requestToJoin(msg.sender, data);\\n        if (joined) {\\n            if (slot == 0) {\\n                alliances.alliance0.alliance = alliance;\\n                alliances.alliance0.joinTime = uint96(block.timestamp);\\n            } else if (slot == 1) {\\n                alliances.alliance1.alliance = alliance;\\n                alliances.alliance1.joinTime = uint96(block.timestamp);\\n            } else if (slot == 2) {\\n                alliances.alliance2.alliance = alliance;\\n                alliances.alliance2.joinTime = uint96(block.timestamp);\\n            } else if (slot == 3) {\\n                alliances.alliance3.alliance = alliance;\\n                alliances.alliance3.joinTime = uint96(block.timestamp);\\n            }\\n\\n            emit AllianceLink(alliance, msg.sender, true);\\n        }\\n    }\\n\\n    function leaveAlliance(IAlliance alliance) external {\\n        _leaveAlliance(msg.sender, alliance);\\n        try alliance.playerHasLeft(msg.sender) {} catch {}\\n        // TODO ensure callback not failed due to low gas (1/64 rule)\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM ALLIANCE\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) external {\\n        _addPlayerToAlliance(player, nonce, signature);\\n    }\\n\\n    struct PlayerSubmission {\\n        address addr;\\n        uint32 nonce;\\n        bytes signature;\\n    }\\n\\n    function addMultiplePlayersToAlliance(PlayerSubmission[] calldata playerSubmissions) external {\\n        for (uint256 i = 0; i < playerSubmissions.length; i++) {\\n            _addPlayerToAlliance(playerSubmissions[i].addr, playerSubmissions[i].nonce, playerSubmissions[i].signature);\\n        }\\n    }\\n\\n    function ejectPlayerFromAlliance(address player) external {\\n        _leaveAlliance(player, IAlliance(msg.sender));\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function _addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) internal {\\n        IAlliance alliance = IAlliance(msg.sender);\\n\\n        Alliances storage alliances = _alliances[player];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            require(alliances.alliance0.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            require(alliances.alliance1.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            require(alliances.alliance2.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        require(alliances.alliance3.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        uint256 currentNonce = _allianceNonces[player][alliance];\\n        require(currentNonce == nonce, \\\"INVALID_NONCE\\\");\\n\\n        bytes memory message;\\n        if (nonce == 0) {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n56\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n        } else {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n76\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000 (nonce:          0)\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n            _writeUintAsDecimal(message, 28 + 74, nonce);\\n        }\\n\\n        // console.log(string(message));\\n\\n        bytes32 digest = keccak256(message);\\n\\n        address signer = digest.recover(signature);\\n        require(player == signer, \\\"INVALID_SIGNATURE\\\");\\n\\n        if (slot == 0) {\\n            alliances.alliance0.alliance = alliance;\\n            alliances.alliance0.joinTime = uint96(block.timestamp);\\n        } else if (slot == 1) {\\n            alliances.alliance1.alliance = alliance;\\n            alliances.alliance1.joinTime = uint96(block.timestamp);\\n        } else if (slot == 2) {\\n            alliances.alliance2.alliance = alliance;\\n            alliances.alliance2.joinTime = uint96(block.timestamp);\\n        } else if (slot == 3) {\\n            alliances.alliance3.alliance = alliance;\\n            alliances.alliance3.joinTime = uint96(block.timestamp);\\n        }\\n        _allianceNonces[player][alliance] = nonce + 1;\\n\\n        emit AllianceLink(alliance, player, true);\\n    }\\n\\n    bytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n    bytes internal constant decimalAlphabet = \\\"0123456789\\\";\\n\\n    function _writeUintAsHex(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(hexAlphabet[num % 16]);\\n            num /= 16;\\n        }\\n    }\\n\\n    function _writeUintAsDecimal(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(decimalAlphabet[num % 10]);\\n            num /= 10;\\n        }\\n    }\\n\\n    function _leaveAlliance(address player, IAlliance alliance) internal {\\n        Alliances storage alliances = _alliances[msg.sender];\\n\\n        IAlliance lastSlotAlliance;\\n        uint96 lastSlotJoinTime;\\n\\n        require(address(alliances.alliance0.alliance) != address(0), \\\"NOT_PART_OF_ANY_ALLIANCE\\\");\\n\\n        if (address(alliances.alliance1.alliance) == address(0)) {\\n            lastSlotAlliance = alliances.alliance0.alliance;\\n            lastSlotJoinTime = alliances.alliance0.joinTime;\\n            alliances.alliance0.alliance = IAlliance(address(0));\\n            alliances.alliance0.joinTime = 0;\\n        } else {\\n            if (address(alliances.alliance2.alliance) == address(0)) {\\n                lastSlotAlliance = alliances.alliance1.alliance;\\n                lastSlotJoinTime = alliances.alliance1.joinTime;\\n                alliances.alliance1.alliance = IAlliance(address(0));\\n                alliances.alliance1.joinTime = 0;\\n            } else {\\n                if (address(alliances.alliance3.alliance) == address(0)) {\\n                    lastSlotAlliance = alliances.alliance2.alliance;\\n                    lastSlotJoinTime = alliances.alliance2.joinTime;\\n                    alliances.alliance2.alliance = IAlliance(address(0));\\n                    alliances.alliance2.joinTime = 0;\\n                } else {\\n                    lastSlotAlliance = alliances.alliance3.alliance;\\n                    lastSlotJoinTime = alliances.alliance3.joinTime;\\n                    alliances.alliance3.alliance = IAlliance(address(0));\\n                    alliances.alliance3.joinTime = 0;\\n                }\\n            }\\n        }\\n\\n        if (alliance != lastSlotAlliance) {\\n            if (alliances.alliance0.alliance == alliance) {\\n                alliances.alliance0.alliance = lastSlotAlliance;\\n                alliances.alliance0.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance1.alliance == alliance) {\\n                alliances.alliance1.alliance = lastSlotAlliance;\\n                alliances.alliance1.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance2.alliance == alliance) {\\n                alliances.alliance2.alliance = lastSlotAlliance;\\n                alliances.alliance2.joinTime = lastSlotJoinTime;\\n            } else {\\n                revert(\\\"NOT_PART_OF_THE_ALLIANCE\\\");\\n            }\\n        }\\n\\n        emit AllianceLink(alliance, player, false);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n}\\n\",\"keccak256\":\"0x500fa21ebe8487898b468831025fd837c663803bcdebccb6d5ad19150922371d\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IAlliance {\\n    function requestToJoin(address player, bytes calldata data) external returns (bool);\\n\\n    function playerHasLeft(address player) external;\\n}\\n\",\"keccak256\":\"0x56331cf35f0c52161d22a1094809e4e55b6be6dff3f7c18a3070b325e1afced8\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612882806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636da066301161005b5780636da06630146101535780637a784cb4146101665780638efb75c314610179578063df2c0f491461018c57600080fd5b8063137672021461008d57806317e796ea146100e45780634ed2986d146100f95780635f3f7a9a14610130575b600080fd5b6100a061009b36600461232e565b6101d8565b6040805173ffffffffffffffffffffffffffffffffffffffff90941684526bffffffffffffffffffffffff9092166020840152908201526060015b60405180910390f35b6100f76100f236600461236d565b61038f565b005b61010c610107366004612391565b61039c565b604080516bffffffffffffffffffffffff90931683526020830191909152016100db565b61014361013e366004612401565b61051f565b60405190151581526020016100db565b6100f761016136600461246f565b61087f565b6100f761017436600461236d565b610891565b6100f76101873660046124d2565b61091a565b61019f61019a366004612547565b6109dd565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526bffffffffffffffffffffffff9091166020830152016100db565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208190819060ff851661025157805473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169250610352565b8460ff16600114156102a857600181015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169250610352565b8460ff16600214156102ff57600281015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169250610352565b8460ff166003141561035257600381015473ffffffffffffffffffffffffffffffffffffffff811694507401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692505b505073ffffffffffffffffffffffffffffffffffffffff938416600090815260208181526040808320968516835295905293909320549093909150565b6103998133611031565b50565b73ffffffffffffffffffffffffffffffffffffffff80831660008181526020818152604080832086861680855290835281842054948452600190925282208054929490921614156104165780547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169250610517565b600181015473ffffffffffffffffffffffffffffffffffffffff8581169116141561046d5760018101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169250610517565b600281015473ffffffffffffffffffffffffffffffffffffffff858116911614156104c45760028101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169250610517565b600381015473ffffffffffffffffffffffffffffffffffffffff858116911614156105175760038101547401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1692505b509250929050565b3360009081526001602052604081208054829073ffffffffffffffffffffffffffffffffffffffff161561055b5780610557816125b7565b9150505b600182015473ffffffffffffffffffffffffffffffffffffffff16156105895780610585816125b7565b9150505b600282015473ffffffffffffffffffffffffffffffffffffffff16156105b757806105b3816125b7565b9150505b600382015473ffffffffffffffffffffffffffffffffffffffff161561063e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d41585f4e554d5f414c4c49414e4345535f524541434845440000000000000060448201526064015b60405180910390fd5b6040517f1d99b55400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690631d99b55490610694903390899089906004016125f0565b602060405180830381600087803b1580156106ae57600080fd5b505af11580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e6919061265a565b925082156108765780610738576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716178255610827565b8060011415610789576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716176001830155610827565b80600214156107da576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8716176002830155610827565b8060031415610827576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff87161760038301555b60405160018152339073ffffffffffffffffffffffffffffffffffffffff8816907f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb099060200160405180910390a35b50509392505050565b61088b8484848461149e565b50505050565b61089b3382611031565b6040517f9192e30200000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821690639192e30290602401600060405180830381600087803b15801561090257600080fd5b505af1925050508015610913575060015b6103995750565b60005b818110156109d8576109c683838381811061093a5761093a61267c565b905060200281019061094c91906126ab565b61095a90602081019061236d565b84848481811061096c5761096c61267c565b905060200281019061097e91906126ab565b61098f9060408101906020016126e9565b8585858181106109a1576109a161267c565b90506020028101906109b391906126ab565b6109c1906040810190612704565b61149e565b806109d0816125b7565b91505061091d565b505050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600160205260408082209285168252812090918291610a176122d3565b610a1f6122d3565b60008060005b60048110156110215782811415610c1557604080518082019091526000808252602082015281610aa5575060408051808201909152875473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610bc7565b8160011415610b07575060408051808201909152600188015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610bc7565b8160021415610b69575060408051808201909152600288015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610bc7565b8160031415610bc7575060408051808201909152600388015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1660208201525b805173ffffffffffffffffffffffffffffffffffffffff16610bf0575050505050505050611029565b808685610bfc816125b7565b965060048110610c0e57610c0e61267c565b6020020152505b60005b600481101561100e5782811415610e0157604080518082019091526000808252602082015281610c98575060408051808201909152875473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610dba565b8160011415610cfa575060408051808201909152600188015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610dba565b8160021415610d5c575060408051808201909152600288015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff166020820152610dba565b8160031415610dba575060408051808201909152600388015473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff1660208201525b805173ffffffffffffffffffffffffffffffffffffffff16610ddc575061100e565b808685610de8816125b7565b965060048110610dfa57610dfa61267c565b6020020152505b848160048110610e1357610e1361267c565b60200201515173ffffffffffffffffffffffffffffffffffffffff16868360048110610e4157610e4161267c565b60200201515173ffffffffffffffffffffffffffffffffffffffff161415610ffc57848160048110610e7557610e7561267c565b6020020151602001516bffffffffffffffffffffffff16868360048110610e9e57610e9e61267c565b6020020151602001516bffffffffffffffffffffffff1610610f6a578a868360048110610ecd57610ecd61267c565b6020020151602001516bffffffffffffffffffffffff161015610f2e57858260048110610efc57610efc61267c565b602002015151868360048110610f1457610f1461267c565b602002015160200151995099505050505050505050611029565b858260048110610f4057610f4061267c565b6020020151519950858260048110610f5a57610f5a61267c565b6020020151602001519850610ffc565b8a858260048110610f7d57610f7d61267c565b6020020151602001516bffffffffffffffffffffffff161015610fc457848160048110610fac57610fac61267c565b602002015151858260048110610f1457610f1461267c565b848160048110610fd657610fd661267c565b6020020151519950848160048110610ff057610ff061267c565b60200201516020015198505b80611006816125b7565b915050610c18565b5080611019816125b7565b915050610a25565b505050505050505b935093915050565b3360009081526001602052604081208054909190819073ffffffffffffffffffffffffffffffffffffffff166110c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f504152545f4f465f414e595f414c4c49414e434500000000000000006044820152606401610635565b600183015473ffffffffffffffffffffffffffffffffffffffff1661112d57505080546000825573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16611257565b600283015473ffffffffffffffffffffffffffffffffffffffff1661119c575050600181018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16611257565b600383015473ffffffffffffffffffffffffffffffffffffffff1661120b575050600281018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16611257565b5050600381018054600090915573ffffffffffffffffffffffffffffffffffffffff8116907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff165b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461142d57825473ffffffffffffffffffffffffffffffffffffffff858116911614156112f1576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff831617835561142d565b600183015473ffffffffffffffffffffffffffffffffffffffff8581169116141561135e576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff831617600184015561142d565b600283015473ffffffffffffffffffffffffffffffffffffffff858116911614156113cb576bffffffffffffffffffffffff8116740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff831617600284015561142d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e4f545f504152545f4f465f5448455f414c4c49414e434500000000000000006044820152606401610635565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb09600060405161148f911515815260200190565b60405180910390a35050505050565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260016020526040812080543393919291161561156357815473ffffffffffffffffffffffffffffffffffffffff84811691161415611555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e45440000000000000000000000000000000000006044820152606401610635565b8061155f816125b7565b9150505b600182015473ffffffffffffffffffffffffffffffffffffffff161561161857600182015473ffffffffffffffffffffffffffffffffffffffff8481169116141561160a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e45440000000000000000000000000000000000006044820152606401610635565b80611614816125b7565b9150505b600282015473ffffffffffffffffffffffffffffffffffffffff16156116cd57600282015473ffffffffffffffffffffffffffffffffffffffff848116911614156116bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e45440000000000000000000000000000000000006044820152606401610635565b806116c9816125b7565b9150505b600382015473ffffffffffffffffffffffffffffffffffffffff84811691161415611754576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f414c52454144595f4a4f494e45440000000000000000000000000000000000006044820152606401610635565b600382015473ffffffffffffffffffffffffffffffffffffffff16156117d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4d41585f4e554d5f414c4c49414e4345535f52454143484544000000000000006044820152606401610635565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152602081815260408083209387168352929052205463ffffffff87168114611876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f4e4f4e4345000000000000000000000000000000000000006044820152606401610635565b606063ffffffff881661193c576040517f19457468657265756d205369676e6564204d6573736167653a0a35360000000060208201527f4a6f696e20416c6c69616e636520307830303030303030303030303030303030603c8201527f3030303030303030303030303030303030303030303030300000000000000000605c820152607401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905061193781605333611cd2565b611a28565b6040517f19457468657265756d205369676e6564204d6573736167653a0a37360000000060208201527f4a6f696e20416c6c69616e636520307830303030303030303030303030303030603c8201527f30303030303030303030303030303030303030303030303020286e6f6e63653a605c8201527f2020202020202020202030290000000000000000000000000000000000000000607c820152608801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529050611a1681605333611cd2565b611a288160668a63ffffffff16611dac565b6000818051906020012090506000611a7889898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050611e869050565b90508073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614611b0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e41545552450000000000000000000000000000006044820152606401610635565b84611b59576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816178655611c48565b8460011415611baa576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816176001870155611c48565b8460021415611bfb576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff8816176002870155611c48565b8460031415611c48576bffffffffffffffffffffffff4216740100000000000000000000000000000000000000000273ffffffffffffffffffffffffffffffffffffffff88161760038701555b611c538a6001612769565b73ffffffffffffffffffffffffffffffffffffffff8c8116600081815260208181526040808320948d168084529482529182902063ffffffff95909516909455516001815290927f5e60402083b3427099886174996f295e5e29d12bbe871aef1041e9a4324cdb09910160405180910390a35050505050505050505050565b80156109d8576040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152611d1790836127c0565b81518110611d2757611d2761267c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611d59816127d4565b945081518110611d6b57611d6b61267c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611da5601082612809565b9050611cd2565b80156109d85760408051808201909152600a8082527f30313233343536373839000000000000000000000000000000000000000000006020830152611df190836127c0565b81518110611e0157611e0161267c565b01602001517fff00000000000000000000000000000000000000000000000000000000000000168383611e33816127d4565b945081518110611e4557611e4561267c565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611e7f600a82612809565b9050611dac565b6000806000611e958585611eaa565b91509150611ea281611f1a565b509392505050565b600080825160411415611ee15760208301516040840151606085015160001a611ed587828585612173565b94509450505050611f13565b825160401415611f0b5760208301516040840151611f0086838361228b565b935093505050611f13565b506000905060025b9250929050565b6000816004811115611f2e57611f2e61281d565b1415611f375750565b6001816004811115611f4b57611f4b61281d565b1415611fb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610635565b6002816004811115611fc757611fc761281d565b141561202f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610635565b60038160048111156120435761204361281d565b14156120d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610635565b60048160048111156120e5576120e561281d565b1415610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610635565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156121aa5750600090506003612282565b8460ff16601b141580156121c257508460ff16601c14155b156121d35750600090506004612282565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612227573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661227b57600060019250925050612282565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b016122c587828885612173565b935093505050935093915050565b60405180608001604052806004905b60408051808201909152600080825260208201528152602001906001900390816122e25790505090565b73ffffffffffffffffffffffffffffffffffffffff8116811461039957600080fd5b6000806040838503121561234157600080fd5b823561234c8161230c565b9150602083013560ff8116811461236257600080fd5b809150509250929050565b60006020828403121561237f57600080fd5b813561238a8161230c565b9392505050565b600080604083850312156123a457600080fd5b82356123af8161230c565b915060208301356123628161230c565b60008083601f8401126123d157600080fd5b50813567ffffffffffffffff8111156123e957600080fd5b602083019150836020828501011115611f1357600080fd5b60008060006040848603121561241657600080fd5b83356124218161230c565b9250602084013567ffffffffffffffff81111561243d57600080fd5b612449868287016123bf565b9497909650939450505050565b803563ffffffff8116811461246a57600080fd5b919050565b6000806000806060858703121561248557600080fd5b84356124908161230c565b935061249e60208601612456565b9250604085013567ffffffffffffffff8111156124ba57600080fd5b6124c6878288016123bf565b95989497509550505050565b600080602083850312156124e557600080fd5b823567ffffffffffffffff808211156124fd57600080fd5b818501915085601f83011261251157600080fd5b81358181111561252057600080fd5b8660208260051b850101111561253557600080fd5b60209290920196919550909350505050565b60008060006060848603121561255c57600080fd5b83356125678161230c565b925060208401356125778161230c565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156125e9576125e9612588565b5060010190565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60006020828403121561266c57600080fd5b8151801515811461238a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126126df57600080fd5b9190910192915050565b6000602082840312156126fb57600080fd5b61238a82612456565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261273957600080fd5b83018035915067ffffffffffffffff82111561275457600080fd5b602001915036819003821315611f1357600080fd5b600063ffffffff80831681851680830382111561278857612788612588565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826127cf576127cf612791565b500690565b6000816127e3576127e3612588565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008261281857612818612791565b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea264697066735822122088bd0562504df11cccaec3951229fb0e675af52457f19110fce518e8a4a9af7064736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10778,
        "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
        "label": "_allianceNonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_contract(IAlliance)15134,t_uint256))"
      },
      {
        "astId": 10802,
        "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
        "label": "_alliances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Alliances)10797_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAlliance)15134": {
        "encoding": "inplace",
        "label": "contract IAlliance",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IAlliance)15134,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IAlliance => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IAlliance)15134,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Alliances)10797_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AllianceRegistry.Alliances)",
        "numberOfBytes": "32",
        "value": "t_struct(Alliances)10797_storage"
      },
      "t_mapping(t_contract(IAlliance)15134,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IAlliance)15134",
        "label": "mapping(contract IAlliance => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AllianceRow)10784_storage": {
        "encoding": "inplace",
        "label": "struct AllianceRegistry.AllianceRow",
        "members": [
          {
            "astId": 10781,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IAlliance)15134"
          },
          {
            "astId": 10783,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "joinTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Alliances)10797_storage": {
        "encoding": "inplace",
        "label": "struct AllianceRegistry.Alliances",
        "members": [
          {
            "astId": 10787,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance0",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AllianceRow)10784_storage"
          },
          {
            "astId": 10790,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance1",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(AllianceRow)10784_storage"
          },
          {
            "astId": 10793,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance2",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(AllianceRow)10784_storage"
          },
          {
            "astId": 10796,
            "contract": "src/alliances/AllianceRegistry.sol:AllianceRegistry",
            "label": "alliance3",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AllianceRow)10784_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}