{
  "address": "0xa137366eA287926E96C00D80fcB5225a1a68633C",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "contract AllianceRegistry",
              "name": "allianceRegistry",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "genesis",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "resolveWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timePerDistance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "acquireNumSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "productionSpeedUp",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "frontrunningDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productionCapAsDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upkeepProductionDecreaseRatePer10000th",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fleetSizeFactor6",
              "type": "uint256"
            }
          ],
          "internalType": "struct OuterSpaceFacetBase.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "ExitComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destinationOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destination",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "gift",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fleetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inFlightFleetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "inFlightPlanetLoss",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "accumulatedDefenseAdded",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "accumulatedAttackAdded",
          "type": "uint32"
        }
      ],
      "name": "FleetArrived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "FleetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "minX",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxX",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "minY",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxY",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acquirer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "travelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "overflow",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "PlanetStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "giver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStake",
          "type": "uint256"
        }
      ],
      "name": "StakeToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "origin",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "TravelingUpkeepReductionFromDestruction",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "getFleet",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "launchTime",
          "type": "uint40"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "flyingAtLaunch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "destroyedAtLaunch",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "arrivalTimeWanted",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "gift",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "specific",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "secret",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "fleetSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct ImportingOuterSpaceTypes.FleetResolution",
          "name": "resolution",
          "type": "tuple"
        }
      ],
      "name": "resolveFleet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "toHash",
          "type": "bytes32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fleetSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fleetOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "quantity",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "toHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ImportingOuterSpaceTypes.FleetLaunch",
          "name": "launch",
          "type": "tuple"
        }
      ],
      "name": "sendFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [
    {
      "stakingToken": "0x1501c5E8Ee6cacE2a72844fE915F469db5667a38",
      "allianceRegistry": "0x62aa7B084801BFD8F2B32480C80e321290E79A47",
      "genesis": "0xee563ebbe85edccc120c5082a5066539b0e9b7958b5fbac114523a95a8162667",
      "resolveWindow": 1728,
      "timePerDistance": 288,
      "exitDuration": 10368,
      "acquireNumSpaceships": 100000,
      "productionSpeedUp": 25,
      "frontrunningDelay": 72,
      "productionCapAsDuration": 259200,
      "upkeepProductionDecreaseRatePer10000th": 5000,
      "fleetSizeFactor6": 500000
    }
  ],
  "numDeployments": 1,
  "linkedData": {
    "genesisHash": "0xee563ebbe85edccc120c5082a5066539b0e9b7958b5fbac114523a95a8162667",
    "resolveWindow": 1728,
    "timePerDistance": 288,
    "exitDuration": 10368,
    "acquireNumSpaceships": 100000,
    "productionSpeedUp": 25,
    "chainGenesisHash": "",
    "frontrunningDelay": 72,
    "productionCapAsDuration": 259200,
    "upkeepProductionDecreaseRatePer10000th": 5000,
    "fleetSizeFactor6": 500000
  },
  "solcInputHash": "54031a5456ab27c09a0d821c4b18f56f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract AllianceRegistry\",\"name\":\"allianceRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"resolveWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePerDistance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"acquireNumSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"productionSpeedUp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"frontrunningDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productionCapAsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upkeepProductionDecreaseRatePer10000th\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fleetSizeFactor6\",\"type\":\"uint256\"}],\"internalType\":\"struct OuterSpaceFacetBase.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"ExitComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destination\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fleetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inFlightFleetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"inFlightPlanetLoss\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"accumulatedDefenseAdded\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"accumulatedAttackAdded\",\"type\":\"uint32\"}],\"name\":\"FleetArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"FleetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minX\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxX\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minY\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxY\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acquirer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"travelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"overflow\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"PlanetStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"StakeToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"TravelingUpkeepReductionFromDestruction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"getFleet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"launchTime\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"flyingAtLaunch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"destroyedAtLaunch\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrivalTimeWanted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"specific\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct ImportingOuterSpaceTypes.FleetResolution\",\"name\":\"resolution\",\"type\":\"tuple\"}],\"name\":\"resolveFleet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ImportingOuterSpaceTypes.FleetLaunch\",\"name\":\"launch\",\"type\":\"tuple\"}],\"name\":\"sendFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/outerspace/facets/OuterSpaceFleetsFacet.sol\":\"OuterSpaceFleetsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/alliances/AllianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"../interfaces/IAlliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AllianceRegistry is Proxied {\\n    using ECDSA for bytes32;\\n\\n    uint8 internal constant MAX_NUM_ALLIANCES = 4;\\n\\n    mapping(address => mapping(IAlliance => uint256)) internal _allianceNonces;\\n    struct AllianceRow {\\n        IAlliance alliance;\\n        uint96 joinTime;\\n    }\\n    struct Alliances {\\n        AllianceRow alliance0;\\n        AllianceRow alliance1;\\n        AllianceRow alliance2;\\n        AllianceRow alliance3;\\n    }\\n    mapping(address => Alliances) internal _alliances;\\n\\n    event AllianceLink(IAlliance indexed alliance, address indexed player, bool joining);\\n\\n    function getAllianceDataAtSlot(address player, uint8 slot)\\n        external\\n        view\\n        returns (\\n            IAlliance alliance,\\n            uint96 joinTime,\\n            uint256 nonce\\n        )\\n    {\\n        Alliances storage alliances = _alliances[player];\\n        if (slot == 0) {\\n            alliance = alliances.alliance0.alliance;\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (slot == 1) {\\n            alliance = alliances.alliance1.alliance;\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (slot == 2) {\\n            alliance = alliances.alliance2.alliance;\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (slot == 3) {\\n            alliance = alliances.alliance3.alliance;\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n\\n        nonce = _allianceNonces[player][alliance];\\n    }\\n\\n    function getAllianceData(address player, IAlliance alliance)\\n        external\\n        view\\n        returns (uint96 joinTime, uint256 nonce)\\n    {\\n        nonce = _allianceNonces[player][alliance];\\n\\n        Alliances storage alliances = _alliances[player];\\n        if (alliances.alliance0.alliance == alliance) {\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (alliances.alliance1.alliance == alliance) {\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (alliances.alliance2.alliance == alliance) {\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (alliances.alliance3.alliance == alliance) {\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n    }\\n\\n    function havePlayersAnAllianceInCommon(\\n        address player1,\\n        address player2,\\n        uint256 timestamp\\n    ) external view returns (IAlliance alliance, uint96 joinTime) {\\n        Alliances storage p1Alliances = _alliances[player1];\\n        Alliances storage p2Alliances = _alliances[player2];\\n\\n        AllianceRow[4] memory player1Alliances;\\n        AllianceRow[4] memory player2Alliances;\\n        uint256 num1 = 0;\\n        uint256 num2 = 0;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (i == num1) {\\n                AllianceRow memory allianceRow;\\n                if (i == 0) {\\n                    allianceRow = p1Alliances.alliance0;\\n                } else if (i == 1) {\\n                    allianceRow = p1Alliances.alliance1;\\n                } else if (i == 2) {\\n                    allianceRow = p1Alliances.alliance2;\\n                } else if (i == 3) {\\n                    allianceRow = p1Alliances.alliance3;\\n                }\\n                if (address(allianceRow.alliance) == address(0)) {\\n                    // console.log(\\\"p1 exhausted\\\");\\n                    return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                }\\n                player1Alliances[num1++] = allianceRow;\\n            }\\n            for (uint256 j = 0; j < 4; j++) {\\n                if (j == num2) {\\n                    AllianceRow memory allianceRow;\\n                    if (j == 0) {\\n                        allianceRow = p2Alliances.alliance0;\\n                    } else if (j == 1) {\\n                        allianceRow = p2Alliances.alliance1;\\n                    } else if (j == 2) {\\n                        allianceRow = p2Alliances.alliance2;\\n                    } else if (j == 3) {\\n                        allianceRow = p2Alliances.alliance3;\\n                    }\\n                    if (address(allianceRow.alliance) == address(0)) {\\n                        // console.log(\\\"p2 exhausted\\\");\\n                        // return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                        break;\\n                    }\\n                    player2Alliances[num2++] = allianceRow;\\n                }\\n\\n                if (player1Alliances[i].alliance == player2Alliances[j].alliance) {\\n                    if (player1Alliances[i].joinTime >= player2Alliances[j].joinTime) {\\n                        if (player1Alliances[i].joinTime < timestamp) {\\n                            return (player1Alliances[i].alliance, player1Alliances[i].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player1Alliances[i].alliance;\\n                            joinTime = player1Alliances[i].joinTime;\\n                        }\\n                    } else {\\n                        if (player2Alliances[j].joinTime < timestamp) {\\n                            return (player2Alliances[j].alliance, player2Alliances[j].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player2Alliances[j].alliance;\\n                            joinTime = player2Alliances[j].joinTime;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // console.log(address(alliance));\\n        // console.log(joinTime);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM PLAYER\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function joinAlliance(IAlliance alliance, bytes calldata data) external returns (bool joined) {\\n        Alliances storage alliances = _alliances[msg.sender];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            slot++;\\n        }\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        joined = alliance.requestToJoin(msg.sender, data);\\n        if (joined) {\\n            if (slot == 0) {\\n                alliances.alliance0.alliance = alliance;\\n                alliances.alliance0.joinTime = uint96(block.timestamp);\\n            } else if (slot == 1) {\\n                alliances.alliance1.alliance = alliance;\\n                alliances.alliance1.joinTime = uint96(block.timestamp);\\n            } else if (slot == 2) {\\n                alliances.alliance2.alliance = alliance;\\n                alliances.alliance2.joinTime = uint96(block.timestamp);\\n            } else if (slot == 3) {\\n                alliances.alliance3.alliance = alliance;\\n                alliances.alliance3.joinTime = uint96(block.timestamp);\\n            }\\n\\n            emit AllianceLink(alliance, msg.sender, true);\\n        }\\n    }\\n\\n    function leaveAlliance(IAlliance alliance) external {\\n        _leaveAlliance(msg.sender, alliance);\\n        try alliance.playerHasLeft(msg.sender) {} catch {}\\n        // TODO ensure callback not failed due to low gas (1/64 rule)\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM ALLIANCE\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) external {\\n        _addPlayerToAlliance(player, nonce, signature);\\n    }\\n\\n    struct PlayerSubmission {\\n        address addr;\\n        uint32 nonce;\\n        bytes signature;\\n    }\\n\\n    function addMultiplePlayersToAlliance(PlayerSubmission[] calldata playerSubmissions) external {\\n        for (uint256 i = 0; i < playerSubmissions.length; i++) {\\n            _addPlayerToAlliance(playerSubmissions[i].addr, playerSubmissions[i].nonce, playerSubmissions[i].signature);\\n        }\\n    }\\n\\n    function ejectPlayerFromAlliance(address player) external {\\n        _leaveAlliance(player, IAlliance(msg.sender));\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function _addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) internal {\\n        IAlliance alliance = IAlliance(msg.sender);\\n\\n        Alliances storage alliances = _alliances[player];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            require(alliances.alliance0.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            require(alliances.alliance1.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            require(alliances.alliance2.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        require(alliances.alliance3.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        uint256 currentNonce = _allianceNonces[player][alliance];\\n        require(currentNonce == nonce, \\\"INVALID_NONCE\\\");\\n\\n        bytes memory message;\\n        if (nonce == 0) {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n56\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n        } else {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n76\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000 (nonce:          0)\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n            _writeUintAsDecimal(message, 28 + 74, nonce);\\n        }\\n\\n        // console.log(string(message));\\n\\n        bytes32 digest = keccak256(message);\\n\\n        address signer = digest.recover(signature);\\n        require(player == signer, \\\"INVALID_SIGNATURE\\\");\\n\\n        if (slot == 0) {\\n            alliances.alliance0.alliance = alliance;\\n            alliances.alliance0.joinTime = uint96(block.timestamp);\\n        } else if (slot == 1) {\\n            alliances.alliance1.alliance = alliance;\\n            alliances.alliance1.joinTime = uint96(block.timestamp);\\n        } else if (slot == 2) {\\n            alliances.alliance2.alliance = alliance;\\n            alliances.alliance2.joinTime = uint96(block.timestamp);\\n        } else if (slot == 3) {\\n            alliances.alliance3.alliance = alliance;\\n            alliances.alliance3.joinTime = uint96(block.timestamp);\\n        }\\n        _allianceNonces[player][alliance] = nonce + 1;\\n\\n        emit AllianceLink(alliance, player, true);\\n    }\\n\\n    bytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n    bytes internal constant decimalAlphabet = \\\"0123456789\\\";\\n\\n    function _writeUintAsHex(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(hexAlphabet[num % 16]);\\n            num /= 16;\\n        }\\n    }\\n\\n    function _writeUintAsDecimal(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(decimalAlphabet[num % 10]);\\n            num /= 10;\\n        }\\n    }\\n\\n    function _leaveAlliance(address player, IAlliance alliance) internal {\\n        Alliances storage alliances = _alliances[msg.sender];\\n\\n        IAlliance lastSlotAlliance;\\n        uint96 lastSlotJoinTime;\\n\\n        require(address(alliances.alliance0.alliance) != address(0), \\\"NOT_PART_OF_ANY_ALLIANCE\\\");\\n\\n        if (address(alliances.alliance1.alliance) == address(0)) {\\n            lastSlotAlliance = alliances.alliance0.alliance;\\n            lastSlotJoinTime = alliances.alliance0.joinTime;\\n            alliances.alliance0.alliance = IAlliance(address(0));\\n            alliances.alliance0.joinTime = 0;\\n        } else {\\n            if (address(alliances.alliance2.alliance) == address(0)) {\\n                lastSlotAlliance = alliances.alliance1.alliance;\\n                lastSlotJoinTime = alliances.alliance1.joinTime;\\n                alliances.alliance1.alliance = IAlliance(address(0));\\n                alliances.alliance1.joinTime = 0;\\n            } else {\\n                if (address(alliances.alliance3.alliance) == address(0)) {\\n                    lastSlotAlliance = alliances.alliance2.alliance;\\n                    lastSlotJoinTime = alliances.alliance2.joinTime;\\n                    alliances.alliance2.alliance = IAlliance(address(0));\\n                    alliances.alliance2.joinTime = 0;\\n                } else {\\n                    lastSlotAlliance = alliances.alliance3.alliance;\\n                    lastSlotJoinTime = alliances.alliance3.joinTime;\\n                    alliances.alliance3.alliance = IAlliance(address(0));\\n                    alliances.alliance3.joinTime = 0;\\n                }\\n            }\\n        }\\n\\n        if (alliance != lastSlotAlliance) {\\n            if (alliances.alliance0.alliance == alliance) {\\n                alliances.alliance0.alliance = lastSlotAlliance;\\n                alliances.alliance0.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance1.alliance == alliance) {\\n                alliances.alliance1.alliance = lastSlotAlliance;\\n                alliances.alliance1.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance2.alliance == alliance) {\\n                alliances.alliance2.alliance = lastSlotAlliance;\\n                alliances.alliance2.joinTime = lastSlotJoinTime;\\n            } else {\\n                revert(\\\"NOT_PART_OF_THE_ALLIANCE\\\");\\n            }\\n        }\\n\\n        emit AllianceLink(alliance, player, false);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n}\\n\",\"keccak256\":\"0x500fa21ebe8487898b468831025fd837c663803bcdebccb6d5ad19150922371d\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IAlliance {\\n    function requestToJoin(address player, bytes calldata data) external returns (bool);\\n\\n    function playerHasLeft(address player) external;\\n}\\n\",\"keccak256\":\"0x56331cf35f0c52161d22a1094809e4e55b6be6dff3f7c18a3070b325e1afced8\",\"license\":\"AGPL-3.0\"},\"src/libraries/Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\n// TODO remove\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Extraction {\\n    function value(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 size\\n    ) internal pure returns (uint256) {\\n        return uint256((data >> leastSignificantBit)) % 2**size;\\n    }\\n\\n    function value8Mod(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 mod\\n    ) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % mod);\\n    }\\n\\n    function value8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % 2**8);\\n    }\\n\\n    // 1+1+2+3+4+6+7+8+8+7+6+4+3+2+1+1 // aproximation of normal distribution with mean=7.5 and standard deviation=3 for 16 values\\n    bytes32 constant n_m7_5_sd3 = 0x01223334444555555666666677777777888888889999999AAAAAABBBBCCCDDEF;\\n\\n    function normal8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        uint8 index = value8Mod(data, leastSignificantBit, 64);\\n        uint8 first = index / 2;\\n        uint8 second = index % 2;\\n        uint8 slot = uint8(n_m7_5_sd3[first]);\\n        if (second == 0) {\\n            return slot >> 4;\\n        } else {\\n            return slot % 16;\\n        }\\n    }\\n\\n    function normal16(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        bytes32 selection\\n    ) internal pure returns (uint16) {\\n        uint8 index = normal8(data, leastSignificantBit);\\n        return uint16(uint8(selection[index * 2])) * 2**8 + uint16(uint8(selection[index * 2 + 1]));\\n    }\\n}\\n\",\"keccak256\":\"0x4264ffbd03c4be49f317ed019abbe0594051606df36e7a707d74456b49130c86\",\"license\":\"AGPL-3.0\"},\"src/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nlibrary Math {\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require(b == 0 || a == 0 || ((c = a * b) / b) == a, overflowError);\\n    }\\n\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a + b) >= a, overflowError);\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory underflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, underflowError);\\n    }\\n\\n    function mul18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, b18, overflowError) / 10**18;\\n    }\\n\\n    function div18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, 10**18, overflowError) / b18;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function smin(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function smax(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function sqrt(uint256 a) internal pure returns (uint256 c) {\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2d7dff3199295e64e0b6361f8533fb093bfdbd6a60154cadd1d4f6619281260\",\"license\":\"AGPL-3.0\"},\"src/outerspace/base/ImportingOuterSpaceConstants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ncontract ImportingOuterSpaceConstants {\\n    uint256 internal constant DECIMALS_18 = 1e18;\\n    uint32 internal constant ACTIVE_MASK = 2**31;\\n    int256 internal constant UINT32_MAX = 2**32 - 1;\\n    int256 internal constant UINT32_MIN = -2147483648;\\n\\n    int256 internal constant EXPANSION = 8;\\n    uint32 internal constant INITIAL_SPACE = 16;\\n    uint256 internal constant GIFT_TAX_PER_10000 = 2500;\\n\\n    uint256 internal constant COMBAT_RULE_SWITCH_TIME = 1620144000; // Tuesday, 4 May 2021 16:00:00 GMT\\n}\\n\",\"keccak256\":\"0xdfd9d8ccaaa0a4485afaaa12d9f44f89eb2bd4bf95e6687ba3efd215e9ed17a4\",\"license\":\"AGPL-3.0\"},\"src/outerspace/base/UsingOuterSpaceDataLayout.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\n\\ncontract UsingOuterSpaceDataLayout is ImportingOuterSpaceTypes {\\n    mapping(uint256 => Planet) internal _planets;\\n    mapping(uint256 => Fleet) internal _fleets;\\n\\n    mapping(address => uint256) internal _stakeReadyToBeWithdrawn;\\n\\n    mapping(address => mapping(address => bool)) internal _operators;\\n\\n    // TODO make it namespaces per user, currently it is possible (though unlikely) for 2 users to share a slot if one attack another and quickly send away spaceships\\n    mapping(uint256 => mapping(uint256 => InFlight)) internal _inFlight;\\n\\n    Discovered internal _discovered;\\n    // rewards\\n    mapping(address => uint256) internal _prevRewardIds;\\n    mapping(uint256 => uint256) internal _rewards;\\n    mapping(address => mapping(uint256 => bool)) internal _rewardsToWithdraw;\\n\\n    // This adds 20,000 gas to all resolution\\n    mapping(uint256 => mapping(address => mapping(uint256 => AccumulatedAttack))) internal _attacks;\\n\\n    // remove\\n    // mapping(address => Account) internal _accounts;\\n}\\n\",\"keccak256\":\"0x101bd8f6d39a9f594f377ae36bbe007604b04a06af4737766ec2745fdcbf91d1\",\"license\":\"AGPL-3.0\"},\"src/outerspace/events/ImportingOuterSpaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface ImportingOuterSpaceEvents {\\n    event PlanetStake(\\n        address indexed acquirer,\\n        uint256 indexed location,\\n        uint32 numSpaceships,\\n        int40 travelingUpkeep,\\n        uint32 overflow,\\n        uint256 stake\\n    );\\n    event FleetSent(\\n        address indexed fleetSender,\\n        address indexed fleetOwner,\\n        uint256 indexed from,\\n        address operator,\\n        uint256 fleet,\\n        uint32 quantity,\\n        uint32 newNumSpaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    event FleetArrived(\\n        uint256 indexed fleet,\\n        address indexed fleetOwner,\\n        address indexed destinationOwner,\\n        uint256 destination,\\n        bool gift,\\n        uint32 fleetLoss,\\n        uint32 planetLoss,\\n        uint32 inFlightFleetLoss,\\n        uint32 inFlightPlanetLoss,\\n        bool won,\\n        uint32 newNumspaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow,\\n        uint32 accumulatedDefenseAdded,\\n        uint32 accumulatedAttackAdded\\n    );\\n\\n    event TravelingUpkeepReductionFromDestruction(\\n        uint256 indexed origin,\\n        uint256 indexed fleet,\\n        uint32 newNumspaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    event PlanetReset(uint256 indexed location);\\n\\n    event PlanetExit(address indexed owner, uint256 indexed location);\\n\\n    event ExitComplete(address indexed owner, uint256 indexed location, uint256 stake);\\n\\n    event RewardSetup(uint256 indexed location, address indexed giver, uint256 rewardId);\\n    event RewardToWithdraw(address indexed owner, uint256 indexed location, uint256 indexed rewardId);\\n\\n    event StakeToWithdraw(address indexed owner, uint256 newStake);\\n\\n    event Initialized(uint32 minX, uint32 maxX, uint32 minY, uint32 maxY, bytes32 genesis);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    // TODO use it\\n    event Transfer(address indexed from, address indexed to, uint256 indexed location);\\n}\\n\",\"keccak256\":\"0xe7b8bc304fb1874e04f3b845620d7d81304d5554b375d2f30e51f3289149a20e\",\"license\":\"AGPL-3.0\"},\"src/outerspace/facets/OuterSpaceFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\nimport \\\"../base/ImportingOuterSpaceConstants.sol\\\";\\nimport \\\"../events/ImportingOuterSpaceEvents.sol\\\";\\nimport \\\"../base/UsingOuterSpaceDataLayout.sol\\\";\\n\\nimport \\\"../../libraries/Extraction.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\nimport \\\"../../interfaces/IAlliance.sol\\\";\\nimport \\\"../../alliances/AllianceRegistry.sol\\\";\\n\\n// TODO Remove\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract OuterSpaceFacetBase is\\n    ImportingOuterSpaceTypes,\\n    ImportingOuterSpaceConstants,\\n    ImportingOuterSpaceEvents,\\n    UsingOuterSpaceDataLayout\\n{\\n    using Extraction for bytes32;\\n\\n    IERC20 internal immutable _stakingToken;\\n    AllianceRegistry internal immutable _allianceRegistry;\\n    bytes32 internal immutable _genesis;\\n    uint256 internal immutable _resolveWindow;\\n    uint256 internal immutable _timePerDistance;\\n    uint256 internal immutable _exitDuration;\\n    uint32 internal immutable _acquireNumSpaceships;\\n    uint32 internal immutable _productionSpeedUp;\\n    uint256 internal immutable _frontrunningDelay;\\n    uint256 internal immutable _productionCapAsDuration;\\n    uint256 internal immutable _upkeepProductionDecreaseRatePer10000th;\\n    uint256 internal immutable _fleetSizeFactor6;\\n\\n    struct Config {\\n        IERC20 stakingToken;\\n        AllianceRegistry allianceRegistry;\\n        bytes32 genesis;\\n        uint256 resolveWindow;\\n        uint256 timePerDistance;\\n        uint256 exitDuration;\\n        uint32 acquireNumSpaceships;\\n        uint32 productionSpeedUp;\\n        uint256 frontrunningDelay;\\n        uint256 productionCapAsDuration;\\n        uint256 upkeepProductionDecreaseRatePer10000th;\\n        uint256 fleetSizeFactor6;\\n    }\\n\\n    constructor(Config memory config) {\\n        uint32 t = uint32(config.timePerDistance) / 4; // the coordinates space is 4 times bigger\\n        require(t * 4 == config.timePerDistance, \\\"TIME_PER_DIST_NOT_DIVISIBLE_4\\\");\\n\\n        _stakingToken = config.stakingToken;\\n        _allianceRegistry = config.allianceRegistry;\\n        _genesis = config.genesis;\\n        _resolveWindow = config.resolveWindow;\\n        _timePerDistance = t;\\n        _exitDuration = config.exitDuration;\\n        _acquireNumSpaceships = config.acquireNumSpaceships;\\n        _productionSpeedUp = config.productionSpeedUp;\\n        _frontrunningDelay = config.frontrunningDelay;\\n        _productionCapAsDuration = config.productionCapAsDuration;\\n        _upkeepProductionDecreaseRatePer10000th = config.upkeepProductionDecreaseRatePer10000th;\\n        _fleetSizeFactor6 = config.fleetSizeFactor6;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // PLANET STATE\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    struct PlanetUpdateState {\\n        uint256 location;\\n        uint40 lastUpdated;\\n        bool active; // do you need to get the old ?\\n        uint32 numSpaceships; // do you need to get the old ?\\n        int40 travelingUpkeep;\\n        uint40 exitStartTime;\\n        uint40 newExitStartTime;\\n        uint32 overflow; // do you need to get the old ?\\n        address owner;\\n        address newOwner;\\n        bytes32 data;\\n    }\\n\\n    function _createPlanetUpdateState(Planet memory planet, uint256 location)\\n        internal\\n        view\\n        returns (PlanetUpdateState memory planetUpdate)\\n    {\\n        (bool active, uint32 currentNumSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n        planetUpdate.location = location;\\n        planetUpdate.lastUpdated = planet.lastUpdated;\\n        planetUpdate.active = active;\\n        planetUpdate.numSpaceships = currentNumSpaceships;\\n        planetUpdate.travelingUpkeep = planet.travelingUpkeep;\\n        planetUpdate.exitStartTime = planet.exitStartTime;\\n        planetUpdate.newExitStartTime = planet.exitStartTime;\\n        planetUpdate.overflow = planet.overflow;\\n        planetUpdate.owner = planet.owner;\\n        planetUpdate.newOwner = planet.owner;\\n        planetUpdate.data = _planetData(location);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computePlanetUpdateForTimeElapsed(PlanetUpdateState memory planetUpdate) internal view {\\n        if (planetUpdate.exitStartTime != 0) {\\n            if (_hasJustExited(planetUpdate.exitStartTime)) {\\n                planetUpdate.newExitStartTime = 0;\\n                planetUpdate.numSpaceships = 0;\\n                planetUpdate.travelingUpkeep = 0;\\n                planetUpdate.newOwner = address(0);\\n                planetUpdate.overflow = 0;\\n                planetUpdate.active = false; // event is emitted at the endof each write function\\n                // lastUpdated is set at the end directly on storage\\n                return;\\n            }\\n        }\\n\\n        uint256 timePassed = block.timestamp - planetUpdate.lastUpdated;\\n        uint16 production = _production(planetUpdate.data);\\n        uint256 produce = (timePassed * uint256(production) * _productionSpeedUp) / 1 hours;\\n\\n        // NOTE: the repaypemnt of upkeep always happen at a fixed rate (per planet), it is fully predictable\\n        uint256 upkeepRepaid = 0;\\n        if (planetUpdate.travelingUpkeep > 0) {\\n            upkeepRepaid = ((produce * _upkeepProductionDecreaseRatePer10000th) / 10000);\\n            if (upkeepRepaid > uint40(planetUpdate.travelingUpkeep)) {\\n                upkeepRepaid = uint40(planetUpdate.travelingUpkeep);\\n            }\\n            planetUpdate.travelingUpkeep = planetUpdate.travelingUpkeep - int40(uint40(upkeepRepaid));\\n        }\\n\\n        uint256 newNumSpaceships = planetUpdate.numSpaceships;\\n        uint256 extraUpkeepPaid = 0;\\n        if (_productionCapAsDuration > 0) {\\n            // NOTE no need of productionSpeedUp for the cap because _productionCapAsDuration can include it\\n            uint256 capWhenActive = _acquireNumSpaceships + (uint256(production) * _productionCapAsDuration) / 1 hours;\\n            uint256 cap = planetUpdate.active ? capWhenActive : 0;\\n\\n            if (newNumSpaceships > cap) {\\n                // NOTE do not decrease while exiting\\n                if (planetUpdate.newExitStartTime == 0) {\\n                    uint256 decreaseRate = 1800;\\n                    if (planetUpdate.overflow > 0) {\\n                        decreaseRate = (planetUpdate.overflow * 1800) / capWhenActive;\\n                        if (decreaseRate < 1800) {\\n                            decreaseRate = 1800;\\n                        }\\n                    }\\n\\n                    uint256 decrease = (timePassed * decreaseRate) / 1 hours;\\n                    if (decrease > newNumSpaceships - cap) {\\n                        decrease = newNumSpaceships - cap;\\n                    }\\n                    if (decrease > newNumSpaceships) {\\n                        if (planetUpdate.active) {\\n                            extraUpkeepPaid = produce - upkeepRepaid + newNumSpaceships;\\n                        }\\n                        newNumSpaceships = 0;\\n                    } else {\\n                        if (planetUpdate.active) {\\n                            extraUpkeepPaid = produce - upkeepRepaid + decrease;\\n                        }\\n                        newNumSpaceships -= decrease;\\n                    }\\n                }\\n            } else {\\n                if (planetUpdate.active) {\\n                    uint256 maxIncrease = cap - newNumSpaceships;\\n                    uint256 increase = produce - upkeepRepaid;\\n                    if (increase > maxIncrease) {\\n                        extraUpkeepPaid = increase - maxIncrease;\\n                        increase = maxIncrease;\\n                    }\\n                    newNumSpaceships += increase;\\n                    // solhint-disable-next-line no-empty-blocks\\n                } else {\\n                    // not effect currently, when inactive, cap == 0, meaning zero spaceship here\\n                    // NOTE: we could do the following assuming we act on upkeepRepaid when inactive, we do not do that currently\\n                    //  extraUpkeepPaid = produce - upkeepRepaid;\\n                }\\n            }\\n\\n            if (planetUpdate.active) {\\n                // travelingUpkeep can go negative allow you to charge up your planet for later use, up to 7 days\\n                int256 newTravelingUpkeep = int256(planetUpdate.travelingUpkeep) - int256(extraUpkeepPaid);\\n                // TODO add _aquireNumSpaceships ? (+ see other place where this is computed)\\n                if (newTravelingUpkeep < int256(cap)) {\\n                    newTravelingUpkeep = -int256(cap);\\n                }\\n                planetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n            }\\n        } else {\\n            if (planetUpdate.active) {\\n                newNumSpaceships += (timePassed * uint256(production) * _productionSpeedUp) / 1 hours - upkeepRepaid;\\n            } else {\\n                // NOTE no need to overflow here  as there is no production cap, so no incentive to regroup spaceships\\n                uint256 decrease = (timePassed * 1800) / 1 hours;\\n                if (decrease > newNumSpaceships) {\\n                    decrease = newNumSpaceships;\\n                    newNumSpaceships = 0;\\n                } else {\\n                    newNumSpaceships -= decrease;\\n                }\\n            }\\n        }\\n\\n        if (newNumSpaceships >= ACTIVE_MASK) {\\n            newNumSpaceships = ACTIVE_MASK - 1;\\n        }\\n        planetUpdate.numSpaceships = uint32(newNumSpaceships);\\n\\n        // TODO remove\\n        // console.log(\\n        //     \\\"extraUpkeepPaid %i, numSpaceships: %i, upkeepRepaid: %i,\\\",\\n        //     extraUpkeepPaid,\\n        //     planetUpdate.numSpaceships,\\n        //     upkeepRepaid\\n        // );\\n    }\\n\\n    function _setPlanet(Planet storage planet, PlanetUpdateState memory planetUpdate) internal {\\n        if (planetUpdate.exitStartTime > 0 && planetUpdate.newExitStartTime == 0) {\\n            // exit has completed, newExitStartTime is not set to zero for interuption,\\n            // interuption is taken care below (owner changes)\\n            _handleExitComplete(planetUpdate);\\n        }\\n        if (planetUpdate.owner != planetUpdate.newOwner) {\\n            planet.owner = planetUpdate.newOwner;\\n            planet.ownershipStartTime = uint40(block.timestamp);\\n            // TODO stakedOwnershipStartTime ?\\n            // TODO handle staking pool ?\\n\\n            planet.exitStartTime = 0; // exit interupted // TODO event ?\\n\\n            emit Transfer(planetUpdate.owner, planetUpdate.newOwner, planetUpdate.location);\\n        }\\n        if (planetUpdate.newExitStartTime > 0 && planetUpdate.exitStartTime == 0) {\\n            planet.exitStartTime = planetUpdate.newExitStartTime;\\n        }\\n\\n        planet.numSpaceships = _setActiveNumSpaceships(planetUpdate.active, planetUpdate.numSpaceships);\\n        planet.travelingUpkeep = planetUpdate.travelingUpkeep;\\n\\n        planet.overflow = planetUpdate.overflow;\\n        planet.lastUpdated = uint40(block.timestamp);\\n    }\\n\\n    // was used to keep track of totalProduction, not needed anymore\\n    // function _setAccountFromPlanetUpdate(PlanetUpdateState memory planetUpdate) internal {\\n    //     if (planetUpdate.owner != planetUpdate.newOwner) {\\n    //         uint16 production = _production(planetUpdate.data);\\n    //         if (planetUpdate.owner != address(0)) {\\n    //             _accounts[planetUpdate.owner].totalProduction -= production;\\n    //         }\\n    //         if (planetUpdate.newOwner != address(0)) {\\n    //             _accounts[planetUpdate.newOwner].totalProduction += production;\\n    //         }\\n    //     }\\n    // }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _acquire(\\n        address player,\\n        uint256 stake,\\n        uint256 location\\n    ) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage planet = _getPlanet(location);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, location);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n        require(stake == uint256(_stake(planetUpdate.data)) * (DECIMALS_18), \\\"INVALID_AMOUNT\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Staking logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForStaking(player, planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setPlanet(planet, planetUpdate);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Update Space Discovery\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setDiscoveryAfterStaking(location);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Emit Event\\n        // -----------------------------------------------------------------------------------------------------------\\n        emit PlanetStake(\\n            player,\\n            location,\\n            planetUpdate.numSpaceships,\\n            planetUpdate.travelingUpkeep,\\n            planetUpdate.overflow,\\n            stake\\n        );\\n    }\\n\\n    function _computePlanetUpdateForStaking(address player, PlanetUpdateState memory planetUpdate) internal view {\\n        require(!planetUpdate.active, \\\"STILL_ACTIVE\\\");\\n\\n        uint32 defense;\\n        // NOTE : natives are back automatically once spaceships reaches zero (here we know we are not active)\\n        // TODO consider making natives come back over time => would need to compute the time numSpaceship became zero\\n        if (planetUpdate.numSpaceships == 0) {\\n            defense = _natives(planetUpdate.data);\\n        } else {\\n            // Do not allow staking over occupied planets, they are going to zero at some point though\\n            // TODO owner == address(0) ? is it possible for address(0) + numSpaceships > 0 ?\\n            require(planetUpdate.owner == player || planetUpdate.numSpaceships == 0, \\\"OCCUPIED\\\");\\n\\n            // used to be the following (but this gave too many cons to send spaceships to non-active planets):\\n            // TODO reconsider or remove natives entirely ?\\n            // if (mplanet.owner != sender) {\\n            //     defense = currentNumSpaceships;\\n            // } else {\\n            //     defense = 0;\\n            // }\\n        }\\n\\n        uint16 production = _production(planetUpdate.data);\\n        uint32 cap = uint32(_acquireNumSpaceships + (production * _productionCapAsDuration) / 1 hours);\\n\\n        // TODO ensure a player staking on a planet it previously exited work here\\n        planetUpdate.newOwner = player;\\n        if (defense != 0) {\\n            (uint32 attackerLoss, ) = _computeFight(_acquireNumSpaceships, defense, 10000, _defense(planetUpdate.data));\\n            // attacker alwasy win as defense (and stats.native) is restricted to 3500\\n            // (attackerLoss: 0, defenderLoss: 0) would mean defense was zero\\n            require(attackerLoss < _acquireNumSpaceships, \\\"FAILED_CAPTURED\\\");\\n            planetUpdate.numSpaceships = _acquireNumSpaceships - attackerLoss;\\n\\n            // NOTE cannot be overflow here as staking provide a number of spaceships below that\\n            planetUpdate.overflow = 0;\\n        } else {\\n            // NOTE this else is currently not possible now that we use numSpaceships == 0 for natives\\n            planetUpdate.numSpaceships += _acquireNumSpaceships;\\n            if (_productionCapAsDuration > 0) {\\n                if (planetUpdate.numSpaceships > cap) {\\n                    planetUpdate.overflow = planetUpdate.numSpaceships - cap;\\n                } else {\\n                    planetUpdate.overflow = 0;\\n                }\\n            }\\n        }\\n\\n        // NOTE when staking on a planet, we set an allowance for traveling upkeep\\n        planetUpdate.travelingUpkeep = -int32(cap);\\n        planetUpdate.active = true;\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _setDiscoveryAfterStaking(uint256 location) internal {\\n        Discovered memory discovered = _discovered;\\n\\n        int256 x = int256(int128(int256(location & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\\n        int256 y = int256(int128(int256(location >> 128)));\\n\\n        bool changes = false;\\n        if (x < 0) {\\n            require(-x <= int256(uint256(discovered.minX)), \\\"NOT_REACHABLE_YET_MINX\\\");\\n            x = -x + EXPANSION;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minX)) < x) {\\n                discovered.minX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        } else {\\n            require(x <= int256(uint256(discovered.maxX)), \\\"NOT_REACHABLE_YET_MAXX\\\");\\n            x = x + EXPANSION;\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.maxX < uint32(uint256(x))) {\\n                discovered.maxX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        }\\n\\n        if (y < 0) {\\n            require(-y <= int256(uint256(discovered.minY)), \\\"NOT_REACHABLE_YET_MINY\\\");\\n            y = -y + EXPANSION;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minY)) < y) {\\n                discovered.minY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        } else {\\n            require(y <= int256(uint256(discovered.maxY)), \\\"NOT_REACHABLE_YET_MAXY\\\");\\n            y = y + EXPANSION;\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.maxY)) < y) {\\n                discovered.maxY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        }\\n        if (changes) {\\n            _discovered = discovered;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // EXITS / WITHDRAWALS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _handleExitComplete(PlanetUpdateState memory planetUpdate) internal {\\n        uint256 stake = _completeExit(planetUpdate.owner, planetUpdate.location, planetUpdate.data);\\n\\n        // optional so we can use it in the batch withdraw,\\n        uint256 newStake = _stakeReadyToBeWithdrawn[planetUpdate.owner] + stake;\\n        _stakeReadyToBeWithdrawn[planetUpdate.owner] = newStake;\\n        emit StakeToWithdraw(planetUpdate.owner, newStake);\\n    }\\n\\n    function _completeExit(\\n        address owner,\\n        uint256 location,\\n        bytes32 data\\n    ) internal returns (uint256 stake) {\\n        stake = uint256(_stake(data)) * (DECIMALS_18);\\n        emit ExitComplete(owner, location, stake);\\n\\n        // TODO handle Staking pool release ?\\n        // (maybe not necessary here, can do in withdrawals?)\\n\\n        // --------------------------------------------------------\\n        // Extra Reward was added\\n        // --------------------------------------------------------\\n        uint256 rewardId = _rewards[location];\\n        if (rewardId != 0) {\\n            // rewardId would contains the package. maybe this could be handled by an external contract\\n            _rewardsToWithdraw[owner][rewardId] = true;\\n            _rewards[location] = 0; // reset\\n            // if you had reward to a planet in he process of exiting,\\n            // you are adding the reward to the player exiting unless _setPlanetAfterExit is called first\\n            emit RewardToWithdraw(owner, location, rewardId);\\n        }\\n        // --------------------------------------------------------\\n    }\\n\\n    function _exitFor(address owner, uint256 location) internal {\\n        Planet storage planet = _getPlanet(location);\\n        require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n        require(planet.exitStartTime == 0, \\\"EXITING_ALREADY\\\");\\n        planet.exitStartTime = uint40(block.timestamp);\\n        emit PlanetExit(owner, location);\\n    }\\n\\n    function _fetchAndWithdrawFor(address owner, uint256[] calldata locations) internal {\\n        uint256 addedStake = 0;\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            if (_hasJustExited(planet.exitStartTime)) {\\n                require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n                emit Transfer(owner, address(0), locations[i]);\\n                addedStake += _completeExit(planet.owner, locations[i], _planetData(locations[i]));\\n                planet.owner = address(0);\\n                planet.ownershipStartTime = 0;\\n                planet.exitStartTime = 0;\\n                planet.numSpaceships = 0;\\n                planet.overflow = 0;\\n                planet.travelingUpkeep = 0;\\n                planet.lastUpdated = uint40(block.timestamp);\\n            }\\n        }\\n        uint256 newStake = _stakeReadyToBeWithdrawn[owner] + addedStake;\\n        _unsafe_withdrawAll(owner, newStake);\\n    }\\n\\n    function _unsafe_withdrawAll(address owner, uint256 amount) internal {\\n        _stakeReadyToBeWithdrawn[owner] = 0;\\n        emit StakeToWithdraw(owner, amount);\\n        require(_stakingToken.transfer(owner, amount), \\\"FAILED_TRANSFER\\\");\\n        // TODO Staking Pool\\n        emit StakeToWithdraw(owner, 0);\\n    }\\n\\n    function _hasJustExited(uint40 exitTime) internal view returns (bool) {\\n        return exitTime > 0 && block.timestamp > exitTime + _exitDuration;\\n    }\\n\\n    function _ping(uint256 location) internal {\\n        Planet storage planet = _getPlanet(location);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, location);\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n        _setPlanet(planet, planetUpdate);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // REWARDS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _addReward(uint256 location, address sponsor) internal {\\n        uint256 rewardId = _rewards[location];\\n        if (rewardId == 0) {\\n            rewardId = ++_prevRewardIds[sponsor];\\n            _rewards[location] = (uint256(uint160(sponsor)) << 96) + rewardId;\\n        }\\n        // TODO should it fails if different sponsor added reward before\\n\\n        // TODO rewardId association with the actual rewards // probably contract address holding the reward\\n        emit RewardSetup(location, sponsor, rewardId);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _sendFor(\\n        uint256 fleetId,\\n        address operator,\\n        FleetLaunch memory launch\\n    ) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage planet = _getPlanet(launch.from);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, launch.from);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(planet.exitStartTime == 0, \\\"PLANET_EXIT\\\");\\n        require(launch.fleetSender == planet.owner, \\\"NOT_OWNER\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Requirements post Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(planetUpdate.numSpaceships >= launch.quantity, \\\"SPACESHIPS_NOT_ENOUGH\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Sending logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForFleetLaunch(planetUpdate, launch.quantity);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setPlanet(planet, planetUpdate);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n\\n        _setFleetFlyingSlot(launch.from, launch.quantity);\\n\\n        // TODO add debt info\\n        _fleets[fleetId] = Fleet({\\n            launchTime: uint40(block.timestamp),\\n            owner: launch.fleetOwner,\\n            quantity: launch.quantity\\n        });\\n\\n        emit FleetSent(\\n            launch.fleetSender,\\n            launch.fleetOwner,\\n            launch.from,\\n            operator,\\n            fleetId,\\n            launch.quantity,\\n            planetUpdate.numSpaceships,\\n            planetUpdate.travelingUpkeep,\\n            planetUpdate.overflow\\n        );\\n    }\\n\\n    function _computePlanetUpdateForFleetLaunch(PlanetUpdateState memory planetUpdate, uint32 quantity) internal view {\\n        planetUpdate.numSpaceships -= quantity;\\n        if (_productionCapAsDuration > 0) {\\n            if (planetUpdate.active) {\\n                // NOTE we do not update travelingUpkeep on Inactive planets\\n                //  these get reset on staking\\n                uint16 production = _production(planetUpdate.data);\\n                uint256 cap = _acquireNumSpaceships + (uint256(production) * _productionCapAsDuration) / 1 hours;\\n\\n                int256 newTravelingUpkeep = int256(planetUpdate.travelingUpkeep) + int256(uint256(quantity));\\n                if (newTravelingUpkeep > int256(cap)) {\\n                    newTravelingUpkeep = int256(cap);\\n                }\\n                planetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n            }\\n\\n            if (planetUpdate.overflow > quantity) {\\n                planetUpdate.overflow -= quantity;\\n            } else {\\n                planetUpdate.overflow = 0;\\n            }\\n        }\\n    }\\n\\n    function _setFleetFlyingSlot(uint256 from, uint32 quantity) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // record flying fleets (to prevent front-running, see resolution)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        uint32 flying = _inFlight[from][timeSlot].flying;\\n        flying = flying + quantity;\\n        require(flying >= quantity, \\\"ORBIT_OVERFLOW\\\"); // unlikely to ever happen,\\n        // would need a huge amount of spaceships to be received and each in turn being sent\\n        // TOEXPLORE could also cap, that would result in some fleet being able to escape.\\n        _inFlight[from][timeSlot].flying = flying;\\n        // -----------------------------------------------------------------------------------------------------------\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // ---------------------------------------------------------------------------------------------------------------\\n    struct ResolutionState {\\n        address fleetOwner;\\n        uint40 fleetLaunchTime;\\n        uint32 fleetQuantity;\\n        bytes32 fromData;\\n        uint32 inFlightFleetLoss;\\n        uint32 inFlightPlanetLoss;\\n        bool gifting;\\n        bool taxed;\\n        bool victory; // TODO ? and check old behavior,\\n        // for example on fleet_after_Exit the victory is true if numSPaceshipArrived > 0\\n        uint32 attackerLoss;\\n        uint32 defenderLoss;\\n        uint32 orbitDefense1;\\n        uint32 orbitDefenseDestroyed1;\\n        uint32 orbitDefense2;\\n        uint32 orbitDefenseDestroyed2;\\n        bool accumulating;\\n        uint40 arrivalTime;\\n        uint32 accumulatedDefenseAdded;\\n        uint32 accumulatedAttackAdded;\\n        uint16 attackPower;\\n    }\\n\\n    function _resolveFleet(uint256 fleetId, FleetResolution calldata resolution) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage toPlanet = _getPlanet(resolution.to);\\n        PlanetUpdateState memory toPlanetUpdate = _createPlanetUpdateState(toPlanet, resolution.to);\\n        ResolutionState memory rState = _createResolutionState(_fleets[fleetId], resolution.from);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(rState.fleetQuantity > 0, \\\"FLEET_DO_NOT_EXIST\\\");\\n        _requireCorrectDistance(\\n            resolution.distance,\\n            resolution.from,\\n            resolution.to,\\n            rState.fromData,\\n            toPlanetUpdate.data\\n        );\\n        _requireCorrectTimeAndUpdateArrivalTime(\\n            resolution.distance,\\n            resolution.arrivalTimeWanted,\\n            rState.fleetLaunchTime,\\n            rState.fromData,\\n            rState\\n        );\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(toPlanetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Traveling logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _computeInFlightLossForFleet(rState, resolution);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Resolution logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _updateFleetForGifting(rState, resolution, toPlanetUpdate.owner);\\n\\n        _computeResolutionResult(rState, toPlanetUpdate, resolution);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _recordInOrbitLossAfterAttack(rState, toPlanetUpdate);\\n\\n        _recordOrbitLossAccountingForFleetOrigin(rState, resolution);\\n\\n        _setTravelingUpkeepFromOrigin(fleetId, rState, resolution.from);\\n\\n        _setPlanet(toPlanet, toPlanetUpdate);\\n\\n        _setAccumulatedAttack(rState, toPlanetUpdate);\\n\\n        // _setAccountFromPlanetUpdate(toPlanetUpdate); // TODO remove, else think about the fromPlanet ?\\n\\n        // TODO quantity should be kept ?\\n        //  so Alliance Contract can act on that value ?, could use 1st bit indicator\\n        _fleets[fleetId].quantity = 0;\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Events\\n        // -----------------------------------------------------------------------------------------------------------\\n        emit FleetArrived(\\n            fleetId,\\n            rState.fleetOwner,\\n            toPlanetUpdate.owner,\\n            resolution.to,\\n            rState.gifting,\\n            rState.attackerLoss,\\n            rState.defenderLoss,\\n            rState.inFlightFleetLoss,\\n            rState.inFlightPlanetLoss,\\n            rState.victory,\\n            toPlanetUpdate.numSpaceships,\\n            toPlanetUpdate.travelingUpkeep,\\n            toPlanetUpdate.overflow,\\n            rState.accumulatedDefenseAdded,\\n            rState.accumulatedAttackAdded\\n        );\\n    }\\n\\n    function _setTravelingUpkeepFromOrigin(\\n        uint256 fleetID,\\n        ResolutionState memory rState,\\n        uint256 location\\n    ) internal {\\n        if (rState.attackerLoss > 0) {\\n            // // we have to update the origin\\n            Planet storage fromPlanet = _planets[location];\\n            PlanetUpdateState memory fromPlanetUpdate = _createPlanetUpdateState(fromPlanet, location);\\n            _computePlanetUpdateForTimeElapsed(fromPlanetUpdate);\\n\\n            uint32 production = _production(fromPlanetUpdate.data);\\n            int256 newTravelingUpkeep = int256(fromPlanetUpdate.travelingUpkeep) - int256(int32(rState.attackerLoss));\\n            if (newTravelingUpkeep < -int256((7 days * uint256(production) * _productionSpeedUp) / 1 hours)) {\\n                newTravelingUpkeep = -int256((7 days * uint256(production) * _productionSpeedUp) / 1 hours);\\n            }\\n            fromPlanetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n\\n            _setPlanet(fromPlanet, fromPlanetUpdate);\\n\\n            emit TravelingUpkeepReductionFromDestruction(\\n                location,\\n                fleetID,\\n                fromPlanetUpdate.numSpaceships,\\n                fromPlanetUpdate.travelingUpkeep,\\n                fromPlanetUpdate.overflow\\n            );\\n        }\\n    }\\n\\n    function _setAccumulatedAttack(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate) internal {\\n        if (rState.victory) {\\n            // victory, past attack has been succesful in capturing the planet, They do not count anymore\\n            delete _attacks[toPlanetUpdate.location][rState.fleetOwner][rState.arrivalTime];\\n        } else if (rState.accumulating) {\\n            AccumulatedAttack storage attack = _attacks[toPlanetUpdate.location][rState.fleetOwner][rState.arrivalTime];\\n\\n            attack.target = toPlanetUpdate.owner;\\n            attack.damageCausedSoFar = rState.defenderLoss + rState.inFlightPlanetLoss;\\n            attack.numAttackSpent = rState.attackerLoss;\\n            attack.averageAttackPower = rState.attackPower;\\n        }\\n    }\\n\\n    function _createResolutionState(Fleet storage fleet, uint256 from)\\n        internal\\n        view\\n        returns (ResolutionState memory rState)\\n    {\\n        rState.fleetOwner = fleet.owner;\\n        rState.fleetLaunchTime = fleet.launchTime;\\n        rState.fleetQuantity = fleet.quantity;\\n        rState.fromData = _planetData(from);\\n        rState.attackPower = _attack(rState.fromData);\\n    }\\n\\n    function _computeInFlightLossForFleet(ResolutionState memory rState, FleetResolution memory resolution)\\n        internal\\n        view\\n    {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check if fleet was attacked while departing (used to prevent front-running, see fleet sending)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = rState.fleetLaunchTime / (_frontrunningDelay / 2);\\n        uint32 destroyed = _inFlight[resolution.from][timeSlot].destroyed;\\n        uint32 originalQuantity = rState.fleetQuantity;\\n        if (destroyed < rState.fleetQuantity) {\\n            rState.fleetQuantity -= uint32(destroyed);\\n        } else {\\n            rState.fleetQuantity = 0;\\n        }\\n\\n        rState.inFlightFleetLoss = originalQuantity - rState.fleetQuantity;\\n        // -----------------------------------------------------------------------------------------------------------\\n    }\\n\\n    function _recordOrbitLossAccountingForFleetOrigin(ResolutionState memory rState, FleetResolution memory resolution)\\n        internal\\n    {\\n        if (rState.inFlightFleetLoss > 0) {\\n            uint256 timeSlot = rState.fleetLaunchTime / (_frontrunningDelay / 2);\\n\\n            // NOTE we already computed that destroyed cannot be smaller than inFlightFleetLoss\\n            //  see _computeInFlightLossForFleet\\n            _inFlight[resolution.from][timeSlot].destroyed -= rState.inFlightFleetLoss;\\n        }\\n    }\\n\\n    function _updateFleetForGifting(\\n        ResolutionState memory rState,\\n        FleetResolution memory resolution,\\n        address destinationOwner\\n    ) internal view {\\n        (bool gifting, bool taxed) = _computeGifting(destinationOwner, resolution, rState);\\n        rState.gifting = gifting;\\n        rState.taxed = taxed;\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computeGifting(\\n        address destinationOwner,\\n        FleetResolution memory resolution,\\n        ResolutionState memory rState\\n    ) internal view returns (bool gifting, bool taxed) {\\n        if (destinationOwner == address(0)) {\\n            // destination has no owner : this is an attack\\n            return (false, false);\\n        }\\n        if (destinationOwner == rState.fleetOwner && destinationOwner == resolution.fleetSender) {\\n            // destination is sender is fleet owner: this is a non-taxed gift\\n            return (true, false);\\n        }\\n\\n        if (resolution.gift || destinationOwner == rState.fleetOwner) {\\n            // intent was gift\\n            if (\\n                resolution.specific == address(0) ||\\n                resolution.specific == destinationOwner ||\\n                destinationOwner == rState.fleetOwner\\n            ) {\\n                // and it was for anyone or specific destination owner that is the same as the current one\\n                // or it was simply that fleetOwner = destinationOwner\\n\\n                (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                    resolution.fleetSender,\\n                    destinationOwner,\\n                    rState.fleetLaunchTime\\n                );\\n                return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n            }\\n\\n            if (resolution.specific == address(1)) {\\n                // or the specific specify any common alliances (1)\\n\\n                if (rState.fleetOwner == resolution.fleetSender) {\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (joinTime > 0, joinTime > rState.fleetLaunchTime);\\n                } else {\\n                    (, uint96 senderJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    (, uint96 fleetOwnerJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        rState.fleetOwner,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (fleetOwnerJoinTime > 0, senderJoinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n\\n            if (uint160(resolution.specific) > 1) {\\n                // or a specific one that matches\\n\\n                (uint96 joinTimeToSpecific, ) = _allianceRegistry.getAllianceData(\\n                    destinationOwner,\\n                    IAlliance(resolution.specific)\\n                );\\n\\n                if (joinTimeToSpecific > 0) {\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n        } else {\\n            // intent was attack\\n            if (resolution.specific == address(1)) {\\n                // and the attack was on any non-allies\\n\\n                if (rState.fleetOwner == resolution.fleetSender) {\\n                    // make it a gift if the destination owner is actually an ally\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (joinTime > 0, joinTime > rState.fleetLaunchTime);\\n                } else {\\n                    (, uint96 senderJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    (, uint96 fleetOwnerJoinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        rState.fleetOwner,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (fleetOwnerJoinTime > 0, senderJoinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n\\n            if (uint160(resolution.specific) > 1 && resolution.specific != destinationOwner) {\\n                // but specific not matching current owner\\n\\n                (uint96 joinTimeToSpecific, ) = _allianceRegistry.getAllianceData(\\n                    destinationOwner,\\n                    IAlliance(resolution.specific)\\n                );\\n\\n                // make it a gift if the destination is not matching the specific alliance\\n                // (or owner, in which case since it is not an alliance, it will also not match)\\n                if (joinTimeToSpecific == 0) {\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _computeResolutionResult(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        FleetResolution memory resolution\\n    ) internal view {\\n        if (rState.gifting) {\\n            _computeGiftingResolutionResult(rState, toPlanetUpdate);\\n        } else {\\n            _computeAttackResolutionResult(rState, toPlanetUpdate, resolution);\\n        }\\n    }\\n\\n    function _computeAttackResolutionResult(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        FleetResolution memory resolution\\n    ) internal view {\\n        // NOTE natives come back to power once numSPaceships == 0 and planet not active\\n        if (toPlanetUpdate.numSpaceships == 0 && !toPlanetUpdate.active) {\\n            _updatePlanetUpdateStateAndResolutionStateForNativeAttack(rState, toPlanetUpdate);\\n        } else {\\n            if (block.timestamp < rState.arrivalTime + 45 minutes) {\\n                if (rState.fleetOwner != resolution.fleetSender) {\\n                    (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        rState.fleetOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                    rState.accumulating = joinTime != 0 && joinTime <= rState.fleetLaunchTime;\\n                } else {\\n                    rState.accumulating = true;\\n                }\\n\\n                if (rState.accumulating) {\\n                    AccumulatedAttack memory acc = _attacks[toPlanetUpdate.location][rState.fleetOwner][\\n                        rState.arrivalTime\\n                    ];\\n                    if (acc.target == toPlanetUpdate.owner && acc.numAttackSpent != 0) {\\n                        rState.attackPower = uint16(\\n                            uint256(\\n                                rState.attackPower * rState.fleetQuantity + acc.averageAttackPower * acc.numAttackSpent\\n                            ) / (rState.fleetQuantity + acc.numAttackSpent)\\n                        );\\n                        rState.accumulatedAttackAdded = acc.numAttackSpent;\\n                        rState.accumulatedDefenseAdded = acc.damageCausedSoFar;\\n                    }\\n                }\\n            }\\n\\n            _updatePlanetUpdateStateAndResolutionStateForPlanetAttack(rState, toPlanetUpdate);\\n        }\\n    }\\n\\n    function _computeGiftingResolutionResult(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate)\\n        internal\\n        view\\n    {\\n        if (rState.taxed) {\\n            rState.fleetQuantity = uint32(\\n                uint256(rState.fleetQuantity) - (uint256(rState.fleetQuantity) * GIFT_TAX_PER_10000) / 10000\\n            );\\n        }\\n        uint256 newNumSpaceships = toPlanetUpdate.numSpaceships + rState.fleetQuantity;\\n        if (newNumSpaceships >= ACTIVE_MASK) {\\n            newNumSpaceships = ACTIVE_MASK - 1;\\n        }\\n\\n        toPlanetUpdate.numSpaceships = uint32(newNumSpaceships);\\n        if (!toPlanetUpdate.active) {\\n            // NOTE: not active, overflow is applied on cap = 0\\n            if (toPlanetUpdate.numSpaceships > toPlanetUpdate.overflow) {\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            }\\n        } else {\\n            uint32 cap = uint32(_acquireNumSpaceships + _production(toPlanetUpdate.data) * _productionCapAsDuration) /\\n                1 hours;\\n            if (_productionCapAsDuration > 0 && newNumSpaceships > cap) {\\n                if (toPlanetUpdate.numSpaceships - cap > toPlanetUpdate.overflow) {\\n                    toPlanetUpdate.overflow = uint32(toPlanetUpdate.numSpaceships - cap);\\n                }\\n            } else {\\n                toPlanetUpdate.overflow = 0;\\n            }\\n        }\\n    }\\n\\n    function _updatePlanetUpdateStateAndResolutionStateForNativeAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        uint16 attack = _attack(rState.fromData);\\n        uint16 defense = _defense(toPlanetUpdate.data);\\n        uint16 natives = _natives(toPlanetUpdate.data); // TODO ? attacks ?\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(rState.fleetQuantity, natives, attack, defense);\\n        rState.attackerLoss = attackerLoss;\\n        if (defenderLoss == natives && rState.fleetQuantity > attackerLoss) {\\n            // (attackerLoss: 0, defenderLoss: 0) means that numAttack was zero as natives cannot be zero\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity - attackerLoss;\\n            rState.defenderLoss = defenderLoss;\\n            rState.victory = true;\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n            // solhint-disable-next-line no-empty-blocks\\n        }\\n        // NOTE else (attacker lost) then nothing happen\\n    }\\n\\n    function _updateResolutionStateFromOrbitDefense(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        InFlight storage slot1 = _inFlight[toPlanetUpdate.location][timeSlot - 1];\\n        rState.orbitDefense1 = slot1.flying > 2**31 ? 2**31 - 1 : uint32(slot1.flying);\\n        rState.orbitDefenseDestroyed1 = slot1.destroyed > 2**31 ? 2**31 - 1 : uint32(slot1.destroyed);\\n        InFlight storage slot2 = _inFlight[toPlanetUpdate.location][timeSlot];\\n        rState.orbitDefense2 = slot2.flying > 2**31 ? 2**31 - 1 : uint32(slot2.flying);\\n        rState.orbitDefenseDestroyed2 = slot2.destroyed > 2**31 ? 2**31 - 1 : uint32(slot2.destroyed);\\n        // // numDefense = uint32(Math.min(flying1 + flying2 + numDefense, 2**32 - 1));\\n    }\\n\\n    function _updatePlanetUpdateStateAndResolutionStateForPlanetAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        _updateResolutionStateFromOrbitDefense(rState, toPlanetUpdate);\\n        uint256 numDefense = toPlanetUpdate.numSpaceships +\\n            rState.accumulatedDefenseAdded +\\n            rState.orbitDefense1 +\\n            rState.orbitDefense2;\\n        uint16 production = _production(toPlanetUpdate.data);\\n\\n        if (numDefense == 0 && rState.fleetQuantity > 0) {\\n            // scenario where there is actually no defense on the place,\\n            // TODO check if we could already assume active = false ?\\n\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity;\\n            if (!toPlanetUpdate.active) {\\n                // numDefense = 0 so numAttack is the overflow, attacker took over\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint32 cap = uint32(_acquireNumSpaceships + (production * _productionCapAsDuration) / 1 hours);\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        // numDefense = 0 so numAttack is the overflow, attacker took over\\n                        toPlanetUpdate.overflow = uint32(toPlanetUpdate.numSpaceships - cap);\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n\\n            rState.victory = true;\\n        } else {\\n            _computeAttack(rState, toPlanetUpdate, numDefense);\\n            _computeTravelingUpkeepReductionAfterAttack(rState, toPlanetUpdate, production);\\n        }\\n    }\\n\\n    function _computeTravelingUpkeepReductionAfterAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint16 production\\n    ) internal view {\\n        // allow the attacker to pay for upkeep as part of the attack\\n        // only get to keep the upkeep that was there as a result of spaceships sent away\\n\\n        int256 totalLoss = int256(uint256(rState.defenderLoss + rState.inFlightPlanetLoss + rState.attackerLoss));\\n        int256 newTravelingUpkeep = int256(toPlanetUpdate.travelingUpkeep) - totalLoss;\\n        if (newTravelingUpkeep < -int256((7 days * uint256(production) * _productionSpeedUp) / 1 hours)) {\\n            newTravelingUpkeep = -int256((7 days * uint256(production) * _productionSpeedUp) / 1 hours);\\n        }\\n        toPlanetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computeAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint256 numDefense\\n    ) internal view {\\n        uint16 attack = rState.attackPower;\\n        uint16 defense = _defense(toPlanetUpdate.data);\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(\\n            rState.fleetQuantity + rState.accumulatedAttackAdded,\\n            numDefense,\\n            attack,\\n            defense\\n        );\\n        rState.defenderLoss = defenderLoss;\\n        rState.attackerLoss = attackerLoss;\\n\\n        // (attackerLoss: 0, defenderLoss: 0) could either mean attack was zero or defense was zero :\\n        if (rState.fleetQuantity > 0 && rState.defenderLoss == numDefense) {\\n            // NOTE Attacker wins\\n\\n            // all orbiting fleets are destroyed, inFlightPlanetLoss is all that is left\\n            rState.inFlightPlanetLoss = uint32(\\n                numDefense - toPlanetUpdate.numSpaceships - rState.accumulatedDefenseAdded\\n            );\\n\\n            rState.defenderLoss = rState.defenderLoss - rState.inFlightPlanetLoss;\\n\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity + rState.accumulatedAttackAdded - attackerLoss;\\n            rState.victory = true;\\n\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n\\n            if (!toPlanetUpdate.active) {\\n                // attack took over, overflow is numSpaceships\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint16 production = _production(toPlanetUpdate.data);\\n                    uint32 cap = uint32(_acquireNumSpaceships + (production * _productionCapAsDuration) / 1 hours);\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        if (toPlanetUpdate.numSpaceships - cap > toPlanetUpdate.overflow) {\\n                            toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships - cap;\\n                        }\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n        } else if (rState.attackerLoss == rState.fleetQuantity + rState.accumulatedAttackAdded) {\\n            // NOTE Defender wins\\n\\n            if (defenderLoss > toPlanetUpdate.numSpaceships + rState.accumulatedDefenseAdded) {\\n                rState.inFlightPlanetLoss =\\n                    defenderLoss -\\n                    toPlanetUpdate.numSpaceships -\\n                    rState.accumulatedDefenseAdded;\\n\\n                toPlanetUpdate.numSpaceships = 0;\\n\\n                if (rState.orbitDefense1 >= rState.inFlightPlanetLoss) {\\n                    rState.orbitDefense1 -= rState.inFlightPlanetLoss;\\n                    rState.orbitDefenseDestroyed1 += rState.inFlightPlanetLoss;\\n                } else {\\n                    rState.orbitDefenseDestroyed1 += rState.orbitDefense1;\\n                    uint32 extra = (rState.inFlightPlanetLoss - rState.orbitDefense1);\\n                    if (rState.orbitDefense2 >= extra) {\\n                        rState.orbitDefense2 -= extra;\\n                        rState.orbitDefenseDestroyed2 += extra;\\n                    } else {\\n                        rState.orbitDefenseDestroyed2 += rState.orbitDefense2;\\n                        rState.orbitDefense2 = 0; // should never reach minus but let simply set it to zero\\n                    }\\n                    rState.orbitDefense1 = 0;\\n                }\\n            } else {\\n                toPlanetUpdate.numSpaceships =\\n                    toPlanetUpdate.numSpaceships +\\n                    rState.accumulatedDefenseAdded -\\n                    defenderLoss;\\n            }\\n\\n            rState.defenderLoss = rState.defenderLoss - rState.inFlightPlanetLoss;\\n\\n            if (!toPlanetUpdate.active) {\\n                if (defenderLoss > toPlanetUpdate.overflow) {\\n                    toPlanetUpdate.overflow = 0;\\n                } else {\\n                    toPlanetUpdate.overflow -= defenderLoss;\\n                }\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint16 production = _production(toPlanetUpdate.data);\\n                    uint32 cap = uint32(_acquireNumSpaceships + (production * _productionCapAsDuration) / 1 hours);\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        if (defenderLoss <= toPlanetUpdate.overflow) {\\n                            toPlanetUpdate.overflow -= defenderLoss;\\n                        } else {\\n                            toPlanetUpdate.overflow = 0;\\n                        }\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n        } else {\\n            assert(false); // should not happen\\n        }\\n    }\\n\\n    function _recordInOrbitLossAfterAttack(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate)\\n        internal\\n    {\\n        if (rState.inFlightPlanetLoss > 0) {\\n            InFlight storage slot1 = _inFlight[toPlanetUpdate.location][block.timestamp / (_frontrunningDelay / 2) - 1];\\n            slot1.flying = rState.orbitDefense1;\\n            slot1.destroyed = rState.orbitDefenseDestroyed1;\\n\\n            InFlight storage slot2 = _inFlight[toPlanetUpdate.location][block.timestamp / (_frontrunningDelay / 2)];\\n            slot2.flying = rState.orbitDefense2;\\n            slot2.destroyed = rState.orbitDefenseDestroyed2;\\n        }\\n    }\\n\\n    function _computeFight(\\n        uint256 numAttack,\\n        uint256 numDefense,\\n        uint256 attack,\\n        uint256 defense\\n    ) internal view returns (uint32 attackerLoss, uint32 defenderLoss) {\\n        if (numAttack == 0 || numDefense == 0) {\\n            // this edge case need to be considered,\\n            // as the result of this function cannot tell from it whos is winning here\\n            return (0, 0);\\n        }\\n\\n        uint256 attackFactor = numAttack *\\n            ((1000000 - _fleetSizeFactor6) + ((_fleetSizeFactor6 * numAttack) / numDefense));\\n        uint256 attackDamage = (attackFactor * attack) / defense / 1000000;\\n\\n        if (numDefense > attackDamage) {\\n            // attack fails\\n            attackerLoss = uint32(numAttack); // all attack destroyed\\n            defenderLoss = uint32(attackDamage); // 1 spaceship will be left at least as attackDamage < numDefense\\n        } else {\\n            // attack succeed\\n            uint256 defenseFactor = numDefense *\\n                ((1000000 - _fleetSizeFactor6) + ((_fleetSizeFactor6 * numDefense) / numAttack));\\n            uint256 defenseDamage = uint32((defenseFactor * defense) / attack / 1000000);\\n\\n            if (defenseDamage >= numAttack) {\\n                defenseDamage = numAttack - 1; // ensure 1 spaceship left\\n            }\\n\\n            attackerLoss = uint32(defenseDamage);\\n            defenderLoss = uint32(numDefense); // all defense destroyed\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // PLANET STATS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _planetData(uint256 location) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_genesis, location));\\n    }\\n\\n    function _subLocation(bytes32 data) internal pure returns (int8 subX, int8 subY) {\\n        subX = 1 - int8(data.value8Mod(0, 3));\\n        subY = 1 - int8(data.value8Mod(2, 3));\\n    }\\n\\n    // // 4,5,5,10,10,15,15, 20, 20, 30,30,40,40,80,80,100\\n    // bytes32 constant stakeRange = 0x000400050005000A000A000F000F00140014001E001E00280028005000500064;\\n\\n    // 6, 8, 10, 12, 14, 16, 18, 20, 20, 22, 24, 32, 40, 48, 56, 72\\n    bytes32 internal constant stakeRange = 0x00060008000A000C000E00100012001400140016001800200028003000380048;\\n\\n    function _stake(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // return data.normal16(4, 0x000400050005000A000A000F000F00140014001E001E00280028005000500064);\\n        uint8 productionIndex = data.normal8(12); // production affect the stake value\\n\\n        // TODO remove or decide otherwise:\\n        // uint16 offset = data.normal16(4, 0x0000000100010002000200030003000400040005000500060006000700070008);\\n        // uint16 stakeIndex = productionIndex + offset;\\n        // if (stakeIndex < 4) {\\n        //     stakeIndex = 0;\\n        // } else if (stakeIndex > 19) {\\n        //     stakeIndex = 15;\\n        // } else {\\n        //     stakeIndex -= 4;\\n        // }\\n        uint16 stakeIndex = productionIndex;\\n        // skip stakeIndex * 2 + 0 as it is always zero in stakeRange\\n        return uint16(uint8(stakeRange[stakeIndex * 2 + 1]));\\n    }\\n\\n    function _production(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // TODO TRY : 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4000,4400,4800,5400,6200,7200 ?\\n\\n        // 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4200,5400,6600,7800,9000,12000\\n        // 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0\\n        return data.normal16(12, 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0); // per hour\\n    }\\n\\n    function _attack(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(20) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _defense(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(28) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _speed(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 5005 + data.normal8(36) * 333; // 5,005 - 7,502.5 - 10,000\\n    }\\n\\n    function _natives(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 15000 + data.normal8(44) * 3000; // 15,000 - 37,500 - 60,000\\n    }\\n\\n    function _exists(bytes32 data) internal pure returns (bool) {\\n        return data.value8Mod(52, 16) == 1; // 16 => 36 so : 1 planet per 6 (=24 min unit) square\\n        // also:\\n        // 20000 average starting numSpaceships (or max?)\\n        // speed of min unit = 30 min ( 1 hour per square)\\n        // production : 20000 per 6 hours\\n        // exit : 3 days ? => 72 distance\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _getPlanet(uint256 location) internal view returns (Planet storage) {\\n        return _planets[location];\\n    }\\n\\n    function _getPlanetStats(uint256 location) internal view returns (PlanetStats memory) {\\n        bytes32 data = _planetData(location);\\n        require(_exists(data), \\\"no planet in this location\\\");\\n\\n        (int8 subX, int8 subY) = _subLocation(data);\\n        return\\n            PlanetStats({\\n                subX: subX,\\n                subY: subY,\\n                stake: _stake(data),\\n                production: _production(data),\\n                attack: _attack(data),\\n                defense: _defense(data),\\n                speed: _speed(data),\\n                natives: _natives(data)\\n            });\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // UTILS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _requireCorrectDistance(\\n        uint256 distance,\\n        uint256 from,\\n        uint256 to,\\n        bytes32 fromPlanetData,\\n        bytes32 toPlanetData\\n    ) internal pure {\\n        // check input instead of compute sqrt\\n\\n        (int8 fromSubX, int8 fromSubY) = _subLocation(fromPlanetData);\\n        (int8 toSubX, int8 toSubY) = _subLocation(toPlanetData);\\n        uint256 distanceSquared = uint256(\\n            int256( // check input instead of compute sqrt\\n                ((int128(int256(to & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + toSubX) -\\n                    (int128(int256(from & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + fromSubX)) **\\n                    2 +\\n                    ((int128(int256(to >> 128)) * 4 + toSubY) - (int128(int256(from >> 128)) * 4 + fromSubY))**2\\n            )\\n        );\\n        require(distance**2 <= distanceSquared && distanceSquared < (distance + 1)**2, \\\"wrong distance\\\");\\n    }\\n\\n    function _requireCorrectTimeAndUpdateArrivalTime(\\n        uint256 distance,\\n        uint256 arrivalTimeWanted,\\n        uint40 launchTime,\\n        bytes32 fromPlanetData,\\n        ResolutionState memory rState\\n    ) internal view {\\n        uint256 reachTime = Math.max(\\n            arrivalTimeWanted,\\n            launchTime + (distance * (_timePerDistance * 10000)) / _speed(fromPlanetData)\\n        );\\n        rState.arrivalTime = uint40(reachTime);\\n        require(block.timestamp >= reachTime, \\\"too early\\\");\\n        require(block.timestamp < reachTime + _resolveWindow, \\\"too late, your spaceships are lost in space\\\");\\n    }\\n\\n    function _activeNumSpaceships(uint32 numSpaceshipsData) internal pure returns (bool active, uint32 numSpaceships) {\\n        active = (numSpaceshipsData & ACTIVE_MASK) == ACTIVE_MASK;\\n        numSpaceships = numSpaceshipsData % (ACTIVE_MASK);\\n    }\\n\\n    function _setActiveNumSpaceships(bool active, uint32 numSpaceships) internal pure returns (uint32) {\\n        return uint32((active ? ACTIVE_MASK : 0) + numSpaceships);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n}\\n\",\"keccak256\":\"0x3bfb18a7346144deff0004b8831380387dd1bd5a497e0adeb0fa814fde5ff96c\",\"license\":\"AGPL-3.0\"},\"src/outerspace/facets/OuterSpaceFleetsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./OuterSpaceFacetBase.sol\\\";\\nimport \\\"../interfaces/IOuterSpaceFleets.sol\\\";\\n\\ncontract OuterSpaceFleetsFacet is OuterSpaceFacetBase, IOuterSpaceFleets {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(Config memory config) OuterSpaceFacetBase(config) {}\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function resolveFleet(uint256 fleetId, FleetResolution calldata resolution) external {\\n        require(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        keccak256(\\n                            abi.encodePacked(resolution.secret, resolution.to, resolution.gift, resolution.specific, resolution.arrivalTimeWanted)\\n                        ),\\n                        resolution.from,\\n                        resolution.fleetSender,\\n                        resolution.operator\\n                    )\\n                )\\n            ) == fleetId,\\n            \\\"INVALID_FLEET_DATA_OR_SECRET\\\"\\n        );\\n        _resolveFleet(fleetId, resolution);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function send(\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external {\\n        address sender = _msgSender();\\n        uint256 fleetId = uint256(keccak256(abi.encodePacked(toHash, from, sender, sender)));\\n        _sendFor(\\n            fleetId,\\n            sender,\\n            FleetLaunch({fleetSender: sender, fleetOwner: sender, from: from, quantity: quantity, toHash: toHash})\\n        );\\n    }\\n\\n    function sendFor(FleetLaunch calldata launch) external {\\n        //  bytes calldata fleetSignature // TODO for fleetOwner's signature ?\\n\\n        address operator = _msgSender();\\n        if (operator != launch.fleetSender) {\\n            require(_operators[launch.fleetSender][operator], \\\"NOT_AUTHORIZED_TO_SEND\\\");\\n        }\\n        uint256 fleetId = uint256(\\n            keccak256(abi.encodePacked(launch.toHash, launch.from, launch.fleetSender, operator))\\n        );\\n\\n        // fleetOwner is basically the one receiving the planet if the attack succeed\\n        // fleetSender is the one to be used for alliance resolution\\n        // operator is just so alliance can consider fleetSender based on the rule of that operator\\n        // if (launch.fleetOwner != launch.fleetSender && launch.fleetOwner != operator) {\\n        //     // TODO use signature from fleetOwner instead?\\n        //     require(_operators[launch.fleetOwner][operator], \\\"NOT_AUTHORIZED_TO_FLEET\\\");\\n        // }\\n\\n        _sendFor(fleetId, operator, launch);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function getFleet(uint256 fleetId, uint256 from)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint40 launchTime,\\n            uint32 quantity,\\n            uint64 flyingAtLaunch, // can be more than quantity if multiple fleet were launched around the same time from the same planet\\n            uint64 destroyedAtLaunch\\n        )\\n    {\\n        launchTime = _fleets[fleetId].launchTime;\\n        quantity = _fleets[fleetId].quantity;\\n        owner = _fleets[fleetId].owner;\\n\\n        uint256 timeSlot = launchTime / (_frontrunningDelay / 2);\\n        destroyedAtLaunch = _inFlight[from][timeSlot].destroyed;\\n        flyingAtLaunch = _inFlight[from][timeSlot].flying;\\n    }\\n}\\n\",\"keccak256\":\"0x42c74998ed8424d0b4f14c90ef1af641682d4b78c8b35b3bfceff214d5faae37\",\"license\":\"AGPL-3.0\"},\"src/outerspace/interfaces/IOuterSpaceFleets.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\nimport \\\"../events/ImportingOuterSpaceEvents.sol\\\";\\n\\ninterface IOuterSpaceFleets is ImportingOuterSpaceTypes, ImportingOuterSpaceEvents {\\n\\n    function resolveFleet(uint256 fleetId, FleetResolution calldata resolution) external;\\n\\n    function send(\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external;\\n\\n    function sendFor(FleetLaunch calldata launch) external;\\n\\n    function getFleet(uint256 fleetId, uint256 from)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint40 launchTime,\\n            uint32 quantity,\\n            uint64 flyingAtLaunch, // can be more than quantity if multiple fleet were launched around the same time from the same planet\\n            uint64 destroyedAtLaunch\\n        );\\n}\\n\",\"keccak256\":\"0x7cfc331fae6a2f99d3a92eccfd5e4a92447c6fd93e3201753490fd775f855d09\",\"license\":\"AGPL-3.0\"},\"src/outerspace/types/ImportingOuterSpaceTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ImportingOuterSpaceTypes {\\n    // front running protection : _frontruunningDelay / 2 slots\\n    struct InFlight {\\n        uint32 flying;\\n        uint32 destroyed;\\n        // STORE last attack too, to compute combined attack on it ? uint128 is plainty enough\\n    }\\n\\n    // TODO remove\\n    // struct Account {\\n    //     // TODO add more info\\n    //     // stake for example ? => coild it be used by staking ?\\n    //     // numPlanets ?\\n    //     // numSpaceships ? => probably too much ?\\n    //     uint64 totalProduction;\\n    //     uint64 productionDebt;\\n    // }\\n\\n    struct Discovered {\\n        uint32 minX;\\n        uint32 maxX;\\n        uint32 minY;\\n        uint32 maxY;\\n    }\\n\\n    // TODO split in 2 structs ? PlanetOwnership and PlanetState ?\\n    struct Planet {\\n        address owner;\\n        uint40 ownershipStartTime; // ~ 34865 years, should be enough :)\\n        uint40 exitStartTime; // ~ 34865 years, should be enough :)\\n        // TODO uint16 ?\\n        ///\\n        uint32 numSpaceships; // uint31 + first bit => active // TODO use bool active ?\\n        uint40 lastUpdated; // ~ 34865 years, should be enough :)\\n        int40 travelingUpkeep; // decrease per _upkeepProductionDecreaseRatePer10000th  * production\\n        uint32 overflow;\\n        // bool active; // TODO ?\\n        // bool exiting; // TODO ?\\n    }\\n\\n    struct Fleet {\\n        address owner;\\n        uint40 launchTime; // ~ 34865 years, should be enough :)\\n        uint32 quantity; // TODO? first bit = done? to keep quantity value on-chain post resolution, actually not needed, can be given in the hash\\n        // we got 24bit more to store if needed\\n        // operator ? // signer ?\\n    }\\n\\n    struct PlanetStats {\\n        int8 subX;\\n        int8 subY;\\n        uint16 stake;\\n        uint16 production;\\n        uint16 attack;\\n        uint16 defense;\\n        uint16 speed;\\n        uint16 natives;\\n    }\\n\\n    struct ExternalPlanet {\\n        address owner;\\n        uint40 ownershipStartTime; // ~ 34865 years, should be enough :)\\n        uint40 exitStartTime; // ~ 34865 years, should be enough :)\\n        uint32 numSpaceships;\\n        uint32 overflow;\\n        uint40 lastUpdated; // ~ 34865 years, should be enough :)\\n        bool active;\\n        // bool exiting;\\n        uint256 reward;\\n    }\\n\\n    struct FleetLaunch {\\n        address fleetSender;\\n        address fleetOwner;\\n        uint256 from;\\n        uint32 quantity;\\n        bytes32 toHash;\\n    }\\n    struct FleetResolution {\\n        uint256 from;\\n        uint256 to;\\n        uint256 distance;\\n        uint256 arrivalTimeWanted;\\n        bool gift;\\n        address specific;\\n        bytes32 secret;\\n        address fleetSender; // does not work ?\\n        address operator; // should be saved ?\\n    }\\n\\n    struct AccumulatedAttack {\\n        address target;\\n        uint32 numAttackSpent;\\n        uint32 damageCausedSoFar;\\n        uint16 averageAttackPower;\\n    }\\n}\\n\",\"keccak256\":\"0xde203f8ac79d1cce8910e4208fc94b79008b4267f50b39c44a6a1d409282cf8d\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6102006040523480156200001257600080fd5b5060405162005af838038062005af88339810160408190526200003591620001a6565b806000600482608001516200004b919062000267565b60808301519091506200006082600462000299565b63ffffffff1614620000b85760405162461bcd60e51b815260206004820152601d60248201527f54494d455f5045525f444953545f4e4f545f444956495349424c455f34000000604482015260640160405180910390fd5b81516001600160a01b0390811660805260208301511660a0908152604083015160c0908152606084015160e090815263ffffffff938416610100908152928501516101209081529185015184166101409081529085015190931661016090815291840151610180528301516101a052908201516101c05201516101e05250620002d4565b60405161018081016001600160401b03811182821017156200016e57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b03811681146200018c57600080fd5b919050565b805163ffffffff811681146200018c57600080fd5b60006101808284031215620001ba57600080fd5b620001c46200013c565b620001cf8362000174565b8152620001df6020840162000174565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201526200021a60c0840162000191565b60c08201526200022d60e0840162000191565b60e0820152610100838101519082015261012080840151908201526101408084015190820152610160928301519281019290925250919050565b600063ffffffff808416806200028d57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600063ffffffff80831681851681830481118215151615620002cb57634e487b7160e01b600052601160045260246000fd5b02949350505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161567d6200047b60003960008181613fa701528181613fda0152818161405b015261408e0152600061101401526000818161108e015281816110bc015281816113cc0152818161141601528181613426015281816134a101528181613c9e01528181613ccc015281816143e7015281816144270152818161474101526147810152600081816103f50152818161178401528181611d5101528181611e8701528181611f3601528181611fdd015261412a015260008181610fb7015281816112dc015281816121ae015281816122110152818161489901526148f80152600081816110fa015281816114540152818161346c01528181613d0a0152818161446501526147bf0152600061252301526000611bbd01526000611c8d015260008181610ed101526119a7015260008181612a0001528181612b8401528181612ca101528181612d8301528181612eb001528181612fa801528181613135015281816132180152818161330f015261361901526000505061567d6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063112e685114610051578063cf3ecf0714610066578063ee54339314610079578063f69438c3146100ea575b600080fd5b61006461005f366004614973565b6100fd565b005b6100646100743660046149a8565b6101d1565b61008c6100873660046149c0565b610381565b6040805173ffffffffffffffffffffffffffffffffffffffff909616865264ffffffffff909416602086015263ffffffff9092169284019290925267ffffffffffffffff918216606084015216608082015260a00160405180910390f35b6100646100f83660046149e2565b610465565b6000336040805160208101859052908101869052606082811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690820181905260748201529091506000906088016040516020818303038152906040528051906020012060001c90506101ca81836040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018863ffffffff16815260200187815250610622565b5050505050565b336101df6020830183614a6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102c757600360006102226020850185614a6a565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604091820160009081209185168152925290205460ff166102c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e440000000000000000000060448201526064015b60405180910390fd5b6000608083013560408401356102e06020860186614a6a565b6040805160208101949094528301919091527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b8116828401529084901b166074820152608801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120905061037c818361037736879003870187614ad8565b610622565b505050565b60008281526001602052604081205473ffffffffffffffffffffffffffffffffffffffff81169174010000000000000000000000000000000000000000820464ffffffffff1691790100000000000000000000000000000000000000000000000000900463ffffffff1690808061041960027f0000000000000000000000000000000000000000000000000000000000000000614be4565b61042a9064ffffffffff8716614be4565b6000978852600460209081526040808a20928a529190529096205494979396509194505063ffffffff80841693640100000000900416919050565b8160c0820135602083013561048060a0850160808601614c08565b61049060c0860160a08701614a6a565b85606001356040516020016104ef959493929190948552602085019390935290151560f81b604084015260601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166041830152605582015260750190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101208235610538610100850160e08601614a6a565b61054a61012086016101008701614a6a565b6040805160208101959095528401929092527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b81168285015291901b1660748201526088016040516020818303038152906040528051906020012060001c14610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f494e56414c49445f464c4545545f444154415f4f525f5345435245540000000060448201526064016102be565b61061e8282610a99565b5050565b604080820151600090815260208190529081206040805160e081018252825473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820481166020840152790100000000000000000000000000000000000000000000000000909104811682840152600184015463ffffffff8082166060850152640100000000820490921660808401526901000000000000000000810460040b60a08401526e01000000000000000000000000000090041660c0820152908401519192506000916107069190610dcd565b8254909150790100000000000000000000000000000000000000000000000000900464ffffffffff1615610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504c414e45545f4558495400000000000000000000000000000000000000000060448201526064016102be565b8154835173ffffffffffffffffffffffffffffffffffffffff90811691161461081b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016102be565b61082481610f2d565b826060015163ffffffff16816060015163ffffffff1610156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f535041434553484950535f4e4f545f454e4f554748000000000000000000000060448201526064016102be565b6108b08184606001516113af565b6108ba82826114f0565b6108cc8360400151846060015161177b565b6040518060600160405280846020015173ffffffffffffffffffffffffffffffffffffffff1681526020014264ffffffffff168152602001846060015163ffffffff168152506001600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160196101000a81548163ffffffff021916908363ffffffff1602179055509050508260400151836020015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167f22cbc8dd686d2b19557805c93c5d123703e520cb709b4c179c7b723dc621138287898860600151876060015188608001518960e00151604051610a8a9695949392919073ffffffffffffffffffffffffffffffffffffffff969096168652602086019490945263ffffffff9283166040860152908216606085015260040b60808401521660a082015260c00190565b60405180910390a45050505050565b60208181013560008181528083526040808220815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116978301979097527901000000000000000000000000000000000000000000000000009004861692810192909252600181015463ffffffff8082166060850152640100000000820490961660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490941660c08201529091610b799190610dcd565b600085815260016020526040812091925090610b969085356118a6565b90506000816040015163ffffffff1611610c0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f464c4545545f444f5f4e4f545f4558495354000000000000000000000000000060448201526064016102be565b610c2e8460400135856000013586602001358460600151866101400151611a14565b610c4b846040013585606001358360200151846060015185611ba5565b610c5482610f2d565b610c6c81610c6736879003870187614c23565b611d48565b610c8a81610c7f36879003870187614c23565b846101000151611e17565b610ca38183610c9e36889003880188614c23565b611e3e565b610cad8183611e5d565b610cc581610cc036879003870187614c23565b611fc4565b610cd18582863561207b565b610cdb83836114f0565b610ce581836122ef565b60006001600087815260200190815260200160002060000160196101000a81548163ffffffff021916908363ffffffff16021790555081610100015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16867f4b6201a9525ecb63853af18e9bcccd8166dc40fc02b71a262a5a9a523064be1287602001358560c0015186610120015187610140015188608001518960a001518a61010001518c606001518d608001518e60e001518e61022001518f6102400151604051610a8a9c9b9a99989796959493929190614cb6565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152600080610e3685606001516124ec565b85855260808088015164ffffffffff908116602088015283151560408089019190915263ffffffff80851660608a015260a0808c015160040b948a0194909452908a01805183169389019390935291511660c0808801919091528801511660e0860152865173ffffffffffffffffffffffffffffffffffffffff9081166101008701528751166101208601529092509050610f1e84604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61014084015250909392505050565b60a081015164ffffffffff1615610f7e57610f4b8160a0015161250b565b15610f7e57600060c082018190526060820181905260808201819052610120820181905260e08201819052604090910152565b6000816020015164ffffffffff1642610f979190614d42565b90506000610fa9836101400151612558565b90506000610e1063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610fe561ffff851686614d59565b610fef9190614d59565b610ff99190614be4565b9050600080856080015160040b131561107f576127106110397f000000000000000000000000000000000000000000000000000000000000000084614d59565b6110439190614be4565b9050846080015164ffffffffff168111156110665750608084015164ffffffffff165b8085608001516110769190614d96565b60040b60808601525b606085015163ffffffff1660007f0000000000000000000000000000000000000000000000000000000000000000156112c7576000610e106110e57f000000000000000000000000000000000000000000000000000000000000000061ffff8916614d59565b6110ef9190614be4565b61111f9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b905060008860400151611133576000611135565b815b90508084111561123a5760c089015164ffffffffff166112355760e08901516107089063ffffffff161561119757828a60e001516107086111769190614e14565b63ffffffff166111869190614be4565b905061070881101561119757506107085b6000610e106111a6838c614d59565b6111b09190614be4565b90506111bc8387614d42565b8111156111d0576111cd8387614d42565b90505b85811115611203578a60400151156111fa57856111ed888a614d42565b6111f79190614dfc565b94505b60009550611232565b8a60400151156112255780611218888a614d42565b6112229190614dfc565b94505b61122f8187614d42565b95505b50505b611282565b8860400151156112825760006112508583614d42565b9050600061125e8789614d42565b905081811115611278576112728282614d42565b94508190505b61122f8187614dfc565b8860400151156112c0576000838a6080015160040b6112a19190614e40565b9050818112156112b7576112b482614eb4565b90505b60040b60808a01525b5050611376565b8660400151156113395782610e1063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661130a61ffff89168a614d59565b6113149190614d59565b61131e9190614be4565b6113289190614d42565b6113329083614dfc565b9150611376565b6000610e1061134a88610708614d59565b6113549190614be4565b9050828111156113675750600091611374565b6113718184614d42565b92505b505b638000000082106113995761139060016380000000614eed565b63ffffffff1691505b5063ffffffff1660609095019490945250505050565b80826060018181516113c19190614eed565b63ffffffff169052507f00000000000000000000000000000000000000000000000000000000000000001561061e578160400151156114ae57600061140a836101400151612558565b90506000610e1061143f7f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b6114499190614be4565b6114799063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b905060008363ffffffff16856080015160040b6114969190614f12565b9050818113156114a35750805b60040b608085015250505b8063ffffffff168260e0015163ffffffff1611156114e557808260e0018181516114d89190614eed565b63ffffffff169052505050565b600060e08301525050565b60008160a0015164ffffffffff16118015611514575060c081015164ffffffffff16155b1561152257611522816125f5565b80610120015173ffffffffffffffffffffffffffffffffffffffff1681610100015173ffffffffffffffffffffffffffffffffffffffff161461161f57610120810151825473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffff000000000000000000000000000000000000000000000000009091168117740100000000000000000000000000000000000000004264ffffffffff1602177fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff1684558251610100840151604051919316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a45b60008160c0015164ffffffffff16118015611643575060a081015164ffffffffff16155b1561169c5760c0810151825464ffffffffff909116790100000000000000000000000000000000000000000000000000027fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff9091161782555b6116ae816040015182606001516126ba565b6001929092018054608083015160e09093015163ffffffff9485167fffffffffffffffffffffffffffffffffffff0000000000ffffffffff0000000090921691909117690100000000000000000064ffffffffff94851602177fffffffffffffffffffffffffffff00000000ffffffffff0000000000ffffffff166e01000000000000000000000000000094909116939093027fffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff1692909217640100000000429290921691909102179055565b60006117a860027f0000000000000000000000000000000000000000000000000000000000000000614be4565b6117b29042614be4565b600084815260046020908152604080832084845290915290205490915063ffffffff166117df8382614f86565b90508263ffffffff168163ffffffff161015611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4f524249545f4f564552464c4f5700000000000000000000000000000000000060448201526064016102be565b6000938452600460209081526040808620938652929052922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9093169290921790915550565b60408051610280810182526000606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082018190526102408201819052610260820152835473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810464ffffffffff166020830152790100000000000000000000000000000000000000000000000000900463ffffffff16918101919091526119f482604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b60608201819052611a04906126e0565b61ffff1661026082015292915050565b600080611a2084612777565b91509150600080611a3085612777565b90925090506000600284820b611a4b60808c901c6004614fae565b611a559190615064565b600084900b611a6960808c901c6004614fae565b611a739190615064565b611a7d91906150d4565b611a879190615304565b6002600087900b611aab6fffffffffffffffffffffffffffffffff8d166004614fae565b611ab59190615064565b600086900b611ad76fffffffffffffffffffffffffffffffff8d166004614fae565b611ae19190615064565b611aeb91906150d4565b611af59190615304565b611aff9190615064565b600f0b905080611b1060028c6153c3565b11158015611b3357506002611b268b6001614dfc565b611b3091906153c3565b81105b611b99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f77726f6e672064697374616e636500000000000000000000000000000000000060448201526064016102be565b50505050505050505050565b6000611c0e85611bb4856127ab565b61ffff16611be47f0000000000000000000000000000000000000000000000000000000000000000612710614d59565b611bee908a614d59565b611bf89190614be4565b611c099064ffffffffff8816614dfc565b612842565b64ffffffffff8116610200840152905042811115611c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f746f6f206561726c79000000000000000000000000000000000000000000000060448201526064016102be565b611cb27f000000000000000000000000000000000000000000000000000000000000000082614dfc565b4210611d40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60448201527f737420696e20737061636500000000000000000000000000000000000000000060648201526084016102be565b505050505050565b6000611d7560027f0000000000000000000000000000000000000000000000000000000000000000614be4565b836020015164ffffffffff16611d8b9190614be4565b8251600090815260046020908152604080832084845290915290819020549085015191925063ffffffff640100000000909104811691908116821015611deb578185604001818151611ddd9190614eed565b63ffffffff16905250611df3565b600060408601525b6040850151611e029082614eed565b63ffffffff1660809095019490945250505050565b600080611e25838587612859565b90151560c0870152151560e09095019490945250505050565b8260c0015115611e525761037c8383613348565b61037c83838361352d565b60a082015163ffffffff161561061e5780516000908152600460205260408120816001611eab60027f0000000000000000000000000000000000000000000000000000000000000000614be4565b611eb59042614be4565b611ebf9190614d42565b815260208082019290925260409081016000908120610160870151815461018089015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009092169216919091171781558551825260049093529081209192509081611f5a60027f0000000000000000000000000000000000000000000000000000000000000000614be4565b611f649042614be4565b815260208101919091526040016000206101a085015181546101c087015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921692169190911717905550505050565b608082015163ffffffff161561061e57600061200160027f0000000000000000000000000000000000000000000000000000000000000000614be4565b836020015164ffffffffff166120179190614be4565b60808401518351600090815260046020818152604080842086855290915290912080549394509192612058908490640100000000900463ffffffff16614eed565b92506101000a81548163ffffffff021916908363ffffffff160217905550505050565b61012082015163ffffffff161561037c57600081815260208181526040808320815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116958301959095527901000000000000000000000000000000000000000000000000009004841692810192909252600181015463ffffffff8082166060850152640100000000820490941660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490921660c08201529091906121699084610dcd565b905061217481610f2d565b6000612184826101400151612558565b61ffff169050600085610120015160030b836080015160040b6121a79190614e40565b9050610e107f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff1662093a806121e89190614d59565b6121f29190614d59565b6121fc9190614be4565b61220590614eb4565b81121561226b57610e107f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff1662093a8061224b9190614d59565b6122559190614d59565b61225f9190614be4565b61226890614eb4565b90505b600481900b608084015261227f84846114f0565b86857fb3dfee8f5fa319b23a50d6c744d7bdab47db988bb6b44eb38eaec1a967023282856060015186608001518760e001516040516122de9392919063ffffffff938416815260049290920b6020830152909116604082015260600190565b60405180910390a350505050505050565b8161010001511561236757516000908152600960209081526040808320845173ffffffffffffffffffffffffffffffffffffffff16845282528083206102009094015164ffffffffff1683529290522080547fffff000000000000000000000000000000000000000000000000000000000000169055565b816101e001511561061e5780516000908152600960209081526040808320855173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020087015164ffffffffff16855290925290912061010083015181547fffffffffffffffffffffffff000000000000000000000000000000000000000016921691909117815560a08301516101408401516124039190614f86565b815461012085015161026086015161ffff167c0100000000000000000000000000000000000000000000000000000000027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff92831674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff95909316780100000000000000000000000000000000000000000000000002949094167fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9093169290921717919091161790555050565b638000000081811681149060009061250490846153d2565b9050915091565b6000808264ffffffffff16118015612552575061254f7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff8416614dfc565b42115b92915050565b60006125638261387d565b6125c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61255282600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0613899565b60006126108261010001518360000151846101400151613913565b61010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600260205260408120549192509061264a908390614dfc565b6101008401805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600260209081526040918290208590559251905184815293945016917f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b019910160405180910390a2505050565b600081836126c95760006126cf565b63800000005b6126d99190614f86565b9392505050565b60006126eb8261387d565b612751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61275c826014613a38565b61276b9060ff166101906153f5565b61255290610fa0615416565b60008061278683826003613ad2565b612791906001615433565b91506127a08360026003613ad2565b612504906001615433565b60006127b68261387d565b61281c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b612827826024613a38565b6128369060ff1661014d6153f5565b6125529061138d615416565b60008183101561285257816126d9565b5090919050565b60008073ffffffffffffffffffffffffffffffffffffffff851661288257506000905080613340565b825173ffffffffffffffffffffffffffffffffffffffff86811691161480156128da57508360e0015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156128eb5750600190506000613340565b8360800151806129145750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b1561306e5760a084015173ffffffffffffffffffffffffffffffffffffffff16158061296f57508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff16145b806129935750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b15612abd5760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612a4157600080fd5b505afa158015612a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7991906154a7565b9150506001816bffffffffffffffffffffffff1660001480612ab35750846020015164ffffffffff16826bffffffffffffffffffffffff16115b9250925050613340565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415612e38578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612c395760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612bc657600080fd5b505afa158015612bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfe91906154a7565b9150506000816bffffffffffffffffffffffff1611846020015164ffffffffff16826bffffffffffffffffffffffff16119250925050613340565b60e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612ce257600080fd5b505afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a91906154a7565b855160208701516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201528a8316602482015264ffffffffff9091166044820152919350600092507f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612dc457600080fd5b505afa158015612dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfc91906154a7565b9150506000816bffffffffffffffffffffffff1611856020015164ffffffffff16836bffffffffffffffffffffffff1611935093505050613340565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff1611156130695760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b158015612ef157600080fd5b505afa158015612f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2991906154dc565b5090506bffffffffffffffffffffffff8116156130675760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612fea57600080fd5b505afa158015612ffe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302291906154a7565b9150506001816bffffffffffffffffffffffff166000148061305c5750856020015164ffffffffff16826bffffffffffffffffffffffff16115b935093505050613340565b505b613340565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415613164578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612c395760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612baf565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff161180156131be57508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff1614155b156133405760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b15801561325957600080fd5b505afa15801561326d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329191906154dc565b5090506bffffffffffffffffffffffff811661333e5760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612fd3565b505b935093915050565b8160e0015115613398576127106109c4836040015163ffffffff1661336d9190614d59565b6133779190614be4565b826040015163ffffffff1661338c9190614d42565b63ffffffff1660408301525b6000826040015182606001516133ae9190614f86565b63ffffffff169050638000000081106133d9576133d060016380000000614eed565b63ffffffff1690505b63ffffffff81166060830152604082015161341f578160e0015163ffffffff16826060015163ffffffff16111561037c57606082015163ffffffff1660e0830152505050565b6000610e107f0000000000000000000000000000000000000000000000000000000000000000613453856101400151612558565b61ffff166134619190614d59565b6134919063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b61349b9190615508565b905060007f00000000000000000000000000000000000000000000000000000000000000001180156134d257508063ffffffff1682115b1561351f578260e0015163ffffffff168184606001516134f29190614eed565b63ffffffff16111561351a5780836060015161350e9190614eed565b63ffffffff1660e08401525b613527565b600060e08401525b50505050565b606082015163ffffffff1615801561354757508160400151155b156135565761037c8383613aef565b61020083015161356890610a8c61552b565b64ffffffffff16421015613873578060e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146136d95760e0810151835160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015264ffffffffff1660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b15801561365a57600080fd5b505afa15801561366e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369291906154a7565b9150506bffffffffffffffffffffffff8116158015906136cb5750836020015164ffffffffff16816bffffffffffffffffffffffff1611155b15156101e0850152506136e2565b60016101e08401525b826101e00151156138735781516000908152600960209081526040808320865173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020088015164ffffffffff1685528352928190208151608081018352905480851680835274010000000000000000000000000000000000000000820463ffffffff9081169584019590955278010000000000000000000000000000000000000000000000008204909416928201929092527c010000000000000000000000000000000000000000000000000000000090910461ffff1660608201526101008501519092161480156137dd5750602081015163ffffffff1615155b1561387157806020015184604001516137f69190614f86565b63ffffffff168160200151826060015161ffff166138149190614e14565b856040015186610260015161ffff1661382d9190614e14565b6138379190614f86565b63ffffffff166138479190614be4565b61ffff16610260850152602081015163ffffffff9081166102408601526040820151166102208501525b505b61037c8383613bd9565b600061388c8260346010613ad2565b60ff166001149050919050565b6000806138a68585613a38565b9050826138b482600261554b565b6138bf90600161556c565b60ff16602081106138d2576138d2615591565b1a836138df83600261554b565b60ff16602081106138f2576138f2615591565b61390091901a6101006153f5565b61390a9190615416565b95945050505050565b6000670de0b6b3a764000061392783613d96565b61ffff166139359190614d59565b9050828473ffffffffffffffffffffffffffffffffffffffff167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f7388360405161398091815260200190565b60405180910390a36000838152600760205260409020548015613a305773ffffffffffffffffffffffffffffffffffffffff85166000818152600860209081526040808320858452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558783526007909152808220829055518392879290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b509392505050565b600080613a4784846040613ad2565b90506000613a566002836155c0565b90506000613a656002846155e2565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff841660208110613a9e57613a9e615591565b1a905060ff8216613abc5760048160ff16901c945050505050612552565b613ac76010826155e2565b945050505050612552565b6000613ae760ff80841690851686901c615604565b949350505050565b6000613afe83606001516126e0565b90506000613b10836101400151613e6d565b90506000613b22846101400151613ee9565b9050600080613b49876040015163ffffffff168461ffff168761ffff168761ffff16613f80565b63ffffffff8083166101208b01529193509150811661ffff8416148015613b7f57508163ffffffff16876040015163ffffffff16115b15613bd057818760400151613b949190614eed565b63ffffffff908116606088015281166101408801526001610100880152865173ffffffffffffffffffffffffffffffffffffffff166101208701525b50505050505050565b613be38282614121565b6000826101a001518361016001518461022001518460600151613c069190614f86565b613c109190614f86565b613c1a9190614f86565b63ffffffff1690506000613c32836101400151612558565b905081158015613c4c57506000846040015163ffffffff16115b15613d8057835173ffffffffffffffffffffffffffffffffffffffff1661012084015260408085015163ffffffff166060850152830151613c9c57606083015163ffffffff1660e0840152613d73565b7f000000000000000000000000000000000000000000000000000000000000000015613d73576000610e10613cf57f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b613cff9190614be4565b613d2f9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b90508063ffffffff16846060015163ffffffff161115613d6957808460600151613d599190614eed565b63ffffffff1660e0850152613d71565b600060e08501525b505b6001610100850152613527565b613d8b848484614296565b613527848483614849565b6000613da18261387d565b613e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b6000613e1483600c613a38565b905060ff81167e060008000a000c000e00100012001400140016001800200028003000380048613e458260026153f5565b613e50906001615416565b61ffff1660208110613e6457613e64615591565b1a949350505050565b6000613e788261387d565b613ede576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61275c82601c613a38565b6000613ef48261387d565b613f5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b613f6582602c613a38565b613f749060ff16610bb86153f5565b61255290613a98615416565b600080851580613f8e575084155b15613f9e57506000905080614118565b600085613fcb887f0000000000000000000000000000000000000000000000000000000000000000614d59565b613fd59190614be4565b6140027f0000000000000000000000000000000000000000000000000000000000000000620f4240614d42565b61400c9190614dfc565b6140169088614d59565b90506000620f4240856140298885614d59565b6140339190614be4565b61403d9190614be4565b90508087111561405257879350809250614115565b60008861407f897f0000000000000000000000000000000000000000000000000000000000000000614d59565b6140899190614be4565b6140b67f0000000000000000000000000000000000000000000000000000000000000000620f4240614d42565b6140c09190614dfc565b6140ca9089614d59565b90506000620f4240886140dd8985614d59565b6140e79190614be4565b6140f19190614be4565b63ffffffff16905089811061410e5761410b60018b614d42565b90505b9450879350505b50505b94509492505050565b600061414e60027f0000000000000000000000000000000000000000000000000000000000000000614be4565b6141589042614be4565b825160009081526004602052604081209192509081614178600185614d42565b815260208101919091526040016000208054909150638000000063ffffffff909116116141ac57805463ffffffff166141b2565b637fffffff5b63ffffffff90811661016086015281546380000000640100000000909104909116116141ed578054640100000000900463ffffffff166141f3565b637fffffff5b63ffffffff90811661018086015283516000908152600460209081526040808320868452909152902080549091638000000091161161423957805463ffffffff1661423f565b637fffffff5b63ffffffff9081166101a0870152815463800000006401000000009091049091161161427a578054640100000000900463ffffffff16614280565b637fffffff5b63ffffffff166101c09095019490945250505050565b6102608301516101408301516000906142ae90613e6d565b90506000806142e187610240015188604001516142cb9190614f86565b63ffffffff16868661ffff168661ffff16613f80565b63ffffffff8082166101408b01528083166101208b015260408a0151929450909250161580159061431c57508487610140015163ffffffff16145b156144fc5786610220015163ffffffff16866060015163ffffffff16866143439190614d42565b61434d9190614d42565b63ffffffff1660a0880181905261014088015161436a9190614eed565b63ffffffff166101408801526102408701516040880151839161438c91614f86565b6143969190614eed565b63ffffffff1660608701526001610100880152865173ffffffffffffffffffffffffffffffffffffffff1661012087015260408601516143e557606086015163ffffffff1660e0870152613bd0565b7f0000000000000000000000000000000000000000000000000000000000000000156144f757600061441b876101400151612558565b90506000610e106144507f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b61445a9190614be4565b61448a9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b90508063ffffffff16886060015163ffffffff1611156144ec578760e0015163ffffffff168189606001516144bf9190614eed565b63ffffffff1611156144e7578088606001516144db9190614eed565b63ffffffff1660e08901525b6144f4565b600060e08901525b50505b613bd0565b86610240015187604001516145119190614f86565b63ffffffff1687610120015163ffffffff16141561484157866102200151866060015161453e9190614f86565b63ffffffff168163ffffffff1611156146a55761022087015160608701516145669083614eed565b6145709190614eed565b63ffffffff90811660a0890190815260006060890152516101608901519082169116106145dc578660a0015187610160018181516145ae9190614eed565b63ffffffff1690525060a0870151610180880180516145ce908390614f86565b63ffffffff169052506146d1565b86610160015187610180018181516145f49190614f86565b63ffffffff1690525061016087015160a088015160009161461491614eed565b90508063ffffffff16886101a0015163ffffffff161061466d5780886101a0018181516146419190614eed565b63ffffffff169052506101c08801805182919061465f908390614f86565b63ffffffff16905250614697565b876101a00151886101c0018181516146859190614f86565b63ffffffff1690525060006101a08901525b5060006101608801526146d1565b8087610220015187606001516146bb9190614f86565b6146c59190614eed565b63ffffffff1660608701525b8660a001518761014001516146e69190614eed565b63ffffffff16610140880152604086015161473f578560e0015163ffffffff168163ffffffff16111561471f57600060e0870152613bd0565b808660e0018181516147319190614eed565b63ffffffff16905250613bd0565b7f0000000000000000000000000000000000000000000000000000000000000000156144f7576000614775876101400151612558565b90506000610e106147aa7f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b6147b49190614be4565b6147e49063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b90508063ffffffff16886060015163ffffffff1611156144ec578760e0015163ffffffff168363ffffffff161161483557828860e0018181516148279190614eed565b63ffffffff169052506144f4565b600060e08901526144f4565b613bd0615618565b60008361012001518460a001518561014001516148669190614f86565b6148709190614f86565b63ffffffff169050600081846080015160040b61488d9190614e40565b9050610e1063ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166148ca61ffff861662093a80614d59565b6148d49190614d59565b6148de9190614be4565b6148e790614eb4565b81121561494957610e1063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661492961ffff861662093a80614d59565b6149339190614d59565b61493d9190614be4565b61494690614eb4565b90505b60040b608090930192909252505050565b803563ffffffff8116811461496e57600080fd5b919050565b60008060006060848603121561498857600080fd5b833592506149986020850161495a565b9150604084013590509250925092565b600060a082840312156149ba57600080fd5b50919050565b600080604083850312156149d357600080fd5b50508035926020909101359150565b6000808284036101408112156149f757600080fd5b833592506101207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215614a2c57600080fd5b506020830190509250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114614a5c57600080fd5b50565b803561496e81614a3a565b600060208284031215614a7c57600080fd5b81356126d981614a3a565b604051610120810167ffffffffffffffff81118282101715614ad2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b600060a08284031215614aea57600080fd5b60405160a0810181811067ffffffffffffffff82111715614b34577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528235614b4281614a3a565b81526020830135614b5281614a3a565b602082015260408381013590820152614b6d6060840161495a565b6060820152608083013560808201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082614bf357614bf3614b86565b500490565b8035801515811461496e57600080fd5b600060208284031215614c1a57600080fd5b6126d982614bf8565b60006101208284031215614c3657600080fd5b614c3e614a87565b82358152602083013560208201526040830135604082015260608301356060820152614c6c60808401614bf8565b6080820152614c7d60a08401614a5f565b60a082015260c083013560c0820152614c9860e08401614a5f565b60e0820152610100614cab818501614a5f565b908201529392505050565b8c81528b1515602082015263ffffffff8b811660408301528a81166060830152898116608083015288811660a083015287151560c0830152861660e08201526101808101614d0a61010083018760040b9052565b63ffffffff851661012083015263ffffffff841661014083015263ffffffff83166101608301529d9c50505050505050505050505050565b600082821015614d5457614d54614bb5565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d9157614d91614bb5565b500290565b60008160040b8360040b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000001831281151615614dd957614dd9614bb5565b81647fffffffff018313811615614df257614df2614bb5565b5090039392505050565b60008219821115614e0f57614e0f614bb5565b500190565b600063ffffffff80831681851681830481118215151615614e3757614e37614bb5565b02949350505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615614e7a57614e7a614bb5565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615614eae57614eae614bb5565b50500390565b60007f8000000000000000000000000000000000000000000000000000000000000000821415614ee657614ee6614bb5565b5060000390565b600063ffffffff83811690831681811015614f0a57614f0a614bb5565b039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614f4c57614f4c614bb5565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615614f8057614f80614bb5565b50500190565b600063ffffffff808316818516808303821115614fa557614fa5614bb5565b01949350505050565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff600082136000841383830485118282161615614fe757614fe7614bb5565b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000600085128682058612818416161561502257615022614bb5565b6000871292508582058712848416161561503e5761503e614bb5565b8585058712818416161561505457615054614bb5565b5050509290910295945050505050565b600081600f0b83600f0b60008212826f7fffffffffffffffffffffffffffffff0382138115161561509757615097614bb5565b827fffffffffffffffffffffffffffffffff800000000000000000000000000000000382128116156150cb576150cb614bb5565b50019392505050565b600081600f0b83600f0b60008112817fffffffffffffffffffffffffffffffff800000000000000000000000000000000183128115161561511757615117614bb5565b816f7fffffffffffffffffffffffffffffff018313811615614df257614df2614bb5565b600181815b8085111561519457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561517a5761517a614bb5565b8085161561518757918102915b93841c9390800290615140565b509250929050565b80825b60018086116151ae5750613340565b816f7fffffffffffffffffffffffffffffff048211156151d0576151d0614bb5565b808616156151dd57918102915b9490941c93800261519f565b60008280156151ff576001811461520957615212565b6001915050612552565b82915050612552565b508161522057506000612552565b5060016000821380821461523957801561526057615282565b826f7fffffffffffffffffffffffffffffff0483111561525b5761525b614bb5565b615282565b826f7fffffffffffffffffffffffffffffff0583121561528257615282614bb5565b508083161561528e5750805b61529e8360011c8384028361519c565b806f7fffffffffffffffffffffffffffffff0482116000831316156152c5576152c5614bb5565b807fffffffffffffffffffffffffffffffff800000000000000000000000000000000582126000831216156152fc576152fc614bb5565b029392505050565b60006126d960ff841683600f0b6151e9565b60008261532557506001612552565b8161533257506000612552565b81600181146151ff576002811461534857615364565b60ff84111561535957615359614bb5565b50506001821b612552565b5060208310610133831016604e8410600b8410161715615387575081810a612552565b615391838361513b565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156152fc576152fc614bb5565b60006126d960ff841683615316565b600063ffffffff808416806153e9576153e9614b86565b92169190910692915050565b600061ffff80831681851681830481118215151615614e3757614e37614bb5565b600061ffff808316818516808303821115614fa557614fa5614bb5565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800183128115161561547657615476614bb5565b81607f018313811615614df257614df2614bb5565b80516bffffffffffffffffffffffff8116811461496e57600080fd5b600080604083850312156154ba57600080fd5b82516154c581614a3a565b91506154d36020840161548b565b90509250929050565b600080604083850312156154ef57600080fd5b6154f88361548b565b9150602083015190509250929050565b600063ffffffff8084168061551f5761551f614b86565b92169190910492915050565b600064ffffffffff808316818516808303821115614fa557614fa5614bb5565b600060ff821660ff84168160ff04811182151516156152fc576152fc614bb5565b600060ff821660ff84168060ff0382111561558957615589614bb5565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff8316806155d3576155d3614b86565b8060ff84160491505092915050565b600060ff8316806155f5576155f5614b86565b8060ff84160691505092915050565b60008261561357615613614b86565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea2646970667358221220c4ca06ee136668b79b1ac85b9cc2635cfd1c435135fb56d31c101717ec0cd89b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063112e685114610051578063cf3ecf0714610066578063ee54339314610079578063f69438c3146100ea575b600080fd5b61006461005f366004614973565b6100fd565b005b6100646100743660046149a8565b6101d1565b61008c6100873660046149c0565b610381565b6040805173ffffffffffffffffffffffffffffffffffffffff909616865264ffffffffff909416602086015263ffffffff9092169284019290925267ffffffffffffffff918216606084015216608082015260a00160405180910390f35b6100646100f83660046149e2565b610465565b6000336040805160208101859052908101869052606082811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690820181905260748201529091506000906088016040516020818303038152906040528051906020012060001c90506101ca81836040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018863ffffffff16815260200187815250610622565b5050505050565b336101df6020830183614a6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102c757600360006102226020850185614a6a565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604091820160009081209185168152925290205460ff166102c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e440000000000000000000060448201526064015b60405180910390fd5b6000608083013560408401356102e06020860186614a6a565b6040805160208101949094528301919091527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b8116828401529084901b166074820152608801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120905061037c818361037736879003870187614ad8565b610622565b505050565b60008281526001602052604081205473ffffffffffffffffffffffffffffffffffffffff81169174010000000000000000000000000000000000000000820464ffffffffff1691790100000000000000000000000000000000000000000000000000900463ffffffff1690808061041960027f0000000000000000000000000000000000000000000000000000000000000000614be4565b61042a9064ffffffffff8716614be4565b6000978852600460209081526040808a20928a529190529096205494979396509194505063ffffffff80841693640100000000900416919050565b8160c0820135602083013561048060a0850160808601614c08565b61049060c0860160a08701614a6a565b85606001356040516020016104ef959493929190948552602085019390935290151560f81b604084015260601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166041830152605582015260750190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101208235610538610100850160e08601614a6a565b61054a61012086016101008701614a6a565b6040805160208101959095528401929092527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b81168285015291901b1660748201526088016040516020818303038152906040528051906020012060001c14610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f494e56414c49445f464c4545545f444154415f4f525f5345435245540000000060448201526064016102be565b61061e8282610a99565b5050565b604080820151600090815260208190529081206040805160e081018252825473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820481166020840152790100000000000000000000000000000000000000000000000000909104811682840152600184015463ffffffff8082166060850152640100000000820490921660808401526901000000000000000000810460040b60a08401526e01000000000000000000000000000090041660c0820152908401519192506000916107069190610dcd565b8254909150790100000000000000000000000000000000000000000000000000900464ffffffffff1615610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504c414e45545f4558495400000000000000000000000000000000000000000060448201526064016102be565b8154835173ffffffffffffffffffffffffffffffffffffffff90811691161461081b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016102be565b61082481610f2d565b826060015163ffffffff16816060015163ffffffff1610156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f535041434553484950535f4e4f545f454e4f554748000000000000000000000060448201526064016102be565b6108b08184606001516113af565b6108ba82826114f0565b6108cc8360400151846060015161177b565b6040518060600160405280846020015173ffffffffffffffffffffffffffffffffffffffff1681526020014264ffffffffff168152602001846060015163ffffffff168152506001600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160196101000a81548163ffffffff021916908363ffffffff1602179055509050508260400151836020015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167f22cbc8dd686d2b19557805c93c5d123703e520cb709b4c179c7b723dc621138287898860600151876060015188608001518960e00151604051610a8a9695949392919073ffffffffffffffffffffffffffffffffffffffff969096168652602086019490945263ffffffff9283166040860152908216606085015260040b60808401521660a082015260c00190565b60405180910390a45050505050565b60208181013560008181528083526040808220815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116978301979097527901000000000000000000000000000000000000000000000000009004861692810192909252600181015463ffffffff8082166060850152640100000000820490961660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490941660c08201529091610b799190610dcd565b600085815260016020526040812091925090610b969085356118a6565b90506000816040015163ffffffff1611610c0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f464c4545545f444f5f4e4f545f4558495354000000000000000000000000000060448201526064016102be565b610c2e8460400135856000013586602001358460600151866101400151611a14565b610c4b846040013585606001358360200151846060015185611ba5565b610c5482610f2d565b610c6c81610c6736879003870187614c23565b611d48565b610c8a81610c7f36879003870187614c23565b846101000151611e17565b610ca38183610c9e36889003880188614c23565b611e3e565b610cad8183611e5d565b610cc581610cc036879003870187614c23565b611fc4565b610cd18582863561207b565b610cdb83836114f0565b610ce581836122ef565b60006001600087815260200190815260200160002060000160196101000a81548163ffffffff021916908363ffffffff16021790555081610100015173ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16867f4b6201a9525ecb63853af18e9bcccd8166dc40fc02b71a262a5a9a523064be1287602001358560c0015186610120015187610140015188608001518960a001518a61010001518c606001518d608001518e60e001518e61022001518f6102400151604051610a8a9c9b9a99989796959493929190614cb6565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152600080610e3685606001516124ec565b85855260808088015164ffffffffff908116602088015283151560408089019190915263ffffffff80851660608a015260a0808c015160040b948a0194909452908a01805183169389019390935291511660c0808801919091528801511660e0860152865173ffffffffffffffffffffffffffffffffffffffff9081166101008701528751166101208601529092509050610f1e84604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61014084015250909392505050565b60a081015164ffffffffff1615610f7e57610f4b8160a0015161250b565b15610f7e57600060c082018190526060820181905260808201819052610120820181905260e08201819052604090910152565b6000816020015164ffffffffff1642610f979190614d42565b90506000610fa9836101400151612558565b90506000610e1063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610fe561ffff851686614d59565b610fef9190614d59565b610ff99190614be4565b9050600080856080015160040b131561107f576127106110397f000000000000000000000000000000000000000000000000000000000000000084614d59565b6110439190614be4565b9050846080015164ffffffffff168111156110665750608084015164ffffffffff165b8085608001516110769190614d96565b60040b60808601525b606085015163ffffffff1660007f0000000000000000000000000000000000000000000000000000000000000000156112c7576000610e106110e57f000000000000000000000000000000000000000000000000000000000000000061ffff8916614d59565b6110ef9190614be4565b61111f9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b905060008860400151611133576000611135565b815b90508084111561123a5760c089015164ffffffffff166112355760e08901516107089063ffffffff161561119757828a60e001516107086111769190614e14565b63ffffffff166111869190614be4565b905061070881101561119757506107085b6000610e106111a6838c614d59565b6111b09190614be4565b90506111bc8387614d42565b8111156111d0576111cd8387614d42565b90505b85811115611203578a60400151156111fa57856111ed888a614d42565b6111f79190614dfc565b94505b60009550611232565b8a60400151156112255780611218888a614d42565b6112229190614dfc565b94505b61122f8187614d42565b95505b50505b611282565b8860400151156112825760006112508583614d42565b9050600061125e8789614d42565b905081811115611278576112728282614d42565b94508190505b61122f8187614dfc565b8860400151156112c0576000838a6080015160040b6112a19190614e40565b9050818112156112b7576112b482614eb4565b90505b60040b60808a01525b5050611376565b8660400151156113395782610e1063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661130a61ffff89168a614d59565b6113149190614d59565b61131e9190614be4565b6113289190614d42565b6113329083614dfc565b9150611376565b6000610e1061134a88610708614d59565b6113549190614be4565b9050828111156113675750600091611374565b6113718184614d42565b92505b505b638000000082106113995761139060016380000000614eed565b63ffffffff1691505b5063ffffffff1660609095019490945250505050565b80826060018181516113c19190614eed565b63ffffffff169052507f00000000000000000000000000000000000000000000000000000000000000001561061e578160400151156114ae57600061140a836101400151612558565b90506000610e1061143f7f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b6114499190614be4565b6114799063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b905060008363ffffffff16856080015160040b6114969190614f12565b9050818113156114a35750805b60040b608085015250505b8063ffffffff168260e0015163ffffffff1611156114e557808260e0018181516114d89190614eed565b63ffffffff169052505050565b600060e08301525050565b60008160a0015164ffffffffff16118015611514575060c081015164ffffffffff16155b1561152257611522816125f5565b80610120015173ffffffffffffffffffffffffffffffffffffffff1681610100015173ffffffffffffffffffffffffffffffffffffffff161461161f57610120810151825473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffff000000000000000000000000000000000000000000000000009091168117740100000000000000000000000000000000000000004264ffffffffff1602177fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff1684558251610100840151604051919316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a45b60008160c0015164ffffffffff16118015611643575060a081015164ffffffffff16155b1561169c5760c0810151825464ffffffffff909116790100000000000000000000000000000000000000000000000000027fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff9091161782555b6116ae816040015182606001516126ba565b6001929092018054608083015160e09093015163ffffffff9485167fffffffffffffffffffffffffffffffffffff0000000000ffffffffff0000000090921691909117690100000000000000000064ffffffffff94851602177fffffffffffffffffffffffffffff00000000ffffffffff0000000000ffffffff166e01000000000000000000000000000094909116939093027fffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff1692909217640100000000429290921691909102179055565b60006117a860027f0000000000000000000000000000000000000000000000000000000000000000614be4565b6117b29042614be4565b600084815260046020908152604080832084845290915290205490915063ffffffff166117df8382614f86565b90508263ffffffff168163ffffffff161015611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4f524249545f4f564552464c4f5700000000000000000000000000000000000060448201526064016102be565b6000938452600460209081526040808620938652929052922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9093169290921790915550565b60408051610280810182526000606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082018190526102408201819052610260820152835473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810464ffffffffff166020830152790100000000000000000000000000000000000000000000000000900463ffffffff16918101919091526119f482604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b60608201819052611a04906126e0565b61ffff1661026082015292915050565b600080611a2084612777565b91509150600080611a3085612777565b90925090506000600284820b611a4b60808c901c6004614fae565b611a559190615064565b600084900b611a6960808c901c6004614fae565b611a739190615064565b611a7d91906150d4565b611a879190615304565b6002600087900b611aab6fffffffffffffffffffffffffffffffff8d166004614fae565b611ab59190615064565b600086900b611ad76fffffffffffffffffffffffffffffffff8d166004614fae565b611ae19190615064565b611aeb91906150d4565b611af59190615304565b611aff9190615064565b600f0b905080611b1060028c6153c3565b11158015611b3357506002611b268b6001614dfc565b611b3091906153c3565b81105b611b99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f77726f6e672064697374616e636500000000000000000000000000000000000060448201526064016102be565b50505050505050505050565b6000611c0e85611bb4856127ab565b61ffff16611be47f0000000000000000000000000000000000000000000000000000000000000000612710614d59565b611bee908a614d59565b611bf89190614be4565b611c099064ffffffffff8816614dfc565b612842565b64ffffffffff8116610200840152905042811115611c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f746f6f206561726c79000000000000000000000000000000000000000000000060448201526064016102be565b611cb27f000000000000000000000000000000000000000000000000000000000000000082614dfc565b4210611d40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60448201527f737420696e20737061636500000000000000000000000000000000000000000060648201526084016102be565b505050505050565b6000611d7560027f0000000000000000000000000000000000000000000000000000000000000000614be4565b836020015164ffffffffff16611d8b9190614be4565b8251600090815260046020908152604080832084845290915290819020549085015191925063ffffffff640100000000909104811691908116821015611deb578185604001818151611ddd9190614eed565b63ffffffff16905250611df3565b600060408601525b6040850151611e029082614eed565b63ffffffff1660809095019490945250505050565b600080611e25838587612859565b90151560c0870152151560e09095019490945250505050565b8260c0015115611e525761037c8383613348565b61037c83838361352d565b60a082015163ffffffff161561061e5780516000908152600460205260408120816001611eab60027f0000000000000000000000000000000000000000000000000000000000000000614be4565b611eb59042614be4565b611ebf9190614d42565b815260208082019290925260409081016000908120610160870151815461018089015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009092169216919091171781558551825260049093529081209192509081611f5a60027f0000000000000000000000000000000000000000000000000000000000000000614be4565b611f649042614be4565b815260208101919091526040016000206101a085015181546101c087015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921692169190911717905550505050565b608082015163ffffffff161561061e57600061200160027f0000000000000000000000000000000000000000000000000000000000000000614be4565b836020015164ffffffffff166120179190614be4565b60808401518351600090815260046020818152604080842086855290915290912080549394509192612058908490640100000000900463ffffffff16614eed565b92506101000a81548163ffffffff021916908363ffffffff160217905550505050565b61012082015163ffffffff161561037c57600081815260208181526040808320815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116958301959095527901000000000000000000000000000000000000000000000000009004841692810192909252600181015463ffffffff8082166060850152640100000000820490941660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490921660c08201529091906121699084610dcd565b905061217481610f2d565b6000612184826101400151612558565b61ffff169050600085610120015160030b836080015160040b6121a79190614e40565b9050610e107f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff1662093a806121e89190614d59565b6121f29190614d59565b6121fc9190614be4565b61220590614eb4565b81121561226b57610e107f000000000000000000000000000000000000000000000000000000000000000063ffffffff168363ffffffff1662093a8061224b9190614d59565b6122559190614d59565b61225f9190614be4565b61226890614eb4565b90505b600481900b608084015261227f84846114f0565b86857fb3dfee8f5fa319b23a50d6c744d7bdab47db988bb6b44eb38eaec1a967023282856060015186608001518760e001516040516122de9392919063ffffffff938416815260049290920b6020830152909116604082015260600190565b60405180910390a350505050505050565b8161010001511561236757516000908152600960209081526040808320845173ffffffffffffffffffffffffffffffffffffffff16845282528083206102009094015164ffffffffff1683529290522080547fffff000000000000000000000000000000000000000000000000000000000000169055565b816101e001511561061e5780516000908152600960209081526040808320855173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020087015164ffffffffff16855290925290912061010083015181547fffffffffffffffffffffffff000000000000000000000000000000000000000016921691909117815560a08301516101408401516124039190614f86565b815461012085015161026086015161ffff167c0100000000000000000000000000000000000000000000000000000000027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff92831674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff95909316780100000000000000000000000000000000000000000000000002949094167fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9093169290921717919091161790555050565b638000000081811681149060009061250490846153d2565b9050915091565b6000808264ffffffffff16118015612552575061254f7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff8416614dfc565b42115b92915050565b60006125638261387d565b6125c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61255282600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0613899565b60006126108261010001518360000151846101400151613913565b61010083015173ffffffffffffffffffffffffffffffffffffffff166000908152600260205260408120549192509061264a908390614dfc565b6101008401805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600260209081526040918290208590559251905184815293945016917f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b019910160405180910390a2505050565b600081836126c95760006126cf565b63800000005b6126d99190614f86565b9392505050565b60006126eb8261387d565b612751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61275c826014613a38565b61276b9060ff166101906153f5565b61255290610fa0615416565b60008061278683826003613ad2565b612791906001615433565b91506127a08360026003613ad2565b612504906001615433565b60006127b68261387d565b61281c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b612827826024613a38565b6128369060ff1661014d6153f5565b6125529061138d615416565b60008183101561285257816126d9565b5090919050565b60008073ffffffffffffffffffffffffffffffffffffffff851661288257506000905080613340565b825173ffffffffffffffffffffffffffffffffffffffff86811691161480156128da57508360e0015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156128eb5750600190506000613340565b8360800151806129145750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b1561306e5760a084015173ffffffffffffffffffffffffffffffffffffffff16158061296f57508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff16145b806129935750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b15612abd5760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612a4157600080fd5b505afa158015612a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7991906154a7565b9150506001816bffffffffffffffffffffffff1660001480612ab35750846020015164ffffffffff16826bffffffffffffffffffffffff16115b9250925050613340565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415612e38578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612c395760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612bc657600080fd5b505afa158015612bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfe91906154a7565b9150506000816bffffffffffffffffffffffff1611846020015164ffffffffff16826bffffffffffffffffffffffff16119250925050613340565b60e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612ce257600080fd5b505afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a91906154a7565b855160208701516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201528a8316602482015264ffffffffff9091166044820152919350600092507f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612dc457600080fd5b505afa158015612dd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfc91906154a7565b9150506000816bffffffffffffffffffffffff1611856020015164ffffffffff16836bffffffffffffffffffffffff1611935093505050613340565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff1611156130695760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b158015612ef157600080fd5b505afa158015612f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2991906154dc565b5090506bffffffffffffffffffffffff8116156130675760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612fea57600080fd5b505afa158015612ffe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302291906154a7565b9150506001816bffffffffffffffffffffffff166000148061305c5750856020015164ffffffffff16826bffffffffffffffffffffffff16115b935093505050613340565b505b613340565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415613164578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612c395760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612baf565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff161180156131be57508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff1614155b156133405760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b15801561325957600080fd5b505afa15801561326d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329191906154dc565b5090506bffffffffffffffffffffffff811661333e5760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612fd3565b505b935093915050565b8160e0015115613398576127106109c4836040015163ffffffff1661336d9190614d59565b6133779190614be4565b826040015163ffffffff1661338c9190614d42565b63ffffffff1660408301525b6000826040015182606001516133ae9190614f86565b63ffffffff169050638000000081106133d9576133d060016380000000614eed565b63ffffffff1690505b63ffffffff81166060830152604082015161341f578160e0015163ffffffff16826060015163ffffffff16111561037c57606082015163ffffffff1660e0830152505050565b6000610e107f0000000000000000000000000000000000000000000000000000000000000000613453856101400151612558565b61ffff166134619190614d59565b6134919063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b61349b9190615508565b905060007f00000000000000000000000000000000000000000000000000000000000000001180156134d257508063ffffffff1682115b1561351f578260e0015163ffffffff168184606001516134f29190614eed565b63ffffffff16111561351a5780836060015161350e9190614eed565b63ffffffff1660e08401525b613527565b600060e08401525b50505050565b606082015163ffffffff1615801561354757508160400151155b156135565761037c8383613aef565b61020083015161356890610a8c61552b565b64ffffffffff16421015613873578060e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146136d95760e0810151835160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015264ffffffffff1660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b15801561365a57600080fd5b505afa15801561366e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369291906154a7565b9150506bffffffffffffffffffffffff8116158015906136cb5750836020015164ffffffffff16816bffffffffffffffffffffffff1611155b15156101e0850152506136e2565b60016101e08401525b826101e00151156138735781516000908152600960209081526040808320865173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020088015164ffffffffff1685528352928190208151608081018352905480851680835274010000000000000000000000000000000000000000820463ffffffff9081169584019590955278010000000000000000000000000000000000000000000000008204909416928201929092527c010000000000000000000000000000000000000000000000000000000090910461ffff1660608201526101008501519092161480156137dd5750602081015163ffffffff1615155b1561387157806020015184604001516137f69190614f86565b63ffffffff168160200151826060015161ffff166138149190614e14565b856040015186610260015161ffff1661382d9190614e14565b6138379190614f86565b63ffffffff166138479190614be4565b61ffff16610260850152602081015163ffffffff9081166102408601526040820151166102208501525b505b61037c8383613bd9565b600061388c8260346010613ad2565b60ff166001149050919050565b6000806138a68585613a38565b9050826138b482600261554b565b6138bf90600161556c565b60ff16602081106138d2576138d2615591565b1a836138df83600261554b565b60ff16602081106138f2576138f2615591565b61390091901a6101006153f5565b61390a9190615416565b95945050505050565b6000670de0b6b3a764000061392783613d96565b61ffff166139359190614d59565b9050828473ffffffffffffffffffffffffffffffffffffffff167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f7388360405161398091815260200190565b60405180910390a36000838152600760205260409020548015613a305773ffffffffffffffffffffffffffffffffffffffff85166000818152600860209081526040808320858452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558783526007909152808220829055518392879290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b509392505050565b600080613a4784846040613ad2565b90506000613a566002836155c0565b90506000613a656002846155e2565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff841660208110613a9e57613a9e615591565b1a905060ff8216613abc5760048160ff16901c945050505050612552565b613ac76010826155e2565b945050505050612552565b6000613ae760ff80841690851686901c615604565b949350505050565b6000613afe83606001516126e0565b90506000613b10836101400151613e6d565b90506000613b22846101400151613ee9565b9050600080613b49876040015163ffffffff168461ffff168761ffff168761ffff16613f80565b63ffffffff8083166101208b01529193509150811661ffff8416148015613b7f57508163ffffffff16876040015163ffffffff16115b15613bd057818760400151613b949190614eed565b63ffffffff908116606088015281166101408801526001610100880152865173ffffffffffffffffffffffffffffffffffffffff166101208701525b50505050505050565b613be38282614121565b6000826101a001518361016001518461022001518460600151613c069190614f86565b613c109190614f86565b613c1a9190614f86565b63ffffffff1690506000613c32836101400151612558565b905081158015613c4c57506000846040015163ffffffff16115b15613d8057835173ffffffffffffffffffffffffffffffffffffffff1661012084015260408085015163ffffffff166060850152830151613c9c57606083015163ffffffff1660e0840152613d73565b7f000000000000000000000000000000000000000000000000000000000000000015613d73576000610e10613cf57f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b613cff9190614be4565b613d2f9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b90508063ffffffff16846060015163ffffffff161115613d6957808460600151613d599190614eed565b63ffffffff1660e0850152613d71565b600060e08501525b505b6001610100850152613527565b613d8b848484614296565b613527848483614849565b6000613da18261387d565b613e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b6000613e1483600c613a38565b905060ff81167e060008000a000c000e00100012001400140016001800200028003000380048613e458260026153f5565b613e50906001615416565b61ffff1660208110613e6457613e64615591565b1a949350505050565b6000613e788261387d565b613ede576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61275c82601c613a38565b6000613ef48261387d565b613f5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b613f6582602c613a38565b613f749060ff16610bb86153f5565b61255290613a98615416565b600080851580613f8e575084155b15613f9e57506000905080614118565b600085613fcb887f0000000000000000000000000000000000000000000000000000000000000000614d59565b613fd59190614be4565b6140027f0000000000000000000000000000000000000000000000000000000000000000620f4240614d42565b61400c9190614dfc565b6140169088614d59565b90506000620f4240856140298885614d59565b6140339190614be4565b61403d9190614be4565b90508087111561405257879350809250614115565b60008861407f897f0000000000000000000000000000000000000000000000000000000000000000614d59565b6140899190614be4565b6140b67f0000000000000000000000000000000000000000000000000000000000000000620f4240614d42565b6140c09190614dfc565b6140ca9089614d59565b90506000620f4240886140dd8985614d59565b6140e79190614be4565b6140f19190614be4565b63ffffffff16905089811061410e5761410b60018b614d42565b90505b9450879350505b50505b94509492505050565b600061414e60027f0000000000000000000000000000000000000000000000000000000000000000614be4565b6141589042614be4565b825160009081526004602052604081209192509081614178600185614d42565b815260208101919091526040016000208054909150638000000063ffffffff909116116141ac57805463ffffffff166141b2565b637fffffff5b63ffffffff90811661016086015281546380000000640100000000909104909116116141ed578054640100000000900463ffffffff166141f3565b637fffffff5b63ffffffff90811661018086015283516000908152600460209081526040808320868452909152902080549091638000000091161161423957805463ffffffff1661423f565b637fffffff5b63ffffffff9081166101a0870152815463800000006401000000009091049091161161427a578054640100000000900463ffffffff16614280565b637fffffff5b63ffffffff166101c09095019490945250505050565b6102608301516101408301516000906142ae90613e6d565b90506000806142e187610240015188604001516142cb9190614f86565b63ffffffff16868661ffff168661ffff16613f80565b63ffffffff8082166101408b01528083166101208b015260408a0151929450909250161580159061431c57508487610140015163ffffffff16145b156144fc5786610220015163ffffffff16866060015163ffffffff16866143439190614d42565b61434d9190614d42565b63ffffffff1660a0880181905261014088015161436a9190614eed565b63ffffffff166101408801526102408701516040880151839161438c91614f86565b6143969190614eed565b63ffffffff1660608701526001610100880152865173ffffffffffffffffffffffffffffffffffffffff1661012087015260408601516143e557606086015163ffffffff1660e0870152613bd0565b7f0000000000000000000000000000000000000000000000000000000000000000156144f757600061441b876101400151612558565b90506000610e106144507f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b61445a9190614be4565b61448a9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b90508063ffffffff16886060015163ffffffff1611156144ec578760e0015163ffffffff168189606001516144bf9190614eed565b63ffffffff1611156144e7578088606001516144db9190614eed565b63ffffffff1660e08901525b6144f4565b600060e08901525b50505b613bd0565b86610240015187604001516145119190614f86565b63ffffffff1687610120015163ffffffff16141561484157866102200151866060015161453e9190614f86565b63ffffffff168163ffffffff1611156146a55761022087015160608701516145669083614eed565b6145709190614eed565b63ffffffff90811660a0890190815260006060890152516101608901519082169116106145dc578660a0015187610160018181516145ae9190614eed565b63ffffffff1690525060a0870151610180880180516145ce908390614f86565b63ffffffff169052506146d1565b86610160015187610180018181516145f49190614f86565b63ffffffff1690525061016087015160a088015160009161461491614eed565b90508063ffffffff16886101a0015163ffffffff161061466d5780886101a0018181516146419190614eed565b63ffffffff169052506101c08801805182919061465f908390614f86565b63ffffffff16905250614697565b876101a00151886101c0018181516146859190614f86565b63ffffffff1690525060006101a08901525b5060006101608801526146d1565b8087610220015187606001516146bb9190614f86565b6146c59190614eed565b63ffffffff1660608701525b8660a001518761014001516146e69190614eed565b63ffffffff16610140880152604086015161473f578560e0015163ffffffff168163ffffffff16111561471f57600060e0870152613bd0565b808660e0018181516147319190614eed565b63ffffffff16905250613bd0565b7f0000000000000000000000000000000000000000000000000000000000000000156144f7576000614775876101400151612558565b90506000610e106147aa7f000000000000000000000000000000000000000000000000000000000000000061ffff8516614d59565b6147b49190614be4565b6147e49063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614dfc565b90508063ffffffff16886060015163ffffffff1611156144ec578760e0015163ffffffff168363ffffffff161161483557828860e0018181516148279190614eed565b63ffffffff169052506144f4565b600060e08901526144f4565b613bd0615618565b60008361012001518460a001518561014001516148669190614f86565b6148709190614f86565b63ffffffff169050600081846080015160040b61488d9190614e40565b9050610e1063ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166148ca61ffff861662093a80614d59565b6148d49190614d59565b6148de9190614be4565b6148e790614eb4565b81121561494957610e1063ffffffff7f00000000000000000000000000000000000000000000000000000000000000001661492961ffff861662093a80614d59565b6149339190614d59565b61493d9190614be4565b61494690614eb4565b90505b60040b608090930192909252505050565b803563ffffffff8116811461496e57600080fd5b919050565b60008060006060848603121561498857600080fd5b833592506149986020850161495a565b9150604084013590509250925092565b600060a082840312156149ba57600080fd5b50919050565b600080604083850312156149d357600080fd5b50508035926020909101359150565b6000808284036101408112156149f757600080fd5b833592506101207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215614a2c57600080fd5b506020830190509250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114614a5c57600080fd5b50565b803561496e81614a3a565b600060208284031215614a7c57600080fd5b81356126d981614a3a565b604051610120810167ffffffffffffffff81118282101715614ad2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b600060a08284031215614aea57600080fd5b60405160a0810181811067ffffffffffffffff82111715614b34577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528235614b4281614a3a565b81526020830135614b5281614a3a565b602082015260408381013590820152614b6d6060840161495a565b6060820152608083013560808201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082614bf357614bf3614b86565b500490565b8035801515811461496e57600080fd5b600060208284031215614c1a57600080fd5b6126d982614bf8565b60006101208284031215614c3657600080fd5b614c3e614a87565b82358152602083013560208201526040830135604082015260608301356060820152614c6c60808401614bf8565b6080820152614c7d60a08401614a5f565b60a082015260c083013560c0820152614c9860e08401614a5f565b60e0820152610100614cab818501614a5f565b908201529392505050565b8c81528b1515602082015263ffffffff8b811660408301528a81166060830152898116608083015288811660a083015287151560c0830152861660e08201526101808101614d0a61010083018760040b9052565b63ffffffff851661012083015263ffffffff841661014083015263ffffffff83166101608301529d9c50505050505050505050505050565b600082821015614d5457614d54614bb5565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d9157614d91614bb5565b500290565b60008160040b8360040b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000001831281151615614dd957614dd9614bb5565b81647fffffffff018313811615614df257614df2614bb5565b5090039392505050565b60008219821115614e0f57614e0f614bb5565b500190565b600063ffffffff80831681851681830481118215151615614e3757614e37614bb5565b02949350505050565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615614e7a57614e7a614bb5565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615614eae57614eae614bb5565b50500390565b60007f8000000000000000000000000000000000000000000000000000000000000000821415614ee657614ee6614bb5565b5060000390565b600063ffffffff83811690831681811015614f0a57614f0a614bb5565b039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614f4c57614f4c614bb5565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615614f8057614f80614bb5565b50500190565b600063ffffffff808316818516808303821115614fa557614fa5614bb5565b01949350505050565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff600082136000841383830485118282161615614fe757614fe7614bb5565b7fffffffffffffffffffffffffffffffff80000000000000000000000000000000600085128682058612818416161561502257615022614bb5565b6000871292508582058712848416161561503e5761503e614bb5565b8585058712818416161561505457615054614bb5565b5050509290910295945050505050565b600081600f0b83600f0b60008212826f7fffffffffffffffffffffffffffffff0382138115161561509757615097614bb5565b827fffffffffffffffffffffffffffffffff800000000000000000000000000000000382128116156150cb576150cb614bb5565b50019392505050565b600081600f0b83600f0b60008112817fffffffffffffffffffffffffffffffff800000000000000000000000000000000183128115161561511757615117614bb5565b816f7fffffffffffffffffffffffffffffff018313811615614df257614df2614bb5565b600181815b8085111561519457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561517a5761517a614bb5565b8085161561518757918102915b93841c9390800290615140565b509250929050565b80825b60018086116151ae5750613340565b816f7fffffffffffffffffffffffffffffff048211156151d0576151d0614bb5565b808616156151dd57918102915b9490941c93800261519f565b60008280156151ff576001811461520957615212565b6001915050612552565b82915050612552565b508161522057506000612552565b5060016000821380821461523957801561526057615282565b826f7fffffffffffffffffffffffffffffff0483111561525b5761525b614bb5565b615282565b826f7fffffffffffffffffffffffffffffff0583121561528257615282614bb5565b508083161561528e5750805b61529e8360011c8384028361519c565b806f7fffffffffffffffffffffffffffffff0482116000831316156152c5576152c5614bb5565b807fffffffffffffffffffffffffffffffff800000000000000000000000000000000582126000831216156152fc576152fc614bb5565b029392505050565b60006126d960ff841683600f0b6151e9565b60008261532557506001612552565b8161533257506000612552565b81600181146151ff576002811461534857615364565b60ff84111561535957615359614bb5565b50506001821b612552565b5060208310610133831016604e8410600b8410161715615387575081810a612552565b615391838361513b565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156152fc576152fc614bb5565b60006126d960ff841683615316565b600063ffffffff808416806153e9576153e9614b86565b92169190910692915050565b600061ffff80831681851681830481118215151615614e3757614e37614bb5565b600061ffff808316818516808303821115614fa557614fa5614bb5565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800183128115161561547657615476614bb5565b81607f018313811615614df257614df2614bb5565b80516bffffffffffffffffffffffff8116811461496e57600080fd5b600080604083850312156154ba57600080fd5b82516154c581614a3a565b91506154d36020840161548b565b90509250929050565b600080604083850312156154ef57600080fd5b6154f88361548b565b9150602083015190509250929050565b600063ffffffff8084168061551f5761551f614b86565b92169190910492915050565b600064ffffffffff808316818516808303821115614fa557614fa5614bb5565b600060ff821660ff84168160ff04811182151516156152fc576152fc614bb5565b600060ff821660ff84168060ff0382111561558957615589614bb5565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff8316806155d3576155d3614b86565b8060ff84160491505092915050565b600060ff8316806155f5576155f5614b86565b8060ff84160691505092915050565b60008261561357615613614b86565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea2646970667358221220c4ca06ee136668b79b1ac85b9cc2635cfd1c435135fb56d31c101717ec0cd89b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16595,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_planets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Planet)22896_storage)"
      },
      {
        "astId": 16600,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_fleets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Fleet)22903_storage)"
      },
      {
        "astId": 16604,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_stakeReadyToBeWithdrawn",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16610,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 16617,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_inFlight",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)22872_storage))"
      },
      {
        "astId": 16620,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_discovered",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Discovered)22881_storage"
      },
      {
        "astId": 16624,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_prevRewardIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16628,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16634,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_rewardsToWithdraw",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 16643,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_attacks",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)22976_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int40": {
        "encoding": "inplace",
        "label": "int40",
        "numberOfBytes": "5"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)22976_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AccumulatedAttack)22976_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)22976_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)22976_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)22872_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ImportingOuterSpaceTypes.InFlight))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InFlight)22872_storage)"
      },
      "t_mapping(t_uint256,t_struct(AccumulatedAttack)22976_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack)",
        "numberOfBytes": "32",
        "value": "t_struct(AccumulatedAttack)22976_storage"
      },
      "t_mapping(t_uint256,t_struct(Fleet)22903_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.Fleet)",
        "numberOfBytes": "32",
        "value": "t_struct(Fleet)22903_storage"
      },
      "t_mapping(t_uint256,t_struct(InFlight)22872_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.InFlight)",
        "numberOfBytes": "32",
        "value": "t_struct(InFlight)22872_storage"
      },
      "t_mapping(t_uint256,t_struct(Planet)22896_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)22896_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AccumulatedAttack)22976_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.AccumulatedAttack",
        "members": [
          {
            "astId": 22969,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "target",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 22971,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "numAttackSpent",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22973,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "damageCausedSoFar",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22975,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "averageAttackPower",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Discovered)22881_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Discovered",
        "members": [
          {
            "astId": 22874,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "minX",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22876,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "maxX",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22878,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "minY",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22880,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "maxY",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fleet)22903_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Fleet",
        "members": [
          {
            "astId": 22898,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 22900,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "launchTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 22902,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "quantity",
            "offset": 25,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(InFlight)22872_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.InFlight",
        "members": [
          {
            "astId": 22869,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "flying",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 22871,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "destroyed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Planet)22896_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Planet",
        "members": [
          {
            "astId": 22883,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 22885,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "ownershipStartTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 22887,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "exitStartTime",
            "offset": 25,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 22889,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "numSpaceships",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 22891,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "lastUpdated",
            "offset": 4,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 22893,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "travelingUpkeep",
            "offset": 9,
            "slot": "1",
            "type": "t_int40"
          },
          {
            "astId": 22895,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "overflow",
            "offset": 14,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}