{
  "address": "0x303844A337D0dE9db8DFFDc6b912533FE9Aef794",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "contract AllianceRegistry",
              "name": "allianceRegistry",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "genesis",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "resolveWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timePerDistance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "acquireNumSpaceships",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "productionSpeedUp",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "frontrunningDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productionCapAsDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upkeepProductionDecreaseRatePer10000th",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fleetSizeFactor6",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "expansionDelta",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "giftTaxPer10000",
              "type": "uint256"
            }
          ],
          "internalType": "struct OuterSpaceFacetBase.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "ExitComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destinationOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destination",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "gift",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "won",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "newNumspaceships",
              "type": "uint32"
            },
            {
              "internalType": "int40",
              "name": "newTravelingUpkeep",
              "type": "int40"
            },
            {
              "internalType": "uint32",
              "name": "newOverflow",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numSpaceshipsAtArrival",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "taxLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fleetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "planetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "inFlightFleetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "inFlightPlanetLoss",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "accumulatedDefenseAdded",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "accumulatedAttackAdded",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct ImportingOuterSpaceEvents.ArrivalData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "FleetArrived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetSender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fleetOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "FleetSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "genesis",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolveWindow",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timePerDistance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "acquireNumSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "productionSpeedUp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "frontrunningDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productionCapAsDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upkeepProductionDecreaseRatePer10000th",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fleetSizeFactor6",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "initialSpaceExpansion",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "expansionDelta",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "giftTaxPer10000",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "PlanetReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acquirer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numSpaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "travelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "overflow",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "PlanetStake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "PlanetTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "giver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "RewardToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStake",
          "type": "uint256"
        }
      ],
      "name": "StakeToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "location",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "origin",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fleet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newNumspaceships",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int40",
          "name": "newTravelingUpkeep",
          "type": "int40"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOverflow",
          "type": "uint32"
        }
      ],
      "name": "TravelingUpkeepReductionFromDestruction",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "getFleet",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "launchTime",
          "type": "uint40"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "flyingAtLaunch",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "destroyedAtLaunch",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fleetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "arrivalTimeWanted",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "gift",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "specific",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "secret",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "fleetSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "internalType": "struct ImportingOuterSpaceTypes.FleetResolution",
          "name": "resolution",
          "type": "tuple"
        }
      ],
      "name": "resolveFleet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "quantity",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "toHash",
          "type": "bytes32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "fleetSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fleetOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "quantity",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "toHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ImportingOuterSpaceTypes.FleetLaunch",
          "name": "launch",
          "type": "tuple"
        }
      ],
      "name": "sendFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb1018413a298f98092b9bbf0a5c026d272fb77f5e42b4e334cfff92938619af1",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xbE19B59E8C588d68f475A407C7BA5fE813AEb792",
    "contractAddress": null,
    "transactionIndex": 12,
    "gasUsed": "4783215",
    "logsBloom": "0x
    "blockHash": "0x526b417180dcd868ba1fc63e3a8edde567f91c62324a3e288d3c0420ae7b3585",
    "transactionHash": "0xb1018413a298f98092b9bbf0a5c026d272fb77f5e42b4e334cfff92938619af1",
    "logs": [],
    "blockNumber": 21170380,
    "cumulativeGasUsed": "7223491",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "stakingToken": "0xb3388543ebD3e1Ba44835259a2D146F0022F4E80",
      "allianceRegistry": "0xe33441c9C6A913176a7573Df744cb34A8f39043e",
      "genesis": "0xee563ebbe85edccc120c5082a5066539b0e9b7958b5fbac114523a95a8162672",
      "resolveWindow": 1728,
      "timePerDistance": 72,
      "exitDuration": 2592,
      "acquireNumSpaceships": 100000,
      "productionSpeedUp": 100,
      "frontrunningDelay": 18,
      "productionCapAsDuration": 259200,
      "upkeepProductionDecreaseRatePer10000th": 5000,
      "fleetSizeFactor6": 500000,
      "initialSpaceExpansion": 12,
      "expansionDelta": 4,
      "giftTaxPer10000": 2000
    }
  ],
  "numDeployments": 1,
  "linkedData": {
    "genesisHash": "0xee563ebbe85edccc120c5082a5066539b0e9b7958b5fbac114523a95a8162672",
    "resolveWindow": 1728,
    "timePerDistance": 72,
    "exitDuration": 2592,
    "acquireNumSpaceships": 100000,
    "productionSpeedUp": 100,
    "chainGenesisHash": "",
    "frontrunningDelay": 18,
    "productionCapAsDuration": 259200,
    "upkeepProductionDecreaseRatePer10000th": 5000,
    "fleetSizeFactor6": 500000,
    "initialSpaceExpansion": 12,
    "expansionDelta": 4,
    "giftTaxPer10000": 2000
  },
  "solcInputHash": "1e3f71d1fdaa014c84f37911f255e75e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract AllianceRegistry\",\"name\":\"allianceRegistry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"resolveWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePerDistance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"acquireNumSpaceships\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"productionSpeedUp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"frontrunningDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productionCapAsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upkeepProductionDecreaseRatePer10000th\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fleetSizeFactor6\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"expansionDelta\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"giftTaxPer10000\",\"type\":\"uint256\"}],\"internalType\":\"struct OuterSpaceFacetBase.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"ExitComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destination\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numSpaceshipsAtArrival\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"taxLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fleetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"planetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"inFlightFleetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"inFlightPlanetLoss\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"accumulatedDefenseAdded\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"accumulatedAttackAdded\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct ImportingOuterSpaceEvents.ArrivalData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"FleetArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"FleetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"genesis\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolveWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timePerDistance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"acquireNumSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"productionSpeedUp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frontrunningDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productionCapAsDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upkeepProductionDecreaseRatePer10000th\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fleetSizeFactor6\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"initialSpaceExpansion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"expansionDelta\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"giftTaxPer10000\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"PlanetReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acquirer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numSpaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"travelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"overflow\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"PlanetStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"PlanetTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"giver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"RewardToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"StakeToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"location\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fleet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newNumspaceships\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"newTravelingUpkeep\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOverflow\",\"type\":\"uint32\"}],\"name\":\"TravelingUpkeepReductionFromDestruction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"getFleet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"launchTime\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"flyingAtLaunch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"destroyedAtLaunch\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fleetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrivalTimeWanted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gift\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"specific\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct ImportingOuterSpaceTypes.FleetResolution\",\"name\":\"resolution\",\"type\":\"tuple\"}],\"name\":\"resolveFleet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"fleetSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fleetOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"quantity\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"toHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ImportingOuterSpaceTypes.FleetLaunch\",\"name\":\"launch\",\"type\":\"tuple\"}],\"name\":\"sendFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/outerspace/facets/OuterSpaceFleetsFacet.sol\":\"OuterSpaceFleetsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/alliances/AllianceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"../interfaces/IAlliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract AllianceRegistry is Proxied {\\n    using ECDSA for bytes32;\\n\\n    uint8 internal constant MAX_NUM_ALLIANCES = 4;\\n\\n    mapping(address => mapping(IAlliance => uint256)) internal _allianceNonces;\\n    struct AllianceRow {\\n        IAlliance alliance;\\n        uint96 joinTime;\\n    }\\n    struct Alliances {\\n        AllianceRow alliance0;\\n        AllianceRow alliance1;\\n        AllianceRow alliance2;\\n        AllianceRow alliance3;\\n    }\\n    mapping(address => Alliances) internal _alliances;\\n\\n    event AllianceLink(IAlliance indexed alliance, address indexed player, bool joining);\\n\\n    function getAllianceDataAtSlot(address player, uint8 slot)\\n        external\\n        view\\n        returns (\\n            IAlliance alliance,\\n            uint96 joinTime,\\n            uint256 nonce\\n        )\\n    {\\n        Alliances storage alliances = _alliances[player];\\n        if (slot == 0) {\\n            alliance = alliances.alliance0.alliance;\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (slot == 1) {\\n            alliance = alliances.alliance1.alliance;\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (slot == 2) {\\n            alliance = alliances.alliance2.alliance;\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (slot == 3) {\\n            alliance = alliances.alliance3.alliance;\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n\\n        nonce = _allianceNonces[player][alliance];\\n    }\\n\\n    function getAllianceData(address player, IAlliance alliance) public view returns (uint96 joinTime, uint256 nonce) {\\n        nonce = _allianceNonces[player][alliance];\\n\\n        Alliances storage alliances = _alliances[player];\\n        if (alliances.alliance0.alliance == alliance) {\\n            joinTime = alliances.alliance0.joinTime;\\n        } else if (alliances.alliance1.alliance == alliance) {\\n            joinTime = alliances.alliance1.joinTime;\\n        } else if (alliances.alliance2.alliance == alliance) {\\n            joinTime = alliances.alliance2.joinTime;\\n        } else if (alliances.alliance3.alliance == alliance) {\\n            joinTime = alliances.alliance3.joinTime;\\n        }\\n    }\\n\\n    function havePlayersAnAllianceInCommon(\\n        address player1,\\n        address player2,\\n        uint256 timestamp\\n    ) external view returns (IAlliance alliance, uint96 joinTime) {\\n        Alliances storage p1Alliances = _alliances[player1];\\n        Alliances storage p2Alliances = _alliances[player2];\\n\\n        AllianceRow[4] memory player1Alliances;\\n        AllianceRow[4] memory player2Alliances;\\n        uint256 num1 = 0;\\n        uint256 num2 = 0;\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (i == num1) {\\n                AllianceRow memory allianceRow;\\n                if (i == 0) {\\n                    allianceRow = p1Alliances.alliance0;\\n                } else if (i == 1) {\\n                    allianceRow = p1Alliances.alliance1;\\n                } else if (i == 2) {\\n                    allianceRow = p1Alliances.alliance2;\\n                } else if (i == 3) {\\n                    allianceRow = p1Alliances.alliance3;\\n                }\\n                if (address(allianceRow.alliance) == address(0)) {\\n                    // console.log(\\\"p1 exhausted\\\");\\n                    return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                }\\n                player1Alliances[num1++] = allianceRow;\\n            }\\n            for (uint256 j = 0; j < 4; j++) {\\n                if (j == num2) {\\n                    AllianceRow memory allianceRow;\\n                    if (j == 0) {\\n                        allianceRow = p2Alliances.alliance0;\\n                    } else if (j == 1) {\\n                        allianceRow = p2Alliances.alliance1;\\n                    } else if (j == 2) {\\n                        allianceRow = p2Alliances.alliance2;\\n                    } else if (j == 3) {\\n                        allianceRow = p2Alliances.alliance3;\\n                    }\\n                    if (address(allianceRow.alliance) == address(0)) {\\n                        // console.log(\\\"p2 exhausted\\\");\\n                        // return (alliance, joinTime); // the alliance leave ensure that there is no gap // TODO\\n                        break;\\n                    }\\n                    player2Alliances[num2++] = allianceRow;\\n                }\\n\\n                if (player1Alliances[i].alliance == player2Alliances[j].alliance) {\\n                    if (player1Alliances[i].joinTime >= player2Alliances[j].joinTime) {\\n                        if (player1Alliances[i].joinTime < timestamp) {\\n                            return (player1Alliances[i].alliance, player1Alliances[i].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player1Alliances[i].alliance;\\n                            joinTime = player1Alliances[i].joinTime;\\n                        }\\n                    } else {\\n                        if (player2Alliances[j].joinTime < timestamp) {\\n                            return (player2Alliances[j].alliance, player2Alliances[j].joinTime);\\n                        } else {\\n                            // TODO check greater ?\\n                            alliance = player2Alliances[j].alliance;\\n                            joinTime = player2Alliances[j].joinTime;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        // console.log(address(alliance));\\n        // console.log(joinTime);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM PLAYER\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function joinAlliance(IAlliance alliance, bytes calldata data) external returns (bool joined) {\\n        Alliances storage alliances = _alliances[msg.sender];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            slot++;\\n        }\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        joined = alliance.requestToJoin(msg.sender, data);\\n        if (joined) {\\n            if (slot == 0) {\\n                alliances.alliance0.alliance = alliance;\\n                alliances.alliance0.joinTime = uint96(block.timestamp);\\n            } else if (slot == 1) {\\n                alliances.alliance1.alliance = alliance;\\n                alliances.alliance1.joinTime = uint96(block.timestamp);\\n            } else if (slot == 2) {\\n                alliances.alliance2.alliance = alliance;\\n                alliances.alliance2.joinTime = uint96(block.timestamp);\\n            } else if (slot == 3) {\\n                alliances.alliance3.alliance = alliance;\\n                alliances.alliance3.joinTime = uint96(block.timestamp);\\n            }\\n\\n            emit AllianceLink(alliance, msg.sender, true);\\n        }\\n    }\\n\\n    function leaveAlliance(IAlliance alliance) external {\\n        _leaveAlliance(msg.sender, alliance);\\n        try alliance.playerHasLeft(msg.sender) {} catch {}\\n        // TODO ensure callback not failed due to low gas (1/64 rule)\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // FROM ALLIANCE\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) external {\\n        _addPlayerToAlliance(player, nonce, signature);\\n    }\\n\\n    struct PlayerSubmission {\\n        address addr;\\n        uint32 nonce;\\n        bytes signature;\\n    }\\n\\n    function addMultiplePlayersToAlliance(PlayerSubmission[] calldata playerSubmissions) external {\\n        for (uint256 i = 0; i < playerSubmissions.length; i++) {\\n            _addPlayerToAlliance(playerSubmissions[i].addr, playerSubmissions[i].nonce, playerSubmissions[i].signature);\\n        }\\n    }\\n\\n    function ejectPlayerFromAlliance(address player) external {\\n        _leaveAlliance(player, IAlliance(msg.sender));\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------\\n    // INTERNAL\\n    // -----------------------------------------------------------------------------------------------------\\n\\n    function _addPlayerToAlliance(\\n        address player,\\n        uint32 nonce,\\n        bytes calldata signature\\n    ) internal {\\n        IAlliance alliance = IAlliance(msg.sender);\\n\\n        Alliances storage alliances = _alliances[player];\\n        uint256 slot = 0;\\n        if (address(alliances.alliance0.alliance) != address(0)) {\\n            require(alliances.alliance0.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance1.alliance) != address(0)) {\\n            require(alliances.alliance1.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        if (address(alliances.alliance2.alliance) != address(0)) {\\n            require(alliances.alliance2.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n            slot++;\\n        }\\n        require(alliances.alliance3.alliance != alliance, \\\"ALREADY_JOINED\\\");\\n        require(address(alliances.alliance3.alliance) == address(0), \\\"MAX_NUM_ALLIANCES_REACHED\\\");\\n\\n        uint256 currentNonce = _allianceNonces[player][alliance];\\n        require(currentNonce == nonce, \\\"INVALID_NONCE\\\");\\n\\n        bytes memory message;\\n        if (nonce == 0) {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n56\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n        } else {\\n            message = abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n76\\\",\\n                \\\"Join Alliance 0x0000000000000000000000000000000000000000 (nonce:          0)\\\"\\n            );\\n            _writeUintAsHex(message, 28 + 55, uint160(msg.sender));\\n            _writeUintAsDecimal(message, 28 + 74, nonce);\\n        }\\n\\n        // console.log(string(message));\\n\\n        bytes32 digest = keccak256(message);\\n\\n        address signer = digest.recover(signature);\\n        require(player == signer, \\\"INVALID_SIGNATURE\\\");\\n\\n        if (slot == 0) {\\n            alliances.alliance0.alliance = alliance;\\n            alliances.alliance0.joinTime = uint96(block.timestamp);\\n        } else if (slot == 1) {\\n            alliances.alliance1.alliance = alliance;\\n            alliances.alliance1.joinTime = uint96(block.timestamp);\\n        } else if (slot == 2) {\\n            alliances.alliance2.alliance = alliance;\\n            alliances.alliance2.joinTime = uint96(block.timestamp);\\n        } else if (slot == 3) {\\n            alliances.alliance3.alliance = alliance;\\n            alliances.alliance3.joinTime = uint96(block.timestamp);\\n        }\\n        _allianceNonces[player][alliance] = nonce + 1;\\n\\n        emit AllianceLink(alliance, player, true);\\n\\n        _checkERC1155AndCallSafeTransfer(msg.sender, address(0), player, uint256(uint160(address(alliance))), 1);\\n        emit TransferSingle(msg.sender, address(0), player, uint256(uint160(address(alliance))), 1);\\n    }\\n\\n    bytes internal constant hexAlphabet = \\\"0123456789abcdef\\\";\\n    bytes internal constant decimalAlphabet = \\\"0123456789\\\";\\n\\n    function _writeUintAsHex(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(hexAlphabet[num % 16]);\\n            num /= 16;\\n        }\\n    }\\n\\n    function _writeUintAsDecimal(\\n        bytes memory data,\\n        uint256 endPos,\\n        uint256 num\\n    ) internal pure {\\n        while (num != 0) {\\n            data[endPos--] = bytes1(decimalAlphabet[num % 10]);\\n            num /= 10;\\n        }\\n    }\\n\\n    function _leaveAlliance(address player, IAlliance alliance) internal {\\n        Alliances storage alliances = _alliances[msg.sender];\\n\\n        IAlliance lastSlotAlliance;\\n        uint96 lastSlotJoinTime;\\n\\n        require(address(alliances.alliance0.alliance) != address(0), \\\"NOT_PART_OF_ANY_ALLIANCE\\\");\\n\\n        if (address(alliances.alliance1.alliance) == address(0)) {\\n            lastSlotAlliance = alliances.alliance0.alliance;\\n            lastSlotJoinTime = alliances.alliance0.joinTime;\\n            alliances.alliance0.alliance = IAlliance(address(0));\\n            alliances.alliance0.joinTime = 0;\\n        } else {\\n            if (address(alliances.alliance2.alliance) == address(0)) {\\n                lastSlotAlliance = alliances.alliance1.alliance;\\n                lastSlotJoinTime = alliances.alliance1.joinTime;\\n                alliances.alliance1.alliance = IAlliance(address(0));\\n                alliances.alliance1.joinTime = 0;\\n            } else {\\n                if (address(alliances.alliance3.alliance) == address(0)) {\\n                    lastSlotAlliance = alliances.alliance2.alliance;\\n                    lastSlotJoinTime = alliances.alliance2.joinTime;\\n                    alliances.alliance2.alliance = IAlliance(address(0));\\n                    alliances.alliance2.joinTime = 0;\\n                } else {\\n                    lastSlotAlliance = alliances.alliance3.alliance;\\n                    lastSlotJoinTime = alliances.alliance3.joinTime;\\n                    alliances.alliance3.alliance = IAlliance(address(0));\\n                    alliances.alliance3.joinTime = 0;\\n                }\\n            }\\n        }\\n\\n        if (alliance != lastSlotAlliance) {\\n            if (alliances.alliance0.alliance == alliance) {\\n                alliances.alliance0.alliance = lastSlotAlliance;\\n                alliances.alliance0.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance1.alliance == alliance) {\\n                alliances.alliance1.alliance = lastSlotAlliance;\\n                alliances.alliance1.joinTime = lastSlotJoinTime;\\n            } else if (alliances.alliance2.alliance == alliance) {\\n                alliances.alliance2.alliance = lastSlotAlliance;\\n                alliances.alliance2.joinTime = lastSlotJoinTime;\\n            } else {\\n                revert(\\\"NOT_PART_OF_THE_ALLIANCE\\\");\\n            }\\n        }\\n\\n        emit AllianceLink(alliance, player, false);\\n        emit TransferSingle(msg.sender, player, address(0), uint256(uint160(address(alliance))), 1);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n\\n    // ---------------------------------------------------------------------\\n    // Support For ERC-1155\\n    // ---------------------------------------------------------------------\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance) {\\n        require(id == uint160(id), \\\"INVALID_ID\\\");\\n        (uint96 joinTime, ) = getAllianceData(owner, IAlliance(address(uint160(id))));\\n        if (joinTime > 0) {\\n            return 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory balances)\\n    {\\n        balances = new uint256[](owners.length);\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            require(ids[i] == uint160(ids[i]), \\\"INVALID_ID\\\");\\n            (uint96 joinTime, ) = getAllianceData(owners[i], IAlliance(address(uint160(ids[i]))));\\n            if (joinTime > 0) {\\n                balances[i] = 1;\\n            } else {\\n                balances[i] = 0;\\n            }\\n        }\\n    }\\n\\n    function isApprovedForAll(address, address) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\\n        return interfaceID == 0xd9b67a26 || interfaceID == 0x01ffc9a7;\\n    }\\n\\n    function _checkERC1155AndCallSafeTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value\\n    ) internal returns (bool) {\\n        if (!Address.isContract(to)) {\\n            return true;\\n        }\\n\\n        return ERC1155TokenReceiver(to).onERC1155Received(operator, from, id, value, \\\"\\\") == 0xf23a6e61;\\n    }\\n}\\n\\ninterface ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xec19574b64bf1627a9d136cf98d2b9c23521d8dc2ea1aa1265b63635222f0253\",\"license\":\"AGPL-3.0\"},\"src/interfaces/IAlliance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\ninterface IAlliance {\\n    function requestToJoin(address player, bytes calldata data) external returns (bool);\\n\\n    function playerHasLeft(address player) external;\\n}\\n\",\"keccak256\":\"0x56331cf35f0c52161d22a1094809e4e55b6be6dff3f7c18a3070b325e1afced8\",\"license\":\"AGPL-3.0\"},\"src/libraries/Extraction.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\n// TODO remove\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary Extraction {\\n    function value(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 size\\n    ) internal pure returns (uint256) {\\n        return uint256((data >> leastSignificantBit)) % 2**size;\\n    }\\n\\n    function value8Mod(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        uint8 mod\\n    ) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % mod);\\n    }\\n\\n    function value8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        return uint8(uint256((data >> leastSignificantBit)) % 2**8);\\n    }\\n\\n    // 1+1+2+3+4+6+7+8+8+7+6+4+3+2+1+1 // aproximation of normal distribution with mean=7.5 and standard deviation=3 for 16 values\\n    bytes32 constant n_m7_5_sd3 = 0x01223334444555555666666677777777888888889999999AAAAAABBBBCCCDDEF;\\n\\n    function normal8(bytes32 data, uint8 leastSignificantBit) internal pure returns (uint8) {\\n        uint8 index = value8Mod(data, leastSignificantBit, 64);\\n        uint8 first = index / 2;\\n        uint8 second = index % 2;\\n        uint8 slot = uint8(n_m7_5_sd3[first]);\\n        if (second == 0) {\\n            return slot >> 4;\\n        } else {\\n            return slot % 16;\\n        }\\n    }\\n\\n    function normal16(\\n        bytes32 data,\\n        uint8 leastSignificantBit,\\n        bytes32 selection\\n    ) internal pure returns (uint16) {\\n        uint8 index = normal8(data, leastSignificantBit);\\n        return uint16(uint8(selection[index * 2])) * 2**8 + uint16(uint8(selection[index * 2 + 1]));\\n    }\\n}\\n\",\"keccak256\":\"0x4264ffbd03c4be49f317ed019abbe0594051606df36e7a707d74456b49130c86\",\"license\":\"AGPL-3.0\"},\"src/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity 0.8.9;\\n\\nlibrary Math {\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require(b == 0 || a == 0 || ((c = a * b) / b) == a, overflowError);\\n    }\\n\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory overflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a + b) >= a, overflowError);\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory underflowError\\n    ) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, underflowError);\\n    }\\n\\n    function mul18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, b18, overflowError) / 10**18;\\n    }\\n\\n    function div18(\\n        uint256 a18,\\n        uint256 b18,\\n        string memory overflowError\\n    ) internal pure returns (uint256) {\\n        return mul(a18, 10**18, overflowError) / b18;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function smin(int256 a, int256 b) internal pure returns (int256) {\\n        return a <= b ? a : b;\\n    }\\n\\n    function smax(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function sqrt(uint256 a) internal pure returns (uint256 c) {\\n        uint256 tmp = (a + 1) / 2;\\n        c = a;\\n        while (tmp < c) {\\n            c = tmp;\\n            tmp = ((a / tmp) + tmp) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2d7dff3199295e64e0b6361f8533fb093bfdbd6a60154cadd1d4f6619281260\",\"license\":\"AGPL-3.0\"},\"src/outerspace/base/ImportingOuterSpaceConstants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ncontract ImportingOuterSpaceConstants {\\n    uint256 internal constant DECIMALS_18 = 1e18;\\n    uint32 internal constant ACTIVE_MASK = 2**31;\\n    int256 internal constant UINT32_MAX = 2**32 - 1;\\n    int256 internal constant UINT32_MIN = -2147483648;\\n}\\n\",\"keccak256\":\"0x21e8431ecbcbc07b0b40e3f89136337ce85b07b581aa169a66156cca000c9219\",\"license\":\"AGPL-3.0\"},\"src/outerspace/base/UsingOuterSpaceDataLayout.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\n\\ncontract UsingOuterSpaceDataLayout is ImportingOuterSpaceTypes {\\n    mapping(uint256 => Planet) internal _planets;\\n    mapping(uint256 => Fleet) internal _fleets;\\n\\n    mapping(address => uint256) internal _stakeReadyToBeWithdrawn;\\n\\n    mapping(address => mapping(address => bool)) internal _operators;\\n\\n    // TODO make it namespaces per user, currently it is possible (though unlikely) for 2 users to share a slot if one attack another and quickly send away spaceships\\n    mapping(uint256 => mapping(uint256 => InFlight)) internal _inFlight;\\n\\n    Discovered internal _discovered;\\n    // rewards\\n    mapping(address => uint256) internal _prevRewardIds;\\n    mapping(uint256 => uint256) internal _rewards;\\n    mapping(address => mapping(uint256 => bool)) internal _rewardsToWithdraw;\\n\\n    // This adds 20,000 gas to all resolution\\n    mapping(uint256 => mapping(address => mapping(uint256 => AccumulatedAttack))) internal _attacks;\\n\\n    // remove\\n    // mapping(address => Account) internal _accounts;\\n}\\n\",\"keccak256\":\"0x101bd8f6d39a9f594f377ae36bbe007604b04a06af4737766ec2745fdcbf91d1\",\"license\":\"AGPL-3.0\"},\"src/outerspace/events/ImportingOuterSpaceEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface ImportingOuterSpaceEvents {\\n    event PlanetStake(\\n        address indexed acquirer,\\n        uint256 indexed location,\\n        uint32 numSpaceships,\\n        int40 travelingUpkeep,\\n        uint32 overflow,\\n        uint256 stake\\n    );\\n    event FleetSent(\\n        address indexed fleetSender,\\n        address indexed fleetOwner,\\n        uint256 indexed from,\\n        address operator,\\n        uint256 fleet,\\n        uint32 quantity,\\n        uint32 newNumSpaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    struct ArrivalData {\\n        uint32 newNumspaceships;\\n        int40 newTravelingUpkeep;\\n        uint32 newOverflow;\\n        uint32 numSpaceshipsAtArrival;\\n        uint32 taxLoss;\\n        uint32 fleetLoss;\\n        uint32 planetLoss;\\n        uint32 inFlightFleetLoss;\\n        uint32 inFlightPlanetLoss;\\n        uint32 accumulatedDefenseAdded;\\n        uint32 accumulatedAttackAdded;\\n    }\\n\\n    event FleetArrived(\\n        uint256 indexed fleet,\\n        address indexed fleetOwner,\\n        address indexed destinationOwner,\\n        uint256 destination,\\n        bool gift,\\n        bool won,\\n        ArrivalData data\\n    );\\n\\n    event TravelingUpkeepReductionFromDestruction(\\n        uint256 indexed origin,\\n        uint256 indexed fleet,\\n        uint32 newNumspaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    event PlanetTransfer(\\n        address indexed previousOwner,\\n        address indexed newOwner,\\n        uint256 indexed location,\\n        uint32 newNumspaceships,\\n        int40 newTravelingUpkeep,\\n        uint32 newOverflow\\n    );\\n\\n    event PlanetReset(uint256 indexed location);\\n\\n    event PlanetExit(address indexed owner, uint256 indexed location);\\n\\n    event ExitComplete(address indexed owner, uint256 indexed location, uint256 stake);\\n\\n    event RewardSetup(uint256 indexed location, address indexed giver, uint256 rewardId);\\n    event RewardToWithdraw(address indexed owner, uint256 indexed location, uint256 indexed rewardId);\\n\\n    event StakeToWithdraw(address indexed owner, uint256 newStake);\\n\\n    event Initialized(\\n        bytes32 genesis,\\n        uint256 resolveWindow,\\n        uint256 timePerDistance,\\n        uint256 exitDuration,\\n        uint32 acquireNumSpaceships,\\n        uint32 productionSpeedUp,\\n        uint256 frontrunningDelay,\\n        uint256 productionCapAsDuration,\\n        uint256 upkeepProductionDecreaseRatePer10000th,\\n        uint256 fleetSizeFactor6,\\n        uint32 initialSpaceExpansion,\\n        uint32 expansionDelta,\\n        uint256 giftTaxPer10000\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    // TODO use it\\n    event Transfer(address indexed from, address indexed to, uint256 indexed location);\\n}\\n\",\"keccak256\":\"0x21ca2baaf1adfd652dfffc2a0932160caa37e1d63afc3522bbd30f106b9d1ecd\",\"license\":\"AGPL-3.0\"},\"src/outerspace/facets/OuterSpaceFacetBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\nimport \\\"../base/ImportingOuterSpaceConstants.sol\\\";\\nimport \\\"../events/ImportingOuterSpaceEvents.sol\\\";\\nimport \\\"../base/UsingOuterSpaceDataLayout.sol\\\";\\n\\nimport \\\"../../libraries/Extraction.sol\\\";\\nimport \\\"../../libraries/Math.sol\\\";\\n\\nimport \\\"../../interfaces/IAlliance.sol\\\";\\nimport \\\"../../alliances/AllianceRegistry.sol\\\";\\n\\n// TODO Remove\\n//  import \\\"hardhat/console.sol\\\";\\n\\ncontract OuterSpaceFacetBase is\\n    ImportingOuterSpaceTypes,\\n    ImportingOuterSpaceConstants,\\n    ImportingOuterSpaceEvents,\\n    UsingOuterSpaceDataLayout\\n{\\n    using Extraction for bytes32;\\n\\n    IERC20 internal immutable _stakingToken;\\n    AllianceRegistry internal immutable _allianceRegistry;\\n\\n    bytes32 internal immutable _genesis;\\n    uint256 internal immutable _resolveWindow;\\n    uint256 internal immutable _timePerDistance;\\n    uint256 internal immutable _exitDuration;\\n    uint32 internal immutable _acquireNumSpaceships;\\n    uint32 internal immutable _productionSpeedUp;\\n    uint256 internal immutable _frontrunningDelay;\\n    uint256 internal immutable _productionCapAsDuration;\\n    uint256 internal immutable _upkeepProductionDecreaseRatePer10000th;\\n    uint256 internal immutable _fleetSizeFactor6;\\n    uint32 internal immutable _expansionDelta; // = 8;\\n    uint256 internal immutable _giftTaxPer10000; // = 2500;\\n\\n    struct Config {\\n        IERC20 stakingToken;\\n        AllianceRegistry allianceRegistry;\\n        bytes32 genesis;\\n        uint256 resolveWindow;\\n        uint256 timePerDistance;\\n        uint256 exitDuration;\\n        uint32 acquireNumSpaceships;\\n        uint32 productionSpeedUp;\\n        uint256 frontrunningDelay;\\n        uint256 productionCapAsDuration;\\n        uint256 upkeepProductionDecreaseRatePer10000th;\\n        uint256 fleetSizeFactor6;\\n        uint32 expansionDelta;\\n        uint256 giftTaxPer10000;\\n    }\\n\\n    constructor(Config memory config) {\\n        uint32 t = uint32(config.timePerDistance) / 4; // the coordinates space is 4 times bigger\\n        require(t * 4 == config.timePerDistance, \\\"TIME_PER_DIST_NOT_DIVISIBLE_4\\\");\\n\\n        _stakingToken = config.stakingToken;\\n        _allianceRegistry = config.allianceRegistry;\\n\\n        _genesis = config.genesis;\\n        _resolveWindow = config.resolveWindow;\\n        _timePerDistance = t;\\n        _exitDuration = config.exitDuration;\\n        _acquireNumSpaceships = config.acquireNumSpaceships;\\n        _productionSpeedUp = config.productionSpeedUp;\\n        _frontrunningDelay = config.frontrunningDelay;\\n        _productionCapAsDuration = config.productionCapAsDuration;\\n        _upkeepProductionDecreaseRatePer10000th = config.upkeepProductionDecreaseRatePer10000th;\\n        _fleetSizeFactor6 = config.fleetSizeFactor6;\\n        _expansionDelta = config.expansionDelta;\\n        _giftTaxPer10000 = config.giftTaxPer10000;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // PLANET STATE\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    struct PlanetUpdateState {\\n        uint256 location;\\n        uint40 lastUpdated;\\n        bool active; // modified\\n        uint32 numSpaceships; // modified\\n        int40 travelingUpkeep; // modified\\n        uint40 exitStartTime;\\n        uint40 newExitStartTime; // modified\\n        uint32 overflow; // modified\\n        address owner;\\n        address newOwner; // modified\\n        bytes32 data;\\n    }\\n\\n    function _createPlanetUpdateState(Planet memory planet, uint256 location)\\n        internal\\n        view\\n        returns (PlanetUpdateState memory planetUpdate)\\n    {\\n        (bool active, uint32 currentNumSpaceships) = _activeNumSpaceships(planet.numSpaceships);\\n        planetUpdate.location = location;\\n        planetUpdate.lastUpdated = planet.lastUpdated;\\n        planetUpdate.active = active;\\n        planetUpdate.numSpaceships = currentNumSpaceships;\\n        planetUpdate.travelingUpkeep = planet.travelingUpkeep;\\n        planetUpdate.exitStartTime = planet.exitStartTime;\\n        planetUpdate.newExitStartTime = planet.exitStartTime;\\n        planetUpdate.overflow = planet.overflow;\\n        planetUpdate.owner = planet.owner;\\n        planetUpdate.newOwner = planet.owner;\\n        planetUpdate.data = _planetData(location);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computePlanetUpdateForTimeElapsed(PlanetUpdateState memory planetUpdate) internal view {\\n        if (planetUpdate.exitStartTime != 0) {\\n            if (_hasJustExited(planetUpdate.exitStartTime)) {\\n                planetUpdate.newExitStartTime = 0;\\n                planetUpdate.numSpaceships = 0;\\n                planetUpdate.travelingUpkeep = 0;\\n                planetUpdate.newOwner = address(0);\\n                planetUpdate.overflow = 0;\\n                planetUpdate.active = false; // event is emitted at the endof each write function\\n                // lastUpdated is set at the end directly on storage\\n                return;\\n            }\\n        }\\n\\n        uint256 timePassed = block.timestamp - planetUpdate.lastUpdated;\\n        uint16 production = _production(planetUpdate.data);\\n        uint256 produce = (timePassed * _productionSpeedUp * uint256(production)) / 1 hours;\\n\\n        // NOTE: the repaypemnt of upkeep always happen at a fixed rate (per planet), it is fully predictable\\n        uint256 upkeepRepaid = 0;\\n        if (planetUpdate.travelingUpkeep > 0) {\\n            upkeepRepaid = ((produce * _upkeepProductionDecreaseRatePer10000th) / 10000);\\n            if (upkeepRepaid > uint40(planetUpdate.travelingUpkeep)) {\\n                upkeepRepaid = uint40(planetUpdate.travelingUpkeep);\\n            }\\n            planetUpdate.travelingUpkeep = planetUpdate.travelingUpkeep - int40(uint40(upkeepRepaid));\\n        }\\n\\n        uint256 newNumSpaceships = planetUpdate.numSpaceships;\\n        uint256 extraUpkeepPaid = 0;\\n        if (_productionCapAsDuration > 0) {\\n            uint256 capWhenActive = _capWhenActive(production);\\n            uint256 cap = planetUpdate.active ? capWhenActive : 0;\\n\\n            if (newNumSpaceships > cap) {\\n                // NOTE do not decrease while exiting\\n                if (planetUpdate.newExitStartTime == 0) {\\n                    uint256 decreaseRate = 1800;\\n                    if (planetUpdate.overflow > 0) {\\n                        decreaseRate = (planetUpdate.overflow * 1800) / capWhenActive;\\n                        if (decreaseRate < 1800) {\\n                            decreaseRate = 1800;\\n                        }\\n                    }\\n\\n                    uint256 decrease = (timePassed * _productionSpeedUp * decreaseRate) / 1 hours;\\n                    if (decrease > newNumSpaceships - cap) {\\n                        decrease = newNumSpaceships - cap;\\n                    }\\n                    if (decrease > newNumSpaceships) {\\n                        if (planetUpdate.active) {\\n                            extraUpkeepPaid = produce - upkeepRepaid + newNumSpaceships;\\n                        }\\n                        newNumSpaceships = 0;\\n                    } else {\\n                        if (planetUpdate.active) {\\n                            extraUpkeepPaid = produce - upkeepRepaid + decrease;\\n                        }\\n                        newNumSpaceships -= decrease;\\n                    }\\n                }\\n            } else {\\n                if (planetUpdate.active) {\\n                    uint256 maxIncrease = cap - newNumSpaceships;\\n                    uint256 increase = produce - upkeepRepaid;\\n                    if (increase > maxIncrease) {\\n                        extraUpkeepPaid = increase - maxIncrease;\\n                        increase = maxIncrease;\\n                    }\\n                    newNumSpaceships += increase;\\n                    // solhint-disable-next-line no-empty-blocks\\n                } else {\\n                    // not effect currently, when inactive, cap == 0, meaning zero spaceship here\\n                    // NOTE: we could do the following assuming we act on upkeepRepaid when inactive, we do not do that currently\\n                    //  extraUpkeepPaid = produce - upkeepRepaid;\\n                }\\n            }\\n\\n            if (planetUpdate.active) {\\n                // travelingUpkeep can go negative allow you to charge up your planet for later use\\n                int256 newTravelingUpkeep = int256(planetUpdate.travelingUpkeep) - int256(extraUpkeepPaid);\\n\\n                if (newTravelingUpkeep < -int256(cap)) {\\n                    newTravelingUpkeep = -int256(cap);\\n                }\\n                planetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n            }\\n        } else {\\n            // TODO We are not using this branch, and in that branch there is no upkeep or overflow to consider\\n            if (planetUpdate.active) {\\n                newNumSpaceships += (timePassed * _productionSpeedUp * uint256(production)) / 1 hours - upkeepRepaid;\\n            } else {\\n                // NOTE no need to overflow here  as there is no production cap, so no incentive to regroup spaceships\\n                uint256 decrease = (timePassed * _productionSpeedUp * 1800) / 1 hours;\\n                if (decrease > newNumSpaceships) {\\n                    decrease = newNumSpaceships;\\n                    newNumSpaceships = 0;\\n                } else {\\n                    newNumSpaceships -= decrease;\\n                }\\n            }\\n        }\\n\\n        if (newNumSpaceships >= ACTIVE_MASK) {\\n            newNumSpaceships = ACTIVE_MASK - 1;\\n        }\\n        planetUpdate.numSpaceships = uint32(newNumSpaceships);\\n\\n        if (!planetUpdate.active && planetUpdate.numSpaceships == 0) {\\n            planetUpdate.newOwner = address(0);\\n        }\\n    }\\n\\n    function _setPlanet(\\n        Planet storage planet,\\n        PlanetUpdateState memory planetUpdate,\\n        bool exitInterupted\\n    ) internal {\\n        if (planetUpdate.exitStartTime > 0 && planetUpdate.newExitStartTime == 0) {\\n            // NOTE: planetUpdate.newExitStartTime is only set to zero when exit is actually complete (not interupted)\\n            //  interuption is handled by exitInterupted\\n            // exit has completed, newExitStartTime is not set to zero for interuption,\\n            // interuption is taken care below (owner changes)\\n            _handleExitComplete(planetUpdate);\\n        }\\n        if (planetUpdate.owner != planetUpdate.newOwner) {\\n            planet.owner = planetUpdate.newOwner;\\n            planet.ownershipStartTime = uint40(block.timestamp);\\n            // TODO stakedOwnershipStartTime ?\\n            // TODO handle staking pool ?\\n            emit Transfer(planetUpdate.owner, planetUpdate.newOwner, planetUpdate.location);\\n        }\\n\\n        if (exitInterupted) {\\n            // if (planetUpdate.newExitStartTime == 0 && planetUpdate.exitStartTime > 0) {\\n            // exit interupted // TODO event ?\\n            // }\\n            planet.exitStartTime = 0;\\n        } else if (planetUpdate.newExitStartTime != planetUpdate.exitStartTime) {\\n            planet.exitStartTime = planetUpdate.newExitStartTime;\\n        }\\n\\n        planet.numSpaceships = _setActiveNumSpaceships(planetUpdate.active, planetUpdate.numSpaceships);\\n        planet.travelingUpkeep = planetUpdate.travelingUpkeep;\\n\\n        planet.overflow = planetUpdate.overflow;\\n        planet.lastUpdated = uint40(block.timestamp);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // STAKING / PRODUCTION CAPTURE\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _acquire(\\n        address player,\\n        uint256 stake,\\n        uint256 location\\n    ) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage planet = _getPlanet(location);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, location);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n        require(stake == uint256(_stake(planetUpdate.data)) * (DECIMALS_18), \\\"INVALID_AMOUNT\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Staking logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForStaking(player, planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setPlanet(planet, planetUpdate, false);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Update Space Discovery\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setDiscoveryAfterStaking(location);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Emit Event\\n        // -----------------------------------------------------------------------------------------------------------\\n        emit PlanetStake(\\n            player,\\n            location,\\n            planetUpdate.numSpaceships,\\n            planetUpdate.travelingUpkeep,\\n            planetUpdate.overflow,\\n            stake\\n        );\\n    }\\n\\n    function _computePlanetUpdateForStaking(address player, PlanetUpdateState memory planetUpdate) internal view {\\n        require(!planetUpdate.active, \\\"STILL_ACTIVE\\\");\\n\\n        uint32 defense;\\n        // NOTE : natives are back automatically once spaceships reaches zero (here we know we are not active)\\n        // TODO consider making natives come back over time => would need to compute the time numSpaceship became zero\\n        if (planetUpdate.numSpaceships == 0) {\\n            defense = _natives(planetUpdate.data);\\n        } else {\\n            // Do not allow staking over occupied planets, they are going to zero at some point though\\n            require(planetUpdate.owner == player, \\\"OCCUPIED\\\");\\n        }\\n\\n        uint16 production = _production(planetUpdate.data);\\n        uint32 cap = uint32(_capWhenActive(production));\\n\\n        // TODO ensure a player staking on a planet it previously exited work here\\n        planetUpdate.newOwner = player;\\n        if (defense != 0) {\\n            (uint32 attackerLoss, ) = _computeFight(_acquireNumSpaceships, defense, 10000, _defense(planetUpdate.data));\\n            // attacker alwasy win as defense (and stats.native) is restricted to 3500\\n            // (attackerLoss: 0, defenderLoss: 0) would mean defense was zero\\n            require(attackerLoss < _acquireNumSpaceships, \\\"FAILED_CAPTURED\\\");\\n            planetUpdate.numSpaceships = _acquireNumSpaceships - attackerLoss;\\n\\n            // NOTE cannot be overflow here as staking provide a number of spaceships below that\\n            planetUpdate.overflow = 0;\\n        } else {\\n            planetUpdate.numSpaceships += _acquireNumSpaceships;\\n            if (_productionCapAsDuration > 0) {\\n                if (planetUpdate.numSpaceships > cap) {\\n                    planetUpdate.overflow = planetUpdate.numSpaceships - cap;\\n                } else {\\n                    planetUpdate.overflow = 0;\\n                }\\n            }\\n        }\\n\\n        // NOTE when staking on a planet, we set an allowance for traveling upkeep\\n        planetUpdate.travelingUpkeep = -int32(cap);\\n        planetUpdate.active = true;\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _setDiscoveryAfterStaking(uint256 location) internal {\\n        Discovered memory discovered = _discovered;\\n\\n        int256 x = int256(int128(int256(location & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)));\\n        int256 y = int256(int128(int256(location >> 128)));\\n\\n        bool changes = false;\\n        if (x < 0) {\\n            require(-x <= int256(uint256(discovered.minX)), \\\"NOT_REACHABLE_YET_MINX\\\");\\n            x = -x + int32(_expansionDelta);\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minX)) < x) {\\n                discovered.minX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        } else {\\n            require(x <= int256(uint256(discovered.maxX)), \\\"NOT_REACHABLE_YET_MAXX\\\");\\n            x = x + int32(_expansionDelta);\\n            if (x > UINT32_MAX) {\\n                x = UINT32_MAX;\\n            }\\n            if (discovered.maxX < uint32(uint256(x))) {\\n                discovered.maxX = uint32(uint256(x));\\n                changes = true;\\n            }\\n        }\\n\\n        if (y < 0) {\\n            require(-y <= int256(uint256(discovered.minY)), \\\"NOT_REACHABLE_YET_MINY\\\");\\n            y = -y + int32(_expansionDelta);\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.minY)) < y) {\\n                discovered.minY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        } else {\\n            require(y <= int256(uint256(discovered.maxY)), \\\"NOT_REACHABLE_YET_MAXY\\\");\\n            y = y + int32(_expansionDelta);\\n            if (y > UINT32_MAX) {\\n                y = UINT32_MAX;\\n            }\\n            if (int256(uint256(discovered.maxY)) < y) {\\n                discovered.maxY = uint32(uint256(y));\\n                changes = true;\\n            }\\n        }\\n        if (changes) {\\n            _discovered = discovered;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // EXITS / WITHDRAWALS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _handleExitComplete(PlanetUpdateState memory planetUpdate) internal {\\n        uint256 stake = _completeExit(planetUpdate.owner, planetUpdate.location, planetUpdate.data);\\n\\n        // TODO Transfer to zero and Transfer from zero ?\\n\\n        // optional so we can use it in the batch withdraw,\\n        uint256 newStake = _stakeReadyToBeWithdrawn[planetUpdate.owner] + stake;\\n        _stakeReadyToBeWithdrawn[planetUpdate.owner] = newStake;\\n        emit StakeToWithdraw(planetUpdate.owner, newStake);\\n    }\\n\\n    function _completeExit(\\n        address owner,\\n        uint256 location,\\n        bytes32 data\\n    ) internal returns (uint256 stake) {\\n        stake = uint256(_stake(data)) * (DECIMALS_18);\\n        emit ExitComplete(owner, location, stake);\\n\\n        // TODO handle Staking pool release ?\\n        // (maybe not necessary here, can do in withdrawals?)\\n\\n        // --------------------------------------------------------\\n        // Extra Reward was added\\n        // --------------------------------------------------------\\n        uint256 rewardId = _rewards[location];\\n        if (rewardId != 0) {\\n            // rewardId would contains the package. maybe this could be handled by an external contract\\n            _rewardsToWithdraw[owner][rewardId] = true;\\n            _rewards[location] = 0; // reset\\n            // if you had reward to a planet in he process of exiting,\\n            // you are adding the reward to the player exiting unless _setPlanetAfterExit is called first\\n            emit RewardToWithdraw(owner, location, rewardId);\\n        }\\n        // --------------------------------------------------------\\n    }\\n\\n    function _exitFor(address owner, uint256 location) internal {\\n        Planet storage planet = _getPlanet(location);\\n        (bool active, ) = _activeNumSpaceships(planet.numSpaceships);\\n        require(active, \\\"NOT_ACTIVE\\\");\\n        require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n        require(planet.exitStartTime == 0, \\\"EXITING_ALREADY\\\");\\n        planet.exitStartTime = uint40(block.timestamp);\\n        emit PlanetExit(owner, location);\\n    }\\n\\n    function _fetchAndWithdrawFor(address owner, uint256[] calldata locations) internal {\\n        uint256 addedStake = 0;\\n        for (uint256 i = 0; i < locations.length; i++) {\\n            Planet storage planet = _getPlanet(locations[i]);\\n            if (_hasJustExited(planet.exitStartTime)) {\\n                require(owner == planet.owner, \\\"NOT_OWNER\\\");\\n                emit Transfer(owner, address(0), locations[i]);\\n                addedStake += _completeExit(planet.owner, locations[i], _planetData(locations[i]));\\n                planet.owner = address(0);\\n                planet.ownershipStartTime = 0;\\n                planet.exitStartTime = 0;\\n                planet.numSpaceships = 0;\\n                planet.overflow = 0;\\n                planet.travelingUpkeep = 0;\\n                planet.lastUpdated = uint40(block.timestamp);\\n            }\\n        }\\n        uint256 newStake = _stakeReadyToBeWithdrawn[owner] + addedStake;\\n        _unsafe_withdrawAll(owner, newStake);\\n    }\\n\\n    function _unsafe_withdrawAll(address owner, uint256 amount) internal {\\n        _stakeReadyToBeWithdrawn[owner] = 0;\\n        emit StakeToWithdraw(owner, amount);\\n        require(_stakingToken.transfer(owner, amount), \\\"FAILED_TRANSFER\\\");\\n        // TODO Staking Pool\\n        emit StakeToWithdraw(owner, 0);\\n    }\\n\\n    function _hasJustExited(uint40 exitTime) internal view returns (bool) {\\n        return exitTime > 0 && block.timestamp > exitTime + _exitDuration;\\n    }\\n\\n    function _ping(uint256 location) internal {\\n        Planet storage planet = _getPlanet(location);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, location);\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n        _setPlanet(planet, planetUpdate, false);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // REWARDS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _addReward(uint256 location, address sponsor) internal {\\n        uint256 rewardId = _rewards[location];\\n        if (rewardId == 0) {\\n            rewardId = ++_prevRewardIds[sponsor];\\n            _rewards[location] = (uint256(uint160(sponsor)) << 96) + rewardId;\\n        }\\n        // TODO should it fails if different sponsor added reward before\\n\\n        // TODO rewardId association with the actual rewards // probably contract address holding the reward\\n        emit RewardSetup(location, sponsor, rewardId);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _unsafe_sendFor(\\n        uint256 fleetId,\\n        address operator,\\n        FleetLaunch memory launch\\n    ) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage planet = _getPlanet(launch.from);\\n        PlanetUpdateState memory planetUpdate = _createPlanetUpdateState(planet, launch.from);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(planet.exitStartTime == 0, \\\"PLANET_EXIT\\\");\\n        require(launch.fleetSender == planet.owner, \\\"NOT_OWNER\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(planetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Requirements post Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(planetUpdate.numSpaceships >= launch.quantity, \\\"SPACESHIPS_NOT_ENOUGH\\\");\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Sending logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForFleetLaunch(planetUpdate, launch.quantity);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n        _setPlanet(planet, planetUpdate, false);\\n        // _setAccountFromPlanetUpdate(planetUpdate);\\n\\n        _setFleetFlyingSlot(launch.from, launch.quantity);\\n\\n        // TODO add debt info\\n        _fleets[fleetId] = Fleet({\\n            launchTime: uint40(block.timestamp),\\n            owner: launch.fleetOwner,\\n            quantity: launch.quantity\\n        });\\n\\n        emit FleetSent(\\n            launch.fleetSender,\\n            launch.fleetOwner,\\n            launch.from,\\n            operator,\\n            fleetId,\\n            launch.quantity,\\n            planetUpdate.numSpaceships,\\n            planetUpdate.travelingUpkeep,\\n            planetUpdate.overflow\\n        );\\n    }\\n\\n    function _computePlanetUpdateForFleetLaunch(PlanetUpdateState memory planetUpdate, uint32 quantity) internal view {\\n        planetUpdate.numSpaceships -= quantity;\\n        if (_productionCapAsDuration > 0) {\\n            if (planetUpdate.active) {\\n                // NOTE we do not update travelingUpkeep on Inactive planets\\n                //  these get reset on staking\\n                uint16 production = _production(planetUpdate.data);\\n                uint256 cap = _capWhenActive(production);\\n\\n                int256 newTravelingUpkeep = int256(planetUpdate.travelingUpkeep) + int256(uint256(quantity));\\n                if (newTravelingUpkeep > int256(cap)) {\\n                    newTravelingUpkeep = int256(cap);\\n                }\\n                planetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n            }\\n\\n            if (planetUpdate.overflow > quantity) {\\n                planetUpdate.overflow -= quantity;\\n            } else {\\n                planetUpdate.overflow = 0;\\n            }\\n        }\\n    }\\n\\n    function _setFleetFlyingSlot(uint256 from, uint32 quantity) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // record flying fleets (to prevent front-running, see resolution)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        uint32 flying = _inFlight[from][timeSlot].flying;\\n        flying = flying + quantity;\\n        require(flying >= quantity, \\\"ORBIT_OVERFLOW\\\"); // unlikely to ever happen,\\n        // would need a huge amount of spaceships to be received and each in turn being sent\\n        // TOEXPLORE could also cap, that would result in some fleet being able to escape.\\n        _inFlight[from][timeSlot].flying = flying;\\n        // -----------------------------------------------------------------------------------------------------------\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // ---------------------------------------------------------------------------------------------------------------\\n    struct ResolutionState {\\n        address fleetOwner;\\n        uint40 fleetLaunchTime;\\n        uint32 originalQuantity;\\n        uint32 fleetQuantity;\\n        bytes32 fromData;\\n        uint32 inFlightFleetLoss;\\n        uint32 inFlightPlanetLoss;\\n        bool gifting;\\n        bool taxed;\\n        bool victory;\\n        uint32 attackerLoss;\\n        uint32 defenderLoss;\\n        uint32 orbitDefense1;\\n        uint32 orbitDefenseDestroyed1;\\n        uint32 orbitDefense2;\\n        uint32 orbitDefenseDestroyed2;\\n        uint40 arrivalTime;\\n        uint32 accumulatedDefenseAdded;\\n        uint32 accumulatedAttackAdded;\\n        uint16 attackPower;\\n    }\\n\\n    function _resolveFleet(uint256 fleetId, FleetResolution calldata resolution) internal {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Initialise State Update\\n        // -----------------------------------------------------------------------------------------------------------\\n        Planet storage toPlanet = _getPlanet(resolution.to);\\n        PlanetUpdateState memory toPlanetUpdate = _createPlanetUpdateState(toPlanet, resolution.to);\\n        ResolutionState memory rState = _createResolutionState(_fleets[fleetId], resolution.from);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check requirements\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        require(rState.fleetQuantity > 0, \\\"FLEET_DO_NOT_EXIST\\\");\\n        _requireCorrectDistance(\\n            resolution.distance,\\n            resolution.from,\\n            resolution.to,\\n            rState.fromData,\\n            toPlanetUpdate.data\\n        );\\n        _requireCorrectTimeAndUpdateArrivalTime(\\n            resolution.distance,\\n            resolution.arrivalTimeWanted,\\n            rState.fleetLaunchTime,\\n            rState.fromData,\\n            rState\\n        );\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Compute Basic Planet Updates\\n        // -----------------------------------------------------------------------------------------------------------\\n        _computePlanetUpdateForTimeElapsed(toPlanetUpdate);\\n\\n        uint32 numSpaceshipsAtArrival = toPlanetUpdate.numSpaceships;\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Traveling logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _computeInFlightLossForFleet(rState, resolution);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Resolution logic...\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _updateFleetForGifting(rState, resolution, toPlanetUpdate.newOwner);\\n\\n        _computeResolutionResult(rState, toPlanetUpdate);\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Write New State\\n        // -----------------------------------------------------------------------------------------------------------\\n\\n        _recordInOrbitLossAfterAttack(rState, toPlanetUpdate);\\n\\n        _recordOrbitLossAccountingForFleetOrigin(rState, resolution);\\n\\n        _setTravelingUpkeepFromOrigin(fleetId, rState, resolution.from);\\n\\n        _setPlanet(toPlanet, toPlanetUpdate, rState.victory);\\n\\n        _setAccumulatedAttack(rState, toPlanetUpdate);\\n\\n        // _setAccountFromPlanetUpdate(toPlanetUpdate); // TODO remove, else think about the fromPlanet ?\\n\\n        // TODO quantity should be kept ?\\n        //  so Alliance Contract can act on that value ?, could use 1st bit indicator\\n        _fleets[fleetId].quantity = 0;\\n\\n        // -----------------------------------------------------------------------------------------------------------\\n        // Events\\n        // -----------------------------------------------------------------------------------------------------------\\n        _emitFleetArrived(\\n            fleetId,\\n            rState,\\n            toPlanetUpdate.owner,\\n            resolution.to,\\n            _arrivalData(rState, toPlanetUpdate, numSpaceshipsAtArrival)\\n        );\\n    }\\n\\n    function _arrivalData(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint32 numSpaceshipsAtArrival\\n    ) internal pure returns (ArrivalData memory arrivalData) {\\n        arrivalData.newNumspaceships = toPlanetUpdate.numSpaceships;\\n        arrivalData.newTravelingUpkeep = toPlanetUpdate.travelingUpkeep;\\n        arrivalData.newOverflow = toPlanetUpdate.overflow;\\n        arrivalData.numSpaceshipsAtArrival = numSpaceshipsAtArrival;\\n        arrivalData.taxLoss = rState.taxed\\n            ? (rState.originalQuantity - rState.inFlightFleetLoss) - rState.fleetQuantity\\n            : 0;\\n        arrivalData.fleetLoss = rState.attackerLoss;\\n        arrivalData.planetLoss = rState.defenderLoss;\\n        arrivalData.inFlightFleetLoss = rState.inFlightFleetLoss;\\n        arrivalData.inFlightPlanetLoss = rState.inFlightPlanetLoss;\\n        arrivalData.accumulatedDefenseAdded = rState.accumulatedDefenseAdded;\\n        arrivalData.accumulatedAttackAdded = rState.accumulatedAttackAdded;\\n    }\\n\\n    function _emitFleetArrived(\\n        uint256 fleetId,\\n        ResolutionState memory rState,\\n        address planetOwner,\\n        uint256 to,\\n        ArrivalData memory arrivalData\\n    ) internal {\\n        emit FleetArrived(fleetId, rState.fleetOwner, planetOwner, to, rState.gifting, rState.victory, arrivalData);\\n    }\\n\\n    function _requireCorrectDistance(\\n        uint256 distance,\\n        uint256 from,\\n        uint256 to,\\n        bytes32 fromPlanetData,\\n        bytes32 toPlanetData\\n    ) internal pure {\\n        // check input instead of compute sqrt\\n\\n        (int8 fromSubX, int8 fromSubY) = _subLocation(fromPlanetData);\\n        (int8 toSubX, int8 toSubY) = _subLocation(toPlanetData);\\n        uint256 distanceSquared =\\n            uint256(\\n                int256( // check input instead of compute sqrt\\n                    ((int128(int256(to & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + toSubX) -\\n                        (int128(int256(from & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) * 4 + fromSubX)) **\\n                        2 +\\n                        ((int128(int256(to >> 128)) * 4 + toSubY) - (int128(int256(from >> 128)) * 4 + fromSubY))**2\\n                )\\n            );\\n        require(distance**2 <= distanceSquared && distanceSquared < (distance + 1)**2, \\\"wrong distance\\\");\\n    }\\n\\n    function _requireCorrectTimeAndUpdateArrivalTime(\\n        uint256 distance,\\n        uint256 arrivalTimeWanted,\\n        uint40 launchTime,\\n        bytes32 fromPlanetData,\\n        ResolutionState memory rState\\n    ) internal view {\\n        uint256 minReachTime = launchTime + (distance * (_timePerDistance * 10000)) / _speed(fromPlanetData);\\n        uint256 reachTime = Math.max(arrivalTimeWanted, minReachTime);\\n        if (arrivalTimeWanted > 0) {\\n            rState.arrivalTime = uint40(arrivalTimeWanted);\\n        } else {\\n            rState.arrivalTime = uint40(minReachTime);\\n        }\\n        require(block.timestamp >= reachTime, \\\"too early\\\");\\n        require(block.timestamp < reachTime + _resolveWindow, \\\"too late, your spaceships are lost in space\\\");\\n    }\\n\\n    function _computeInFlightLossForFleet(ResolutionState memory rState, FleetResolution memory resolution)\\n        internal\\n        view\\n    {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // check if fleet was attacked while departing (used to prevent front-running, see fleet sending)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = rState.fleetLaunchTime / (_frontrunningDelay / 2);\\n        uint32 destroyed = _inFlight[resolution.from][timeSlot].destroyed;\\n        uint32 originalQuantity = rState.fleetQuantity;\\n        if (destroyed < rState.fleetQuantity) {\\n            rState.fleetQuantity -= uint32(destroyed);\\n        } else {\\n            rState.fleetQuantity = 0;\\n        }\\n\\n        rState.inFlightFleetLoss = originalQuantity - rState.fleetQuantity;\\n        // -----------------------------------------------------------------------------------------------------------\\n    }\\n\\n    function _updateFleetForGifting(\\n        ResolutionState memory rState,\\n        FleetResolution memory resolution,\\n        address destinationOwner\\n    ) internal view {\\n        (bool gifting, bool taxed) = _computeGifting(destinationOwner, resolution, rState);\\n        rState.gifting = gifting;\\n        rState.taxed = taxed;\\n    }\\n\\n    // TODO simplify and apply that to attack (when fleetOwner is not fleetSender)\\n    //  if (resolution.gift) { rState.fleetOwner = destinationOwner }\\n    //  then compute tax based on fleetOwner != fleetSender, box for attacks and gift\\n    //  combined attack could even work for non-allies ?\\n    //  in _computeGift calculate the tax for every branch that result in `gifting` being false\\n    //  then in attack, add tax to the quantity of fleet + modify event\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computeGifting(\\n        address destinationOwner,\\n        FleetResolution memory resolution,\\n        ResolutionState memory rState\\n    ) internal view returns (bool gifting, bool taxed) {\\n        if (destinationOwner == address(0)) {\\n            // destination has no owner : this is an attack\\n            return (false, _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime));\\n        }\\n        if (destinationOwner == rState.fleetOwner && destinationOwner == resolution.fleetSender) {\\n            // destination is sender is fleet owner: this is a non-taxed gift\\n            return (true, false);\\n        }\\n\\n        if (resolution.gift || destinationOwner == rState.fleetOwner) {\\n            // intent was gift\\n            if (\\n                resolution.specific == address(0) || // anyone\\n                resolution.specific == destinationOwner || // only one address and matching owner\\n                destinationOwner == rState.fleetOwner // owner is fleet owner => gift\\n            ) {\\n                // and it was for anyone or specific destination owner that is the same as the current one\\n                // or it was simply that fleetOwner = destinationOwner\\n\\n                // check tax applies with sender\\n                (, uint96 joinTime) =\\n                    _allianceRegistry.havePlayersAnAllianceInCommon(\\n                        resolution.fleetSender,\\n                        destinationOwner,\\n                        rState.fleetLaunchTime\\n                    );\\n                return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n            }\\n\\n            if (resolution.specific == address(1)) {\\n                // or the specific specify any common alliances (1)\\n\\n                if (rState.fleetOwner == resolution.fleetSender) {\\n                    (, uint96 joinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            resolution.fleetSender,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n                    return (joinTime > 0, joinTime > rState.fleetLaunchTime);\\n                } else {\\n                    (, uint96 fleetOwnerJoinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            rState.fleetOwner,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n\\n                    if (fleetOwnerJoinTime == 0) {\\n                        // not in an alliance\\n                        return (\\n                            false,\\n                            _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime)\\n                        );\\n                    }\\n\\n                    // alliance => means gift\\n                    // check if taxed:\\n                    (, uint96 senderJoinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            resolution.fleetSender,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n\\n                    return (true, senderJoinTime == 0 || senderJoinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n\\n            if (uint160(resolution.specific) > 1) {\\n                // or a specific alliance that matches\\n\\n                (uint96 joinTimeToSpecific, ) =\\n                    _allianceRegistry.getAllianceData(destinationOwner, IAlliance(resolution.specific));\\n\\n                if (joinTimeToSpecific > 0) {\\n                    (, uint96 joinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            resolution.fleetSender,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n                    return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n        } else {\\n            // intent was attack\\n            if (resolution.specific == address(1)) {\\n                // and the attack was on any non-allies\\n\\n                if (rState.fleetOwner == resolution.fleetSender) {\\n                    // make it a gift if the destination owner is actually an ally\\n                    (, uint96 joinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            resolution.fleetSender,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n                    return (joinTime > 0, joinTime > rState.fleetLaunchTime);\\n                } else {\\n                    (, uint96 fleetOwnerJoinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            rState.fleetOwner,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n\\n                    if (fleetOwnerJoinTime == 0) {\\n                        // not in an alliance\\n                        return (\\n                            false,\\n                            _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime)\\n                        );\\n                    }\\n\\n                    // alliance => means gift\\n                    // check if taxed:\\n                    (, uint96 senderJoinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            resolution.fleetSender,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n\\n                    return (true, senderJoinTime == 0 || senderJoinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n\\n            if (uint160(resolution.specific) > 1 && resolution.specific != destinationOwner) {\\n                // but specific not matching current owner\\n\\n                (uint96 joinTimeToSpecific, ) =\\n                    _allianceRegistry.getAllianceData(destinationOwner, IAlliance(resolution.specific));\\n\\n                // make it a gift if the destination is not matching the specific alliance\\n                // (or owner, in which case since it is not an alliance, it will also not match)\\n                if (joinTimeToSpecific == 0) {\\n                    (, uint96 joinTime) =\\n                        _allianceRegistry.havePlayersAnAllianceInCommon(\\n                            resolution.fleetSender,\\n                            destinationOwner,\\n                            rState.fleetLaunchTime\\n                        );\\n                    return (true, joinTime == 0 || joinTime > rState.fleetLaunchTime);\\n                }\\n            }\\n        }\\n        return (false, _isFleetOwnerTaxed(rState.fleetOwner, resolution.fleetSender, rState.fleetLaunchTime));\\n    }\\n\\n    function _isFleetOwnerTaxed(\\n        address fleetOwner,\\n        address fleetSender,\\n        uint40 fleetLaunchTime\\n    ) internal view returns (bool) {\\n        if (fleetOwner == fleetSender) {\\n            return false;\\n        }\\n        (, uint96 joinTime) = _allianceRegistry.havePlayersAnAllianceInCommon(fleetOwner, fleetSender, fleetLaunchTime);\\n        return joinTime == 0 || joinTime > fleetLaunchTime;\\n    }\\n\\n    function _setTravelingUpkeepFromOrigin(\\n        uint256 fleetID,\\n        ResolutionState memory rState,\\n        uint256 location\\n    ) internal {\\n        // TODO why only when attacked ?\\n        //  should we not also bring bacp upkeep when arriving ?\\n        if (rState.attackerLoss > 0) {\\n            // // we have to update the origin\\n            Planet storage fromPlanet = _planets[location];\\n            PlanetUpdateState memory fromPlanetUpdate = _createPlanetUpdateState(fromPlanet, location);\\n            _computePlanetUpdateForTimeElapsed(fromPlanetUpdate);\\n\\n            uint16 production = _production(fromPlanetUpdate.data);\\n            uint256 capWhenActive = _capWhenActive(production);\\n\\n            int256 newTravelingUpkeep = int256(fromPlanetUpdate.travelingUpkeep) - int256(int32(rState.attackerLoss));\\n            if (newTravelingUpkeep < -int256(capWhenActive)) {\\n                newTravelingUpkeep = -int256(capWhenActive);\\n            }\\n            fromPlanetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n\\n            _setPlanet(fromPlanet, fromPlanetUpdate, false);\\n\\n            emit TravelingUpkeepReductionFromDestruction(\\n                location,\\n                fleetID,\\n                fromPlanetUpdate.numSpaceships,\\n                fromPlanetUpdate.travelingUpkeep,\\n                fromPlanetUpdate.overflow\\n            );\\n        }\\n    }\\n\\n    function _setAccumulatedAttack(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate) internal {\\n        if (rState.victory) {\\n            // victory, past attack has been succesful in capturing the planet, They do not count anymore\\n            delete _attacks[toPlanetUpdate.location][rState.fleetOwner][rState.arrivalTime];\\n        } else if (!rState.taxed) {\\n            AccumulatedAttack storage attack = _attacks[toPlanetUpdate.location][rState.fleetOwner][rState.arrivalTime];\\n\\n            attack.target = toPlanetUpdate.owner;\\n            attack.damageCausedSoFar = rState.defenderLoss + rState.inFlightPlanetLoss;\\n            attack.numAttackSpent = rState.attackerLoss;\\n            attack.averageAttackPower = rState.attackPower;\\n        }\\n    }\\n\\n    function _createResolutionState(Fleet storage fleet, uint256 from)\\n        internal\\n        view\\n        returns (ResolutionState memory rState)\\n    {\\n        rState.fleetOwner = fleet.owner;\\n        rState.fleetLaunchTime = fleet.launchTime;\\n        rState.originalQuantity = fleet.quantity;\\n        rState.fleetQuantity = fleet.quantity;\\n        rState.fromData = _planetData(from);\\n        rState.attackPower = _attack(rState.fromData);\\n    }\\n\\n    function _recordOrbitLossAccountingForFleetOrigin(ResolutionState memory rState, FleetResolution memory resolution)\\n        internal\\n    {\\n        if (rState.inFlightFleetLoss > 0) {\\n            uint256 timeSlot = rState.fleetLaunchTime / (_frontrunningDelay / 2);\\n\\n            // NOTE we already computed that destroyed cannot be smaller than inFlightFleetLoss\\n            //  see _computeInFlightLossForFleet\\n            _inFlight[resolution.from][timeSlot].destroyed -= rState.inFlightFleetLoss;\\n        }\\n    }\\n\\n    function _computeResolutionResult(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate)\\n        internal\\n        view\\n    {\\n        if (rState.taxed) {\\n            rState.fleetQuantity = uint32(\\n                uint256(rState.fleetQuantity) - (uint256(rState.fleetQuantity) * _giftTaxPer10000) / 10000\\n            );\\n        }\\n        if (rState.gifting) {\\n            _computeGiftingResolutionResult(rState, toPlanetUpdate);\\n        } else {\\n            _computeAttackResolutionResult(rState, toPlanetUpdate);\\n        }\\n    }\\n\\n    function _computeGiftingResolutionResult(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate)\\n        internal\\n        view\\n    {\\n        uint256 newNumSpaceships = toPlanetUpdate.numSpaceships + rState.fleetQuantity;\\n        if (newNumSpaceships >= ACTIVE_MASK) {\\n            newNumSpaceships = ACTIVE_MASK - 1;\\n        }\\n\\n        toPlanetUpdate.numSpaceships = uint32(newNumSpaceships);\\n        if (!toPlanetUpdate.active) {\\n            // NOTE: not active, overflow is applied on cap = 0\\n            if (toPlanetUpdate.numSpaceships > toPlanetUpdate.overflow) {\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            }\\n        } else {\\n            uint32 cap = uint32(_capWhenActive(_production(toPlanetUpdate.data)));\\n            if (_productionCapAsDuration > 0 && newNumSpaceships > cap) {\\n                if (toPlanetUpdate.numSpaceships - cap > toPlanetUpdate.overflow) {\\n                    toPlanetUpdate.overflow = uint32(toPlanetUpdate.numSpaceships - cap);\\n                }\\n            } else {\\n                toPlanetUpdate.overflow = 0;\\n            }\\n        }\\n    }\\n\\n    function _computeAttackResolutionResult(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate)\\n        internal\\n        view\\n    {\\n        // NOTE natives come back to power once numSPaceships == 0 and planet not active\\n        if (!toPlanetUpdate.active && toPlanetUpdate.numSpaceships < _natives(toPlanetUpdate.data)) {\\n            _updatePlanetUpdateStateAndResolutionStateForNativeAttack(rState, toPlanetUpdate);\\n        } else {\\n            // TODO 45min config ?\\n            // if (block.timestamp < rState.arrivalTime + 45 minutes) {\\n            if (!rState.taxed) {\\n                AccumulatedAttack memory acc = _attacks[toPlanetUpdate.location][rState.fleetOwner][rState.arrivalTime];\\n                if (acc.target == toPlanetUpdate.owner && acc.numAttackSpent != 0) {\\n                    rState.attackPower = uint16(\\n                        (uint256(rState.attackPower) *\\n                            uint256(rState.fleetQuantity) +\\n                            uint256(acc.averageAttackPower) *\\n                            uint256(acc.numAttackSpent)) / (uint256(rState.fleetQuantity) + uint256(acc.numAttackSpent))\\n                    );\\n                    rState.accumulatedAttackAdded = acc.numAttackSpent;\\n                    rState.accumulatedDefenseAdded = acc.damageCausedSoFar;\\n                }\\n            }\\n            // }\\n\\n            _updatePlanetUpdateStateAndResolutionStateForPlanetAttack(rState, toPlanetUpdate);\\n        }\\n    }\\n\\n    function _updatePlanetUpdateStateAndResolutionStateForNativeAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        // NOTE: when we are dealing with native attacks, we do not consider combined attacks\\n        // TODO We need to consider that case in the UI\\n        uint16 attack = _attack(rState.fromData);\\n        uint16 defense = _defense(toPlanetUpdate.data);\\n        uint16 natives = _natives(toPlanetUpdate.data);\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(rState.fleetQuantity, natives, attack, defense);\\n        rState.attackerLoss = attackerLoss;\\n        if (defenderLoss == natives && rState.fleetQuantity > attackerLoss) {\\n            // (attackerLoss: 0, defenderLoss: 0) means that numAttack was zero as natives cannot be zero\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity - attackerLoss;\\n            rState.defenderLoss = defenderLoss;\\n            rState.victory = true;\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n            // solhint-disable-next-line no-empty-blocks\\n        }\\n        // NOTE else (attacker lost) then nothing happen\\n    }\\n\\n    function _updatePlanetUpdateStateAndResolutionStateForPlanetAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        _updateResolutionStateFromOrbitDefense(rState, toPlanetUpdate);\\n        uint256 numDefense =\\n            toPlanetUpdate.numSpaceships + rState.accumulatedDefenseAdded + rState.orbitDefense1 + rState.orbitDefense2;\\n        uint16 production = _production(toPlanetUpdate.data);\\n\\n        if (numDefense == 0 && rState.fleetQuantity > 0) {\\n            // scenario where there is actually no defense on the place,\\n\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity;\\n            if (!toPlanetUpdate.active) {\\n                // numDefense = 0 so numAttack is the overflow, attacker took over\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint32 cap = uint32(_capWhenActive(production));\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        // numDefense = 0 so numAttack is the overflow, attacker took over\\n                        toPlanetUpdate.overflow = uint32(toPlanetUpdate.numSpaceships - cap);\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n\\n            rState.victory = true;\\n        } else {\\n            _computeAttack(rState, toPlanetUpdate, numDefense);\\n            _computeTravelingUpkeepReductionAfterAttack(rState, toPlanetUpdate, production);\\n        }\\n    }\\n\\n    function _updateResolutionStateFromOrbitDefense(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate\\n    ) internal view {\\n        // -----------------------------------------------------------------------------------------------------------\\n        // consider fleets that just departed from the planet (used to prevent front-running, see fleet sending)\\n        // -----------------------------------------------------------------------------------------------------------\\n        uint256 timeSlot = block.timestamp / (_frontrunningDelay / 2);\\n        InFlight storage slot1 = _inFlight[toPlanetUpdate.location][timeSlot - 1];\\n        rState.orbitDefense1 = slot1.flying > 2**31 ? 2**31 - 1 : uint32(slot1.flying);\\n        rState.orbitDefenseDestroyed1 = slot1.destroyed > 2**31 ? 2**31 - 1 : uint32(slot1.destroyed);\\n        InFlight storage slot2 = _inFlight[toPlanetUpdate.location][timeSlot];\\n        rState.orbitDefense2 = slot2.flying > 2**31 ? 2**31 - 1 : uint32(slot2.flying);\\n        rState.orbitDefenseDestroyed2 = slot2.destroyed > 2**31 ? 2**31 - 1 : uint32(slot2.destroyed);\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function _computeAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint256 numDefense\\n    ) internal view {\\n        uint16 attack = rState.attackPower;\\n        uint16 defense = _defense(toPlanetUpdate.data);\\n        uint256 numAttack = rState.fleetQuantity + rState.accumulatedAttackAdded;\\n        (uint32 attackerLoss, uint32 defenderLoss) = _computeFight(numAttack, numDefense, attack, defense);\\n        rState.defenderLoss = defenderLoss;\\n        rState.attackerLoss = attackerLoss;\\n\\n        // (attackerLoss: 0, defenderLoss: 0) could either mean attack was zero or defense was zero :\\n        if (rState.fleetQuantity > 0 && rState.defenderLoss == numDefense) {\\n            // NOTE Attacker wins\\n\\n            // all orbiting fleets are destroyed, inFlightPlanetLoss is all that is left\\n            uint256 inFlightPlanetLoss = numDefense - toPlanetUpdate.numSpaceships - rState.accumulatedDefenseAdded;\\n            if (inFlightPlanetLoss > ACTIVE_MASK) {\\n                // cap it\\n                // TODO investigate potential issues\\n                inFlightPlanetLoss = ACTIVE_MASK - 1;\\n            }\\n            rState.inFlightPlanetLoss = uint32(inFlightPlanetLoss);\\n\\n            rState.defenderLoss = rState.defenderLoss - rState.inFlightPlanetLoss;\\n\\n            toPlanetUpdate.numSpaceships = rState.fleetQuantity + rState.accumulatedAttackAdded - attackerLoss;\\n            rState.victory = true;\\n\\n            toPlanetUpdate.newOwner = rState.fleetOwner;\\n\\n            if (!toPlanetUpdate.active) {\\n                // attack took over, overflow is numSpaceships\\n                toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships;\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint16 production = _production(toPlanetUpdate.data);\\n                    uint32 cap = uint32(_capWhenActive(production));\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        if (toPlanetUpdate.numSpaceships - cap > toPlanetUpdate.overflow) {\\n                            toPlanetUpdate.overflow = toPlanetUpdate.numSpaceships - cap;\\n                        }\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n        } else if (rState.attackerLoss == rState.fleetQuantity + rState.accumulatedAttackAdded) {\\n            // NOTE Defender wins\\n\\n            if (defenderLoss > toPlanetUpdate.numSpaceships + rState.accumulatedDefenseAdded) {\\n                rState.inFlightPlanetLoss =\\n                    defenderLoss -\\n                    toPlanetUpdate.numSpaceships -\\n                    rState.accumulatedDefenseAdded;\\n\\n                toPlanetUpdate.numSpaceships = 0;\\n                // TODO change owner already if incative ?\\n                //  not needed though as this is the same has having numSpaceships = 1 and become zero over time\\n\\n                if (rState.orbitDefense1 >= rState.inFlightPlanetLoss) {\\n                    rState.orbitDefense1 -= rState.inFlightPlanetLoss;\\n                    rState.orbitDefenseDestroyed1 += rState.inFlightPlanetLoss;\\n                } else {\\n                    rState.orbitDefenseDestroyed1 += rState.orbitDefense1;\\n                    uint32 extra = (rState.inFlightPlanetLoss - rState.orbitDefense1);\\n                    if (rState.orbitDefense2 >= extra) {\\n                        rState.orbitDefense2 -= extra;\\n                        rState.orbitDefenseDestroyed2 += extra;\\n                    } else {\\n                        rState.orbitDefenseDestroyed2 += rState.orbitDefense2;\\n                        rState.orbitDefense2 = 0; // should never reach minus but let simply set it to zero\\n                    }\\n                    rState.orbitDefense1 = 0;\\n                }\\n            } else {\\n                toPlanetUpdate.numSpaceships =\\n                    toPlanetUpdate.numSpaceships +\\n                    rState.accumulatedDefenseAdded -\\n                    defenderLoss;\\n\\n                // TODO change owner already if incative and numSpaceship == 0 (like above)\\n                //  not needed though as this is the same has having numSpaceships = 1 and become zero over time\\n            }\\n\\n            rState.defenderLoss = rState.defenderLoss - rState.inFlightPlanetLoss;\\n\\n            if (!toPlanetUpdate.active) {\\n                if (defenderLoss > toPlanetUpdate.overflow) {\\n                    toPlanetUpdate.overflow = 0;\\n                } else {\\n                    toPlanetUpdate.overflow -= defenderLoss;\\n                }\\n            } else {\\n                if (_productionCapAsDuration > 0) {\\n                    uint16 production = _production(toPlanetUpdate.data);\\n                    uint32 cap = uint32(_capWhenActive(production));\\n                    if (toPlanetUpdate.numSpaceships > cap) {\\n                        if (defenderLoss <= toPlanetUpdate.overflow) {\\n                            toPlanetUpdate.overflow -= defenderLoss;\\n                        } else {\\n                            toPlanetUpdate.overflow = 0;\\n                        }\\n                    } else {\\n                        toPlanetUpdate.overflow = 0;\\n                    }\\n                }\\n            }\\n        } else {\\n            // should not happen\\n            // because we check for numDefense == 0 before performing the attack, see _updatePlanetUpdateStateAndResolutionStateForPlanetAttack\\n            revert(\\\"ZERO_ZERO\\\");\\n        }\\n    }\\n\\n    function _computeFight(\\n        uint256 numAttack,\\n        uint256 numDefense,\\n        uint256 attack,\\n        uint256 defense\\n    ) internal view returns (uint32 attackerLoss, uint32 defenderLoss) {\\n        if (numAttack == 0 || numDefense == 0) {\\n            // this edge case need to be considered,\\n            // as the result of this function cannot tell from it whos is winning here\\n            return (0, 0);\\n        }\\n\\n        uint256 attackFactor =\\n            numAttack * ((1000000 - _fleetSizeFactor6) + ((_fleetSizeFactor6 * numAttack) / numDefense));\\n        uint256 attackDamage = (attackFactor * attack) / defense / 1000000;\\n\\n        if (numDefense > attackDamage) {\\n            // attack fails\\n            attackerLoss = uint32(numAttack); // all attack destroyed\\n            defenderLoss = uint32(attackDamage); // 1 spaceship will be left at least as attackDamage < numDefense\\n        } else {\\n            // attack succeed\\n            uint256 defenseFactor =\\n                numDefense * ((1000000 - _fleetSizeFactor6) + ((_fleetSizeFactor6 * numDefense) / numAttack));\\n            uint256 defenseDamage = uint32((defenseFactor * defense) / attack / 1000000);\\n\\n            if (defenseDamage >= numAttack) {\\n                defenseDamage = numAttack - 1; // ensure 1 spaceship left\\n            }\\n\\n            attackerLoss = uint32(defenseDamage);\\n            defenderLoss = uint32(numDefense); // all defense destroyed\\n        }\\n    }\\n\\n    function _computeTravelingUpkeepReductionAfterAttack(\\n        ResolutionState memory rState,\\n        PlanetUpdateState memory toPlanetUpdate,\\n        uint16 production\\n    ) internal view {\\n        // allow the attacker to pay for upkeep as part of the attack\\n        // only get to keep the upkeep that was there as a result of spaceships sent away\\n\\n        uint256 capWhenActive = _capWhenActive(production);\\n\\n        int256 totalLoss =\\n            int256(uint256(rState.defenderLoss) + uint256(rState.inFlightPlanetLoss) + uint256(rState.attackerLoss));\\n        int256 newTravelingUpkeep = int256(toPlanetUpdate.travelingUpkeep) - totalLoss;\\n        if (newTravelingUpkeep < -int256(capWhenActive)) {\\n            newTravelingUpkeep = -int256(capWhenActive);\\n        }\\n        toPlanetUpdate.travelingUpkeep = int40(newTravelingUpkeep);\\n    }\\n\\n    function _recordInOrbitLossAfterAttack(ResolutionState memory rState, PlanetUpdateState memory toPlanetUpdate)\\n        internal\\n    {\\n        if (rState.inFlightPlanetLoss > 0) {\\n            InFlight storage slot1 = _inFlight[toPlanetUpdate.location][block.timestamp / (_frontrunningDelay / 2) - 1];\\n            slot1.flying = rState.orbitDefense1;\\n            slot1.destroyed = rState.orbitDefenseDestroyed1;\\n\\n            InFlight storage slot2 = _inFlight[toPlanetUpdate.location][block.timestamp / (_frontrunningDelay / 2)];\\n            slot2.flying = rState.orbitDefense2;\\n            slot2.destroyed = rState.orbitDefenseDestroyed2;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // PLANET STATS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _planetData(uint256 location) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(_genesis, location));\\n    }\\n\\n    function _subLocation(bytes32 data) internal pure returns (int8 subX, int8 subY) {\\n        subX = 1 - int8(data.value8Mod(0, 3));\\n        subY = 1 - int8(data.value8Mod(2, 3));\\n    }\\n\\n    // // 4,5,5,10,10,15,15, 20, 20, 30,30,40,40,80,80,100\\n    // bytes32 constant stakeRange = 0x000400050005000A000A000F000F00140014001E001E00280028005000500064;\\n\\n    // 6, 8, 10, 12, 14, 16, 18, 20, 20, 22, 24, 32, 40, 48, 56, 72\\n    bytes32 internal constant stakeRange = 0x00060008000A000C000E00100012001400140016001800200028003000380048;\\n\\n    function _stake(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // return data.normal16(4, 0x000400050005000A000A000F000F00140014001E001E00280028005000500064);\\n        uint8 productionIndex = data.normal8(12); // production affect the stake value\\n\\n        // TODO remove or decide otherwise:\\n        // uint16 offset = data.normal16(4, 0x0000000100010002000200030003000400040005000500060006000700070008);\\n        // uint16 stakeIndex = productionIndex + offset;\\n        // if (stakeIndex < 4) {\\n        //     stakeIndex = 0;\\n        // } else if (stakeIndex > 19) {\\n        //     stakeIndex = 15;\\n        // } else {\\n        //     stakeIndex -= 4;\\n        // }\\n        uint16 stakeIndex = productionIndex;\\n        // skip stakeIndex * 2 + 0 as it is always zero in stakeRange\\n        return uint16(uint8(stakeRange[stakeIndex * 2 + 1]));\\n    }\\n\\n    function _production(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        // TODO TRY : 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4000,4400,4800,5400,6200,7200 ?\\n\\n        // 1800,2100,2400,2700,3000,3300,3600, 3600, 3600, 3600,4200,5400,6600,7800,9000,12000\\n        // 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0\\n        return data.normal16(12, 0x0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0); // per hour\\n    }\\n\\n    function _capWhenActive(uint16 production) internal view returns (uint256) {\\n        return _acquireNumSpaceships + (uint256(production) * _productionCapAsDuration) / 1 hours;\\n    }\\n\\n    function _attack(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(20) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _defense(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 4000 + data.normal8(28) * 400; // 4,000 - 7,000 - 10,000\\n    }\\n\\n    function _speed(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 5005 + data.normal8(36) * 333; // 5,005 - 7,502.5 - 10,000\\n    }\\n\\n    function _natives(bytes32 data) internal pure returns (uint16) {\\n        require(_exists(data), \\\"PLANET_NOT_EXISTS\\\");\\n        return 15000 + data.normal8(44) * 3000; // 15,000 - 37,500 - 60,000\\n    }\\n\\n    function _exists(bytes32 data) internal pure returns (bool) {\\n        return data.value8Mod(52, 16) == 1; // 16 => 36 so : 1 planet per 6 (=24 min unit) square\\n        // also:\\n        // 20000 average starting numSpaceships (or max?)\\n        // speed of min unit = 30 min ( 1 hour per square)\\n        // production : 20000 per 6 hours\\n        // exit : 3 days ? => 72 distance\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _getPlanet(uint256 location) internal view returns (Planet storage) {\\n        return _planets[location];\\n    }\\n\\n    function _getPlanetStats(uint256 location) internal view returns (PlanetStats memory) {\\n        bytes32 data = _planetData(location);\\n        require(_exists(data), \\\"no planet in this location\\\");\\n\\n        (int8 subX, int8 subY) = _subLocation(data);\\n        return\\n            PlanetStats({\\n                subX: subX,\\n                subY: subY,\\n                stake: _stake(data),\\n                production: _production(data),\\n                attack: _attack(data),\\n                defense: _defense(data),\\n                speed: _speed(data),\\n                natives: _natives(data)\\n            });\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // UTILS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function _activeNumSpaceships(uint32 numSpaceshipsData) internal pure returns (bool active, uint32 numSpaceships) {\\n        active = (numSpaceshipsData & ACTIVE_MASK) == ACTIVE_MASK;\\n        numSpaceships = numSpaceshipsData % (ACTIVE_MASK);\\n    }\\n\\n    function _setActiveNumSpaceships(bool active, uint32 numSpaceships) internal pure returns (uint32) {\\n        return uint32((active ? ACTIVE_MASK : 0) + numSpaceships);\\n    }\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender; // TODO metatx\\n    }\\n}\\n\",\"keccak256\":\"0x1f5ce3d3dfad44677cae7acb4b489bfcc9ea2f8605797ffe7846d06b9e54ac56\",\"license\":\"AGPL-3.0\"},\"src/outerspace/facets/OuterSpaceFleetsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"./OuterSpaceFacetBase.sol\\\";\\nimport \\\"../interfaces/IOuterSpaceFleets.sol\\\";\\n\\ncontract OuterSpaceFleetsFacet is OuterSpaceFacetBase, IOuterSpaceFleets {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(Config memory config) OuterSpaceFacetBase(config) {}\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET RESOLUTION, ATTACK / REINFORCEMENT\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function resolveFleet(uint256 fleetId, FleetResolution calldata resolution) external {\\n        require(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                resolution.secret,\\n                                resolution.to,\\n                                resolution.gift,\\n                                resolution.specific,\\n                                resolution.arrivalTimeWanted\\n                            )\\n                        ),\\n                        resolution.from,\\n                        resolution.fleetSender,\\n                        resolution.operator\\n                    )\\n                )\\n            ) == fleetId,\\n            \\\"INVALID_FLEET_DATA_OR_SECRET\\\"\\n        );\\n        _resolveFleet(fleetId, resolution);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // FLEET SENDING\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function send(\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external {\\n        address sender = _msgSender();\\n        uint256 fleetId = uint256(keccak256(abi.encodePacked(toHash, from, sender, sender)));\\n        _unsafe_sendFor(\\n            fleetId,\\n            sender,\\n            FleetLaunch({fleetSender: sender, fleetOwner: sender, from: from, quantity: quantity, toHash: toHash})\\n        );\\n    }\\n\\n    function sendFor(FleetLaunch calldata launch) external {\\n        //  bytes calldata fleetSignature // TODO for fleetOwner's signature ?\\n\\n        address operator = _msgSender();\\n        if (operator != launch.fleetSender) {\\n            require(_operators[launch.fleetSender][operator], \\\"NOT_AUTHORIZED_TO_SEND\\\");\\n        }\\n        uint256 fleetId = uint256(\\n            keccak256(abi.encodePacked(launch.toHash, launch.from, launch.fleetSender, operator))\\n        );\\n\\n        // fleetOwner is basically the one receiving the planet if the attack succeed\\n        // fleetSender is the one to be used for alliance resolution\\n        // operator is just so alliance can consider fleetSender based on the rule of that operator\\n        // if (launch.fleetOwner != launch.fleetSender && launch.fleetOwner != operator) {\\n        //     // TODO use signature from fleetOwner instead?\\n        //     require(_operators[launch.fleetOwner][operator], \\\"NOT_AUTHORIZED_TO_FLEET\\\");\\n        // }\\n\\n        _unsafe_sendFor(fleetId, operator, launch);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------------------------------\\n    // GETTERS\\n    // ---------------------------------------------------------------------------------------------------------------\\n\\n    function getFleet(uint256 fleetId, uint256 from)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint40 launchTime,\\n            uint32 quantity,\\n            uint64 flyingAtLaunch, // can be more than quantity if multiple fleet were launched around the same time from the same planet\\n            uint64 destroyedAtLaunch\\n        )\\n    {\\n        launchTime = _fleets[fleetId].launchTime;\\n        quantity = _fleets[fleetId].quantity;\\n        owner = _fleets[fleetId].owner;\\n\\n        uint256 timeSlot = launchTime / (_frontrunningDelay / 2);\\n        destroyedAtLaunch = _inFlight[from][timeSlot].destroyed;\\n        flyingAtLaunch = _inFlight[from][timeSlot].flying;\\n    }\\n}\\n\",\"keccak256\":\"0xa0b651da9685e0b228491c2f7f1b0c408ea573edc085996fceb579e1da6c3927\",\"license\":\"AGPL-3.0\"},\"src/outerspace/interfaces/IOuterSpaceFleets.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../types/ImportingOuterSpaceTypes.sol\\\";\\nimport \\\"../events/ImportingOuterSpaceEvents.sol\\\";\\n\\ninterface IOuterSpaceFleets is ImportingOuterSpaceTypes, ImportingOuterSpaceEvents {\\n\\n    function resolveFleet(uint256 fleetId, FleetResolution calldata resolution) external;\\n\\n    function send(\\n        uint256 from,\\n        uint32 quantity,\\n        bytes32 toHash\\n    ) external;\\n\\n    function sendFor(FleetLaunch calldata launch) external;\\n\\n    function getFleet(uint256 fleetId, uint256 from)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint40 launchTime,\\n            uint32 quantity,\\n            uint64 flyingAtLaunch, // can be more than quantity if multiple fleet were launched around the same time from the same planet\\n            uint64 destroyedAtLaunch\\n        );\\n}\\n\",\"keccak256\":\"0x7cfc331fae6a2f99d3a92eccfd5e4a92447c6fd93e3201753490fd775f855d09\",\"license\":\"AGPL-3.0\"},\"src/outerspace/types/ImportingOuterSpaceTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ImportingOuterSpaceTypes {\\n    // front running protection : _frontruunningDelay / 2 slots\\n    struct InFlight {\\n        uint32 flying;\\n        uint32 destroyed;\\n        // STORE last attack too, to compute combined attack on it ? uint128 is plainty enough\\n    }\\n\\n    // TODO remove\\n    // struct Account {\\n    //     // TODO add more info\\n    //     // stake for example ? => coild it be used by staking ?\\n    //     // numPlanets ?\\n    //     // numSpaceships ? => probably too much ?\\n    //     uint64 totalProduction;\\n    //     uint64 productionDebt;\\n    // }\\n\\n    struct Discovered {\\n        uint32 minX;\\n        uint32 maxX;\\n        uint32 minY;\\n        uint32 maxY;\\n    }\\n\\n    // TODO split in 2 structs ? PlanetOwnership and PlanetState ?\\n    struct Planet {\\n        address owner;\\n        uint40 ownershipStartTime; // ~ 34865 years, should be enough :)\\n        uint40 exitStartTime; // ~ 34865 years, should be enough :)\\n        // TODO uint16 ?\\n        ///\\n        uint32 numSpaceships; // uint31 + first bit => active // TODO use bool active ?\\n        uint40 lastUpdated; // ~ 34865 years, should be enough :)\\n        int40 travelingUpkeep; // decrease per _upkeepProductionDecreaseRatePer10000th  * production\\n        uint32 overflow;\\n        // bool active; // TODO ?\\n        // bool exiting; // TODO ?\\n    }\\n\\n    struct Fleet {\\n        address owner;\\n        uint40 launchTime; // ~ 34865 years, should be enough :)\\n        uint32 quantity; // TODO? first bit = done? to keep quantity value on-chain post resolution, actually not needed, can be given in the hash\\n        // we got 24bit more to store if needed\\n        // operator ? // signer ?\\n    }\\n\\n    struct PlanetStats {\\n        int8 subX;\\n        int8 subY;\\n        uint16 stake;\\n        uint16 production;\\n        uint16 attack;\\n        uint16 defense;\\n        uint16 speed;\\n        uint16 natives;\\n    }\\n\\n    struct ExternalPlanet {\\n        address owner;\\n        uint40 ownershipStartTime; // ~ 34865 years, should be enough :)\\n        uint40 exitStartTime; // ~ 34865 years, should be enough :)\\n        uint32 numSpaceships;\\n        uint32 overflow;\\n        uint40 lastUpdated; // ~ 34865 years, should be enough :)\\n        bool active;\\n        // bool exiting;\\n        uint256 reward;\\n    }\\n\\n    struct FleetLaunch {\\n        address fleetSender;\\n        address fleetOwner;\\n        uint256 from;\\n        uint32 quantity;\\n        bytes32 toHash;\\n    }\\n    struct FleetResolution {\\n        uint256 from;\\n        uint256 to;\\n        uint256 distance;\\n        uint256 arrivalTimeWanted;\\n        bool gift;\\n        address specific;\\n        bytes32 secret;\\n        address fleetSender; // does not work ?\\n        address operator; // should be saved ?\\n    }\\n\\n    struct AccumulatedAttack {\\n        address target;\\n        uint32 numAttackSpent;\\n        uint32 damageCausedSoFar;\\n        uint16 averageAttackPower;\\n    }\\n}\\n\",\"keccak256\":\"0xde203f8ac79d1cce8910e4208fc94b79008b4267f50b39c44a6a1d409282cf8d\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6102406040523480156200001257600080fd5b5060405162005a1e38038062005a1e8339810160408190526200003591620001bc565b806000600482608001516200004b91906200029c565b608083015190915062000060826004620002ce565b63ffffffff1614620000b85760405162461bcd60e51b815260206004820152601d60248201527f54494d455f5045525f444953545f4e4f545f444956495349424c455f34000000604482015260640160405180910390fd5b81516001600160a01b0390811660805260208301511660a0908152604083015160c0908152606084015160e090815263ffffffff9384166101009081529285015161012090815291850151841661014090815290850151841661016090815292850151610180908152918501516101a0908152908501516101c052918401516101e052830151909116610200520151610220525062000309565b6040516101c081016001600160401b03811182821017156200018457634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114620001a257600080fd5b919050565b805163ffffffff81168114620001a257600080fd5b60006101c08284031215620001d057600080fd5b620001da62000152565b620001e5836200018a565b8152620001f5602084016200018a565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201526200023060c08401620001a7565b60c08201526200024360e08401620001a7565b60e0820152610100838101519082015261012080840151908201526101408084015190820152610160808401519082015261018062000284818501620001a7565b908201526101a0928301519281019290925250919050565b600063ffffffff80841680620002c257634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600063ffffffff808316818516818304811182151516156200030057634e487b7160e01b600052601160045260246000fd5b02949350505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516155af6200046f6000396000611dad01526000505060008181613f8501528181613fb801528181614039015261406c01526000610f8a01526000818161100401528181611370015281816126c8015281816134fd01528181613d75015281816143f501526146ee0152600081816103f5015281816116cc01528181611cb001528181611e5401528181611f0301528181611faa0152614108015260008181610f35015281816110bb01528181611231015261129501526000612706015260006125ec01526000611b0101526000611bf4015260008181610e4701526118ef015260008181612b4d01528181612cd101528181612deb01528181612efb015281816130320152818161312a015281816132270152818161330a015281816134010152613a770152600050506155af6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063112e685114610051578063cf3ecf0714610066578063ee54339314610079578063f69438c3146100ea575b600080fd5b61006461005f3660046148ae565b6100fd565b005b6100646100743660046148e3565b6101d1565b61008c6100873660046148fb565b610381565b6040805173ffffffffffffffffffffffffffffffffffffffff909616865264ffffffffff909416602086015263ffffffff9092169284019290925267ffffffffffffffff918216606084015216608082015260a00160405180910390f35b6100646100f836600461491d565b610465565b6000336040805160208101859052908101869052606082811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690820181905260748201529091506000906088016040516020818303038152906040528051906020012060001c90506101ca81836040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018863ffffffff16815260200187815250610622565b5050505050565b336101df60208301836149a5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102c7576003600061022260208501856149a5565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604091820160009081209185168152925290205460ff166102c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e440000000000000000000060448201526064015b60405180910390fd5b6000608083013560408401356102e060208601866149a5565b6040805160208101949094528301919091527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b8116828401529084901b166074820152608801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120905061037c818361037736879003870187614a13565b610622565b505050565b60008281526001602052604081205473ffffffffffffffffffffffffffffffffffffffff81169174010000000000000000000000000000000000000000820464ffffffffff1691790100000000000000000000000000000000000000000000000000900463ffffffff1690808061041960027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b61042a9064ffffffffff8716614b1f565b6000978852600460209081526040808a20928a529190529096205494979396509194505063ffffffff80841693640100000000900416919050565b8160c0820135602083013561048060a0850160808601614b43565b61049060c0860160a087016149a5565b85606001356040516020016104ef959493929190948552602085019390935290151560f81b604084015260601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166041830152605582015260750190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101208235610538610100850160e086016149a5565b61054a610120860161010087016149a5565b6040805160208101959095528401929092527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b81168285015291901b1660748201526088016040516020818303038152906040528051906020012060001c14610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f494e56414c49445f464c4545545f444154415f4f525f5345435245540000000060448201526064016102be565b61061e8282610a9b565b5050565b604080820151600090815260208190529081206040805160e081018252825473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820481166020840152790100000000000000000000000000000000000000000000000000909104811682840152600184015463ffffffff8082166060850152640100000000820490921660808401526901000000000000000000810460040b60a08401526e01000000000000000000000000000090041660c0820152908401519192506000916107069190610d43565b8254909150790100000000000000000000000000000000000000000000000000900464ffffffffff1615610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504c414e45545f4558495400000000000000000000000000000000000000000060448201526064016102be565b8154835173ffffffffffffffffffffffffffffffffffffffff90811691161461081b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016102be565b61082481610ea3565b826060015163ffffffff16816060015163ffffffff1610156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f535041434553484950535f4e4f545f454e4f554748000000000000000000000060448201526064016102be565b6108b0818460600151611353565b6108bc82826000611432565b6108ce836040015184606001516116c3565b6040518060600160405280846020015173ffffffffffffffffffffffffffffffffffffffff1681526020014264ffffffffff168152602001846060015163ffffffff168152506001600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160196101000a81548163ffffffff021916908363ffffffff1602179055509050508260400151836020015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167f22cbc8dd686d2b19557805c93c5d123703e520cb709b4c179c7b723dc621138287898860600151876060015188608001518960e00151604051610a8c9695949392919073ffffffffffffffffffffffffffffffffffffffff969096168652602086019490945263ffffffff9283166040860152908216606085015260040b60808401521660a082015260c00190565b60405180910390a45050505050565b60208181013560008181528083526040808220815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116978301979097527901000000000000000000000000000000000000000000000000009004861692810192909252600181015463ffffffff8082166060850152640100000000820490961660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490941660c08201529091610b7b9190610d43565b600085815260016020526040812091925090610b989085356117ee565b90506000816060015163ffffffff1611610c0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f464c4545545f444f5f4e4f545f4558495354000000000000000000000000000060448201526064016102be565b610c30846040013585600001358660200135846080015186610140015161195c565b610c4d846040013585606001358360200151846080015185611aed565b610c5682610ea3565b6060820151610c7382610c6e36889003880188614b5e565b611ca7565b610c9182610c8636889003880188614b5e565b856101200151611d75565b610c9b8284611d9d565b610ca58284611e2a565b610cbd82610cb836889003880188614b5e565b611f91565b610cc986838735612048565b610cd98484846101200151611432565b610ce38284612222565b600086815260016020908152604090912080547fffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffff169055610100840151610d3b9188918591890135610d3683898861241e565b612544565b505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152600080610dac85606001516125b5565b85855260808088015164ffffffffff908116602088015283151560408089019190915263ffffffff80851660608a015260a0808c015160040b948a0194909452908a01805183169389019390935291511660c0808801919091528801511660e0860152865173ffffffffffffffffffffffffffffffffffffffff9081166101008701528751166101208601529092509050610e9484604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61014084015250909392505050565b60a081015164ffffffffff1615610ef457610ec18160a001516125d4565b15610ef457600060c082018190526060820181905260808201819052610120820181905260e08201819052604090910152565b6000816020015164ffffffffff1642610f0d9190614bf1565b90506000610f1f836101400151612621565b90506000610e1061ffff8316610f5b63ffffffff7f00000000000000000000000000000000000000000000000000000000000000001686614c08565b610f659190614c08565b610f6f9190614b1f565b9050600080856080015160040b1315610ff557612710610faf7f000000000000000000000000000000000000000000000000000000000000000084614c08565b610fb99190614b1f565b9050846080015164ffffffffff16811115610fdc5750608084015164ffffffffff165b808560800151610fec9190614c45565b60040b60808601525b606085015163ffffffff1660007f000000000000000000000000000000000000000000000000000000000000000015611214576000611033866126be565b905060008860400151611047576000611049565b815b90508084111561117f5760c089015164ffffffffff1661117a5760e08901516107089063ffffffff16156110ab57828a60e0015161070861108a9190614cab565b63ffffffff1661109a9190614b1f565b90506107088110156110ab57506107085b6000610e10826110e163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168d614c08565b6110eb9190614c08565b6110f59190614b1f565b90506111018387614bf1565b811115611115576111128387614bf1565b90505b85811115611148578a604001511561113f5785611132888a614bf1565b61113c9190614cd7565b94505b60009550611177565b8a604001511561116a578061115d888a614bf1565b6111679190614cd7565b94505b6111748187614bf1565b95505b50505b6111c7565b8860400151156111c75760006111958583614bf1565b905060006111a38789614bf1565b9050818111156111bd576111b78282614bf1565b94508190505b6111748187614cd7565b88604001511561120d576000838a6080015160040b6111e69190614cef565b90506111f182614d63565b8112156112045761120182614d63565b90505b60040b60808a01525b50506112f3565b8660400151156112865782610e1061ffff871661125763ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168a614c08565b6112619190614c08565b61126b9190614b1f565b6112759190614bf1565b61127f9083614cd7565b91506112f3565b6000610e106112bb63ffffffff7f00000000000000000000000000000000000000000000000000000000000000001689614c08565b6112c790610708614c08565b6112d19190614b1f565b9050828111156112e457506000916112f1565b6112ee8184614bf1565b92505b505b638000000082106113165761130d60016380000000614d9c565b63ffffffff1691505b63ffffffff82166060880152604087015115801561133c5750606087015163ffffffff16155b1561134a5760006101208801525b50505050505050565b80826060018181516113659190614d9c565b63ffffffff169052507f00000000000000000000000000000000000000000000000000000000000000001561061e578160400151156113f05760006113ae836101400151612621565b905060006113bb826126be565b905060008363ffffffff16856080015160040b6113d89190614dc1565b9050818113156113e55750805b60040b608085015250505b8063ffffffff168260e0015163ffffffff16111561142757808260e00181815161141a9190614d9c565b63ffffffff169052505050565b600060e08301525050565b60008260a0015164ffffffffff16118015611456575060c082015164ffffffffff16155b15611464576114648261272b565b81610120015173ffffffffffffffffffffffffffffffffffffffff1682610100015173ffffffffffffffffffffffffffffffffffffffff161461153f57610120820151835473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffff000000000000000000000000000000000000000000000000009091168117740100000000000000000000000000000000000000004264ffffffffff16021785558351610100850151604051919316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a45b80156115705782547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff1683556115e1565b8160a0015164ffffffffff168260c0015164ffffffffff16146115e15760c0820151835464ffffffffff909116790100000000000000000000000000000000000000000000000000027fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff9091161783555b6115f3826040015183606001516127f0565b60019093018054608084015160e0909401514264ffffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff63ffffffff9384166e01000000000000000000000000000002167fffffffffffffffffffffffffffff00000000ffffffffff0000000000ffffffff929097166901000000000000000000027fffffffffffffffffffffffffffffffffffff0000000000ffffffffff00000000909416979092169690961791909117949094169290921792909217905550565b60006116f060027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b6116fa9042614b1f565b600084815260046020908152604080832084845290915290205490915063ffffffff166117278382614e35565b90508263ffffffff168163ffffffff16101561179f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4f524249545f4f564552464c4f5700000000000000000000000000000000000060448201526064016102be565b6000938452600460209081526040808620938652929052922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9093169290921790915550565b604080516102808101825260006080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082018190526102408201819052610260820152835473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810464ffffffffff166020830152790100000000000000000000000000000000000000000000000000900463ffffffff16918101829052606081019190915261193c82604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b6080820181905261194c90612816565b61ffff1661026082015292915050565b600080611968846128ad565b91509150600080611978856128ad565b90925090506000600284820b61199360808c901c6004614e5d565b61199d9190614f13565b600084900b6119b160808c901c6004614e5d565b6119bb9190614f13565b6119c59190614f83565b6119cf91906151b3565b6002600087900b6119f36fffffffffffffffffffffffffffffffff8d166004614e5d565b6119fd9190614f13565b600086900b611a1f6fffffffffffffffffffffffffffffffff8d166004614e5d565b611a299190614f13565b611a339190614f83565b611a3d91906151b3565b611a479190614f13565b600f0b905080611a5860028c615272565b11158015611a7b57506002611a6e8b6001614cd7565b611a789190615272565b81105b611ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f77726f6e672064697374616e636500000000000000000000000000000000000060448201526064016102be565b50505050505050505050565b6000611af8836128e1565b61ffff16611b287f0000000000000000000000000000000000000000000000000000000000000000612710614c08565b611b329088614c08565b611b3c9190614b1f565b611b4d9064ffffffffff8616614cd7565b90506000611b5b8683612978565b90508515611b765764ffffffffff8616610200840152611b85565b64ffffffffff82166102008401525b80421015611bef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f746f6f206561726c79000000000000000000000000000000000000000000000060448201526064016102be565b611c197f000000000000000000000000000000000000000000000000000000000000000082614cd7565b421061134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60448201527f737420696e20737061636500000000000000000000000000000000000000000060648201526084016102be565b6000611cd460027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b836020015164ffffffffff16611cea9190614b1f565b82516000908152600460209081526040808320848452909152902054606085015191925063ffffffff640100000000909104811691908116821015611d49578185606001818151611d3b9190614d9c565b63ffffffff16905250611d51565b600060608601525b6060850151611d609082614d9c565b63ffffffff1660a09095019490945250505050565b600080611d8383858761298f565b90151560e087015215156101009095019490945250505050565b81610100015115611e0c576127107f0000000000000000000000000000000000000000000000000000000000000000836060015163ffffffff16611de19190614c08565b611deb9190614b1f565b826060015163ffffffff16611e009190614bf1565b63ffffffff1660608301525b8160e0015115611e205761061e8282613458565b61061e8282613589565b60c082015163ffffffff161561061e5780516000908152600460205260408120816001611e7860027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b611e829042614b1f565b611e8c9190614bf1565b81526020808201929092526040908101600090812061018087015181546101a089015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009092169216919091171781558551825260049093529081209192509081611f2760027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b611f319042614b1f565b815260208101919091526040016000206101c085015181546101e087015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921692169190911717905550505050565b60a082015163ffffffff161561061e576000611fce60027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b836020015164ffffffffff16611fe49190614b1f565b60a08401518351600090815260046020818152604080842086855290915290912080549394509192612025908490640100000000900463ffffffff16614d9c565b92506101000a81548163ffffffff021916908363ffffffff160217905550505050565b61014082015163ffffffff161561037c57600081815260208181526040808320815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116958301959095527901000000000000000000000000000000000000000000000000009004841692810192909252600181015463ffffffff8082166060850152640100000000820490941660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490921660c08201529091906121369084610d43565b905061214181610ea3565b6000612151826101400151612621565b9050600061215e826126be565b9050600086610140015160030b846080015160040b61217d9190614cef565b905061218882614d63565b81121561219b5761219882614d63565b90505b600481900b60808501526121b185856000611432565b87867fb3dfee8f5fa319b23a50d6c744d7bdab47db988bb6b44eb38eaec1a967023282866060015187608001518860e001516040516122109392919063ffffffff938416815260049290920b6020830152909116604082015260600190565b60405180910390a35050505050505050565b8161012001511561229a57516000908152600960209081526040808320845173ffffffffffffffffffffffffffffffffffffffff16845282528083206102009094015164ffffffffff1683529290522080547fffff000000000000000000000000000000000000000000000000000000000000169055565b81610100015161061e5780516000908152600960209081526040808320855173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020087015164ffffffffff16855290925290912061010083015181547fffffffffffffffffffffffff000000000000000000000000000000000000000016921691909117815560c08301516101608401516123359190614e35565b815461014085015161026086015161ffff167c0100000000000000000000000000000000000000000000000000000000027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff92831674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff95909316780100000000000000000000000000000000000000000000000002949094167fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9093169290921717919091161790555050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915260608084015163ffffffff9081168352608085015160040b602084015260e0850151811660408401528316908201526101008401516124b75760006124da565b83606001518460a0015185604001516124d09190614d9c565b6124da9190614d9c565b63ffffffff908116608083015261014080860151821660a080850191909152610160870151831660c08086019190915290870151831660e0850152860151821661010084015261022086015182166101208401526102409095015116938101939093525090919050565b8273ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff16867fce4582dbaeda56557d7e73ae521699bff0c6e3a470f1f1089e8f977cac2083dd858860e0015189610120015187604051610a8c9493929190615281565b63800000008181168114906000906125cd9084615376565b9050915091565b6000808264ffffffffff1611801561261b57506126187f000000000000000000000000000000000000000000000000000000000000000064ffffffffff8416614cd7565b42115b92915050565b600061262c8261376a565b612692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61261b82600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0613786565b6000610e106126f17f000000000000000000000000000000000000000000000000000000000000000061ffff8516614c08565b6126fb9190614b1f565b61261b9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614cd7565b60006127468261010001518360000151846101400151613800565b61010083015173ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604081205491925090612780908390614cd7565b6101008401805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600260209081526040918290208590559251905184815293945016917f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b019910160405180910390a2505050565b600081836127ff576000612805565b63800000005b61280f9190614e35565b9392505050565b60006128218261376a565b612887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b612892826014613925565b6128a19060ff16610190615399565b61261b90610fa06153ba565b6000806128bc838260036139bf565b6128c79060016153d7565b91506128d683600260036139bf565b6125cd9060016153d7565b60006128ec8261376a565b612952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61295d826024613925565b61296c9060ff1661014d615399565b61261b9061138d6153ba565b600081831015612988578161280f565b5090919050565b60008073ffffffffffffffffffffffffffffffffffffffff85166129cf5760006129c684600001518660e0015186602001516139dc565b91509150613450565b825173ffffffffffffffffffffffffffffffffffffffff8681169116148015612a2757508360e0015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15612a385750600190506000613450565b836080015180612a615750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b156131605760a084015173ffffffffffffffffffffffffffffffffffffffff161580612abc57508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff16145b80612ae05750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b15612c0a5760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612b8e57600080fd5b505afa158015612ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc6919061544b565b9150506001816bffffffffffffffffffffffff1660001480612c005750846020015164ffffffffff16826bffffffffffffffffffffffff16115b9250925050613450565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415612fba578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612d865760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612d1357600080fd5b505afa158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4b919061544b565b9150506000816bffffffffffffffffffffffff1611846020015164ffffffffff16826bffffffffffffffffffffffff16119250925050613450565b825160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612e2c57600080fd5b505afa158015612e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e64919061544b565b9150506bffffffffffffffffffffffff8116612e93576000612c0085600001518760e0015187602001516139dc565b60e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612f3d57600080fd5b505afa158015612f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f75919061544b565b9150506001816bffffffffffffffffffffffff1660001480612faf5750856020015164ffffffffff16826bffffffffffffffffffffffff16115b935093505050613450565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff16111561315b5760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b15801561307357600080fd5b505afa158015613087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ab9190615480565b5090506bffffffffffffffffffffffff8116156131595760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612f26565b505b613432565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415613256578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612d865760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612cfc565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff161180156132b057508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff1614155b156134325760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b15801561334b57600080fd5b505afa15801561335f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133839190615480565b5090506bffffffffffffffffffffffff81166134305760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612f26565b505b600061344b84600001518660e0015186602001516139dc565b915091505b935093915050565b60008260600151826060015161346e9190614e35565b63ffffffff169050638000000081106134995761349060016380000000614d9c565b63ffffffff1690505b63ffffffff8116606083015260408201516134df578160e0015163ffffffff16826060015163ffffffff16111561037c57606082015163ffffffff1660e0830152505050565b60006134f76134f2846101400151612621565b6126be565b905060007f000000000000000000000000000000000000000000000000000000000000000011801561352e57508063ffffffff1682115b1561357b578260e0015163ffffffff1681846060015161354e9190614d9c565b63ffffffff1611156135765780836060015161356a9190614d9c565b63ffffffff1660e08401525b613583565b600060e08401525b50505050565b80604001511580156135b557506135a4816101400151613b2d565b61ffff16816060015163ffffffff16105b156135c45761061e8282613bc4565b8161010001516137605780516000908152600960209081526040808320855173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020087015164ffffffffff1685528352928190208151608081018352905480851680835274010000000000000000000000000000000000000000820463ffffffff9081169584019590955278010000000000000000000000000000000000000000000000008204909416928201929092527c010000000000000000000000000000000000000000000000000000000090910461ffff1660608201526101008401519092161480156136be5750602081015163ffffffff1615155b1561375e57806020015163ffffffff16836060015163ffffffff166136e39190614cd7565b816020015163ffffffff16826060015161ffff166137019190614c08565b846060015163ffffffff1685610260015161ffff166137209190614c08565b61372a9190614cd7565b6137349190614b1f565b61ffff16610260840152602081015163ffffffff9081166102408501526040820151166102208401525b505b61061e8282613caf565b600061377982603460106139bf565b60ff166001149050919050565b6000806137938585613925565b9050826137a18260026154ac565b6137ac9060016154cd565b60ff16602081106137bf576137bf6154f2565b1a836137cc8360026154ac565b60ff16602081106137df576137df6154f2565b6137ed91901a610100615399565b6137f791906153ba565b95945050505050565b6000670de0b6b3a764000061381483613e0b565b61ffff166138229190614c08565b9050828473ffffffffffffffffffffffffffffffffffffffff167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f7388360405161386d91815260200190565b60405180910390a3600083815260076020526040902054801561391d5773ffffffffffffffffffffffffffffffffffffffff85166000818152600860209081526040808320858452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558783526007909152808220829055518392879290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b509392505050565b600080613934848460406139bf565b90506000613943600283615521565b90506000613952600284615543565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff84166020811061398b5761398b6154f2565b1a905060ff82166139a95760048160ff16901c94505050505061261b565b6139b4601082615543565b94505050505061261b565b60006139d460ff80841690851686901c615565565b949350505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613a1a5750600061280f565b6040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015264ffffffffff841660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063df2c0f4990606401604080518083038186803b158015613aba57600080fd5b505afa158015613ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af2919061544b565b9150506bffffffffffffffffffffffff811615806137f757508264ffffffffff16816bffffffffffffffffffffffff16119150509392505050565b6000613b388261376a565b613b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b613ba982602c613925565b613bb89060ff16610bb8615399565b61261b90613a986153ba565b6000613bd38360800151612816565b90506000613be5836101400151613ee2565b90506000613bf7846101400151613b2d565b9050600080613c1e876060015163ffffffff168461ffff168761ffff168761ffff16613f5e565b63ffffffff8083166101408b01529193509150811661ffff8416148015613c5457508163ffffffff16876060015163ffffffff16115b1561134a57818760600151613c699190614d9c565b63ffffffff90811660608801528116610160880152600161012080890191909152875173ffffffffffffffffffffffffffffffffffffffff169087015250505050505050565b613cb982826140ff565b6000826101c001518361018001518461022001518460600151613cdc9190614e35565b613ce69190614e35565b613cf09190614e35565b63ffffffff1690506000613d08836101400151612621565b905081158015613d2257506000846060015163ffffffff16115b15613df557835173ffffffffffffffffffffffffffffffffffffffff1661012084015260608085015163ffffffff16908401526040830151613d7357606083015163ffffffff1660e0840152613de8565b7f000000000000000000000000000000000000000000000000000000000000000015613de8576000613da4826126be565b90508063ffffffff16846060015163ffffffff161115613dde57808460600151613dce9190614d9c565b63ffffffff1660e0850152613de6565b600060e08501525b505b6001610120850152613583565b613e00848484614274565b613583848483614808565b6000613e168261376a565b613e7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b6000613e8983600c613925565b905060ff81167e060008000a000c000e00100012001400140016001800200028003000380048613eba826002615399565b613ec59060016153ba565b61ffff1660208110613ed957613ed96154f2565b1a949350505050565b6000613eed8261376a565b613f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61289282601c613925565b600080851580613f6c575084155b15613f7c575060009050806140f6565b600085613fa9887f0000000000000000000000000000000000000000000000000000000000000000614c08565b613fb39190614b1f565b613fe07f0000000000000000000000000000000000000000000000000000000000000000620f4240614bf1565b613fea9190614cd7565b613ff49088614c08565b90506000620f4240856140078885614c08565b6140119190614b1f565b61401b9190614b1f565b905080871115614030578793508092506140f3565b60008861405d897f0000000000000000000000000000000000000000000000000000000000000000614c08565b6140679190614b1f565b6140947f0000000000000000000000000000000000000000000000000000000000000000620f4240614bf1565b61409e9190614cd7565b6140a89089614c08565b90506000620f4240886140bb8985614c08565b6140c59190614b1f565b6140cf9190614b1f565b63ffffffff1690508981106140ec576140e960018b614bf1565b90505b9450879350505b50505b94509492505050565b600061412c60027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b6141369042614b1f565b825160009081526004602052604081209192509081614156600185614bf1565b815260208101919091526040016000208054909150638000000063ffffffff9091161161418a57805463ffffffff16614190565b637fffffff5b63ffffffff90811661018086015281546380000000640100000000909104909116116141cb578054640100000000900463ffffffff166141d1565b637fffffff5b63ffffffff9081166101a086015283516000908152600460209081526040808320868452909152902080549091638000000091161161421757805463ffffffff1661421d565b637fffffff5b63ffffffff9081166101c08701528154638000000064010000000090910490911611614258578054640100000000900463ffffffff1661425e565b637fffffff5b63ffffffff166101e09095019490945250505050565b61026083015161014083015160009061428c90613ee2565b9050600085610240015186606001516142a59190614e35565b63ffffffff1690506000806142c483878761ffff168761ffff16613f5e565b63ffffffff8082166101608c01528083166101408c015260608b015192945090925016158015906142ff57508588610160015163ffffffff16145b156144a957600088610220015163ffffffff16886060015163ffffffff16886143289190614bf1565b6143329190614bf1565b905063800000008111156143585761434f60016380000000614d9c565b63ffffffff1690505b63ffffffff811660c08a018190526101608a01516143769190614d9c565b63ffffffff166101608a015261024089015160608a0151849161439891614e35565b6143a29190614d9c565b63ffffffff1660608901526001610120808b0191909152895173ffffffffffffffffffffffffffffffffffffffff169089015260408801516143f357606088015163ffffffff1660e08901526144a3565b7f0000000000000000000000000000000000000000000000000000000000000000156144a3576000614429896101400151612621565b90506000614436826126be565b90508063ffffffff168a6060015163ffffffff161115614498578960e0015163ffffffff16818b6060015161446b9190614d9c565b63ffffffff16111561449357808a606001516144879190614d9c565b63ffffffff1660e08b01525b6144a0565b600060e08b01525b50505b506147fe565b87610240015188606001516144be9190614e35565b63ffffffff1688610140015163ffffffff16141561479c5787610220015187606001516144eb9190614e35565b63ffffffff168163ffffffff1611156146525761022088015160608801516145139083614d9c565b61451d9190614d9c565b63ffffffff90811660c08a01908152600060608a0152516101808a0151908216911610614589578760c00151886101800181815161455b9190614d9c565b63ffffffff1690525060c08801516101a08901805161457b908390614e35565b63ffffffff1690525061467e565b876101800151886101a0018181516145a19190614e35565b63ffffffff1690525061018088015160c08901516000916145c191614d9c565b90508063ffffffff16896101c0015163ffffffff161061461a5780896101c0018181516145ee9190614d9c565b63ffffffff169052506101e08901805182919061460c908390614e35565b63ffffffff16905250614644565b886101c00151896101e0018181516146329190614e35565b63ffffffff1690525060006101c08a01525b50600061018089015261467e565b8088610220015188606001516146689190614e35565b6146729190614d9c565b63ffffffff1660608801525b8760c001518861016001516146939190614d9c565b63ffffffff1661016089015260408701516146ec578660e0015163ffffffff168163ffffffff1611156146cc57600060e08801526147fe565b808760e0018181516146de9190614d9c565b63ffffffff169052506147fe565b7f000000000000000000000000000000000000000000000000000000000000000015614797576000614722886101400151612621565b9050600061472f826126be565b90508063ffffffff16896060015163ffffffff16111561478c578860e0015163ffffffff168363ffffffff161161478057828960e0018181516147729190614d9c565b63ffffffff16905250614794565b600060e08a0152614794565b600060e08a01525b50505b6147fe565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5a45524f5f5a45524f000000000000000000000000000000000000000000000060448201526064016102be565b5050505050505050565b6000614813826126be565b9050600084610140015163ffffffff168560c0015163ffffffff1686610160015163ffffffff166148449190614cd7565b61484e9190614cd7565b9050600081856080015160040b6148659190614cef565b905061487083614d63565b8112156148835761488083614d63565b90505b60040b60809094019390935250505050565b803563ffffffff811681146148a957600080fd5b919050565b6000806000606084860312156148c357600080fd5b833592506148d360208501614895565b9150604084013590509250925092565b600060a082840312156148f557600080fd5b50919050565b6000806040838503121561490e57600080fd5b50508035926020909101359150565b60008082840361014081121561493257600080fd5b833592506101207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561496757600080fd5b506020830190509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461499757600080fd5b50565b80356148a981614975565b6000602082840312156149b757600080fd5b813561280f81614975565b604051610120810167ffffffffffffffff81118282101715614a0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b600060a08284031215614a2557600080fd5b60405160a0810181811067ffffffffffffffff82111715614a6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528235614a7d81614975565b81526020830135614a8d81614975565b602082015260408381013590820152614aa860608401614895565b6060820152608083013560808201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082614b2e57614b2e614ac1565b500490565b803580151581146148a957600080fd5b600060208284031215614b5557600080fd5b61280f82614b33565b60006101208284031215614b7157600080fd5b614b796149c2565b82358152602083013560208201526040830135604082015260608301356060820152614ba760808401614b33565b6080820152614bb860a0840161499a565b60a082015260c083013560c0820152614bd360e0840161499a565b60e0820152610100614be681850161499a565b908201529392505050565b600082821015614c0357614c03614af0565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c4057614c40614af0565b500290565b60008160040b8360040b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000001831281151615614c8857614c88614af0565b81647fffffffff018313811615614ca157614ca1614af0565b5090039392505050565b600063ffffffff80831681851681830481118215151615614cce57614cce614af0565b02949350505050565b60008219821115614cea57614cea614af0565b500190565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615614d2957614d29614af0565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615614d5d57614d5d614af0565b50500390565b60007f8000000000000000000000000000000000000000000000000000000000000000821415614d9557614d95614af0565b5060000390565b600063ffffffff83811690831681811015614db957614db9614af0565b039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614dfb57614dfb614af0565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615614e2f57614e2f614af0565b50500190565b600063ffffffff808316818516808303821115614e5457614e54614af0565b01949350505050565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff600082136000841383830485118282161615614e9657614e96614af0565b7fffffffffffffffffffffffffffffffff800000000000000000000000000000006000851286820586128184161615614ed157614ed1614af0565b60008712925085820587128484161615614eed57614eed614af0565b85850587128184161615614f0357614f03614af0565b5050509290910295945050505050565b600081600f0b83600f0b60008212826f7fffffffffffffffffffffffffffffff03821381151615614f4657614f46614af0565b827fffffffffffffffffffffffffffffffff80000000000000000000000000000000038212811615614f7a57614f7a614af0565b50019392505050565b600081600f0b83600f0b60008112817fffffffffffffffffffffffffffffffff8000000000000000000000000000000001831281151615614fc657614fc6614af0565b816f7fffffffffffffffffffffffffffffff018313811615614ca157614ca1614af0565b600181815b8085111561504357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561502957615029614af0565b8085161561503657918102915b93841c9390800290614fef565b509250929050565b80825b600180861161505d5750613450565b816f7fffffffffffffffffffffffffffffff0482111561507f5761507f614af0565b8086161561508c57918102915b9490941c93800261504e565b60008280156150ae57600181146150b8576150c1565b600191505061261b565b8291505061261b565b50816150cf5750600061261b565b506001600082138082146150e857801561510f57615131565b826f7fffffffffffffffffffffffffffffff0483111561510a5761510a614af0565b615131565b826f7fffffffffffffffffffffffffffffff0583121561513157615131614af0565b508083161561513d5750805b61514d8360011c8384028361504b565b806f7fffffffffffffffffffffffffffffff04821160008313161561517457615174614af0565b807fffffffffffffffffffffffffffffffff800000000000000000000000000000000582126000831216156151ab576151ab614af0565b029392505050565b600061280f60ff841683600f0b615098565b6000826151d45750600161261b565b816151e15750600061261b565b81600181146150ae57600281146151f757615213565b60ff84111561520857615208614af0565b50506001821b61261b565b5060208310610133831016604e8410600b8410161715615236575081810a61261b565b6152408383614fea565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156151ab576151ab614af0565b600061280f60ff8416836151c5565b84815283151560208201528215156040820152815163ffffffff1660608201526101c0810160208301516152ba608084018260040b9052565b50604083015163ffffffff811660a084015250606083015163ffffffff811660c084015250608083015163ffffffff811660e08401525060a083015161010061530a8185018363ffffffff169052565b60c085015191506101206153258186018463ffffffff169052565b60e086015192506101406153408187018563ffffffff169052565b9186015163ffffffff9081166101608701529086015181166101808601529401519093166101a090920191909152949350505050565b600063ffffffff8084168061538d5761538d614ac1565b92169190910692915050565b600061ffff80831681851681830481118215151615614cce57614cce614af0565b600061ffff808316818516808303821115614e5457614e54614af0565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800183128115161561541a5761541a614af0565b81607f018313811615614ca157614ca1614af0565b80516bffffffffffffffffffffffff811681146148a957600080fd5b6000806040838503121561545e57600080fd5b825161546981614975565b91506154776020840161542f565b90509250929050565b6000806040838503121561549357600080fd5b61549c8361542f565b9150602083015190509250929050565b600060ff821660ff84168160ff04811182151516156151ab576151ab614af0565b600060ff821660ff84168060ff038211156154ea576154ea614af0565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff83168061553457615534614ac1565b8060ff84160491505092915050565b600060ff83168061555657615556614ac1565b8060ff84160691505092915050565b60008261557457615574614ac1565b50069056fea2646970667358221220f37860c7eeaea8a9ce713cdfa5b943cda279a5fdd333684e8ad6fcda28f5abb064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063112e685114610051578063cf3ecf0714610066578063ee54339314610079578063f69438c3146100ea575b600080fd5b61006461005f3660046148ae565b6100fd565b005b6100646100743660046148e3565b6101d1565b61008c6100873660046148fb565b610381565b6040805173ffffffffffffffffffffffffffffffffffffffff909616865264ffffffffff909416602086015263ffffffff9092169284019290925267ffffffffffffffff918216606084015216608082015260a00160405180910390f35b6100646100f836600461491d565b610465565b6000336040805160208101859052908101869052606082811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001690820181905260748201529091506000906088016040516020818303038152906040528051906020012060001c90506101ca81836040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018863ffffffff16815260200187815250610622565b5050505050565b336101df60208301836149a5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102c7576003600061022260208501856149a5565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604091820160009081209185168152925290205460ff166102c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e4f545f415554484f52495a45445f544f5f53454e440000000000000000000060448201526064015b60405180910390fd5b6000608083013560408401356102e060208601866149a5565b6040805160208101949094528301919091527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b8116828401529084901b166074820152608801604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120905061037c818361037736879003870187614a13565b610622565b505050565b60008281526001602052604081205473ffffffffffffffffffffffffffffffffffffffff81169174010000000000000000000000000000000000000000820464ffffffffff1691790100000000000000000000000000000000000000000000000000900463ffffffff1690808061041960027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b61042a9064ffffffffff8716614b1f565b6000978852600460209081526040808a20928a529190529096205494979396509194505063ffffffff80841693640100000000900416919050565b8160c0820135602083013561048060a0850160808601614b43565b61049060c0860160a087016149a5565b85606001356040516020016104ef959493929190948552602085019390935290151560f81b604084015260601b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166041830152605582015260750190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101208235610538610100850160e086016149a5565b61054a610120860161010087016149a5565b6040805160208101959095528401929092527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606091821b81168285015291901b1660748201526088016040516020818303038152906040528051906020012060001c14610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f494e56414c49445f464c4545545f444154415f4f525f5345435245540000000060448201526064016102be565b61061e8282610a9b565b5050565b604080820151600090815260208190529081206040805160e081018252825473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff74010000000000000000000000000000000000000000820481166020840152790100000000000000000000000000000000000000000000000000909104811682840152600184015463ffffffff8082166060850152640100000000820490921660808401526901000000000000000000810460040b60a08401526e01000000000000000000000000000090041660c0820152908401519192506000916107069190610d43565b8254909150790100000000000000000000000000000000000000000000000000900464ffffffffff1615610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504c414e45545f4558495400000000000000000000000000000000000000000060448201526064016102be565b8154835173ffffffffffffffffffffffffffffffffffffffff90811691161461081b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e4f545f4f574e4552000000000000000000000000000000000000000000000060448201526064016102be565b61082481610ea3565b826060015163ffffffff16816060015163ffffffff1610156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f535041434553484950535f4e4f545f454e4f554748000000000000000000000060448201526064016102be565b6108b0818460600151611353565b6108bc82826000611432565b6108ce836040015184606001516116c3565b6040518060600160405280846020015173ffffffffffffffffffffffffffffffffffffffff1681526020014264ffffffffff168152602001846060015163ffffffff168152506001600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548164ffffffffff021916908364ffffffffff16021790555060408201518160000160196101000a81548163ffffffff021916908363ffffffff1602179055509050508260400151836020015173ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff167f22cbc8dd686d2b19557805c93c5d123703e520cb709b4c179c7b723dc621138287898860600151876060015188608001518960e00151604051610a8c9695949392919073ffffffffffffffffffffffffffffffffffffffff969096168652602086019490945263ffffffff9283166040860152908216606085015260040b60808401521660a082015260c00190565b60405180910390a45050505050565b60208181013560008181528083526040808220815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116978301979097527901000000000000000000000000000000000000000000000000009004861692810192909252600181015463ffffffff8082166060850152640100000000820490961660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490941660c08201529091610b7b9190610d43565b600085815260016020526040812091925090610b989085356117ee565b90506000816060015163ffffffff1611610c0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f464c4545545f444f5f4e4f545f4558495354000000000000000000000000000060448201526064016102be565b610c30846040013585600001358660200135846080015186610140015161195c565b610c4d846040013585606001358360200151846080015185611aed565b610c5682610ea3565b6060820151610c7382610c6e36889003880188614b5e565b611ca7565b610c9182610c8636889003880188614b5e565b856101200151611d75565b610c9b8284611d9d565b610ca58284611e2a565b610cbd82610cb836889003880188614b5e565b611f91565b610cc986838735612048565b610cd98484846101200151611432565b610ce38284612222565b600086815260016020908152604090912080547fffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffffff169055610100840151610d3b9188918591890135610d3683898861241e565b612544565b505050505050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152600080610dac85606001516125b5565b85855260808088015164ffffffffff908116602088015283151560408089019190915263ffffffff80851660608a015260a0808c015160040b948a0194909452908a01805183169389019390935291511660c0808801919091528801511660e0860152865173ffffffffffffffffffffffffffffffffffffffff9081166101008701528751166101208601529092509050610e9484604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b61014084015250909392505050565b60a081015164ffffffffff1615610ef457610ec18160a001516125d4565b15610ef457600060c082018190526060820181905260808201819052610120820181905260e08201819052604090910152565b6000816020015164ffffffffff1642610f0d9190614bf1565b90506000610f1f836101400151612621565b90506000610e1061ffff8316610f5b63ffffffff7f00000000000000000000000000000000000000000000000000000000000000001686614c08565b610f659190614c08565b610f6f9190614b1f565b9050600080856080015160040b1315610ff557612710610faf7f000000000000000000000000000000000000000000000000000000000000000084614c08565b610fb99190614b1f565b9050846080015164ffffffffff16811115610fdc5750608084015164ffffffffff165b808560800151610fec9190614c45565b60040b60808601525b606085015163ffffffff1660007f000000000000000000000000000000000000000000000000000000000000000015611214576000611033866126be565b905060008860400151611047576000611049565b815b90508084111561117f5760c089015164ffffffffff1661117a5760e08901516107089063ffffffff16156110ab57828a60e0015161070861108a9190614cab565b63ffffffff1661109a9190614b1f565b90506107088110156110ab57506107085b6000610e10826110e163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168d614c08565b6110eb9190614c08565b6110f59190614b1f565b90506111018387614bf1565b811115611115576111128387614bf1565b90505b85811115611148578a604001511561113f5785611132888a614bf1565b61113c9190614cd7565b94505b60009550611177565b8a604001511561116a578061115d888a614bf1565b6111679190614cd7565b94505b6111748187614bf1565b95505b50505b6111c7565b8860400151156111c75760006111958583614bf1565b905060006111a38789614bf1565b9050818111156111bd576111b78282614bf1565b94508190505b6111748187614cd7565b88604001511561120d576000838a6080015160040b6111e69190614cef565b90506111f182614d63565b8112156112045761120182614d63565b90505b60040b60808a01525b50506112f3565b8660400151156112865782610e1061ffff871661125763ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168a614c08565b6112619190614c08565b61126b9190614b1f565b6112759190614bf1565b61127f9083614cd7565b91506112f3565b6000610e106112bb63ffffffff7f00000000000000000000000000000000000000000000000000000000000000001689614c08565b6112c790610708614c08565b6112d19190614b1f565b9050828111156112e457506000916112f1565b6112ee8184614bf1565b92505b505b638000000082106113165761130d60016380000000614d9c565b63ffffffff1691505b63ffffffff82166060880152604087015115801561133c5750606087015163ffffffff16155b1561134a5760006101208801525b50505050505050565b80826060018181516113659190614d9c565b63ffffffff169052507f00000000000000000000000000000000000000000000000000000000000000001561061e578160400151156113f05760006113ae836101400151612621565b905060006113bb826126be565b905060008363ffffffff16856080015160040b6113d89190614dc1565b9050818113156113e55750805b60040b608085015250505b8063ffffffff168260e0015163ffffffff16111561142757808260e00181815161141a9190614d9c565b63ffffffff169052505050565b600060e08301525050565b60008260a0015164ffffffffff16118015611456575060c082015164ffffffffff16155b15611464576114648261272b565b81610120015173ffffffffffffffffffffffffffffffffffffffff1682610100015173ffffffffffffffffffffffffffffffffffffffff161461153f57610120820151835473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffff000000000000000000000000000000000000000000000000009091168117740100000000000000000000000000000000000000004264ffffffffff16021785558351610100850151604051919316907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a45b80156115705782547fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff1683556115e1565b8160a0015164ffffffffff168260c0015164ffffffffff16146115e15760c0820151835464ffffffffff909116790100000000000000000000000000000000000000000000000000027fffff0000000000ffffffffffffffffffffffffffffffffffffffffffffffffff9091161783555b6115f3826040015183606001516127f0565b60019093018054608084015160e0909401514264ffffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffff63ffffffff9384166e01000000000000000000000000000002167fffffffffffffffffffffffffffff00000000ffffffffff0000000000ffffffff929097166901000000000000000000027fffffffffffffffffffffffffffffffffffff0000000000ffffffffff00000000909416979092169690961791909117949094169290921792909217905550565b60006116f060027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b6116fa9042614b1f565b600084815260046020908152604080832084845290915290205490915063ffffffff166117278382614e35565b90508263ffffffff168163ffffffff16101561179f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4f524249545f4f564552464c4f5700000000000000000000000000000000000060448201526064016102be565b6000938452600460209081526040808620938652929052922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9093169290921790915550565b604080516102808101825260006080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082018190526102408201819052610260820152835473ffffffffffffffffffffffffffffffffffffffff8116825274010000000000000000000000000000000000000000810464ffffffffff166020830152790100000000000000000000000000000000000000000000000000900463ffffffff16918101829052606081019190915261193c82604080517f00000000000000000000000000000000000000000000000000000000000000006020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b6080820181905261194c90612816565b61ffff1661026082015292915050565b600080611968846128ad565b91509150600080611978856128ad565b90925090506000600284820b61199360808c901c6004614e5d565b61199d9190614f13565b600084900b6119b160808c901c6004614e5d565b6119bb9190614f13565b6119c59190614f83565b6119cf91906151b3565b6002600087900b6119f36fffffffffffffffffffffffffffffffff8d166004614e5d565b6119fd9190614f13565b600086900b611a1f6fffffffffffffffffffffffffffffffff8d166004614e5d565b611a299190614f13565b611a339190614f83565b611a3d91906151b3565b611a479190614f13565b600f0b905080611a5860028c615272565b11158015611a7b57506002611a6e8b6001614cd7565b611a789190615272565b81105b611ae1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f77726f6e672064697374616e636500000000000000000000000000000000000060448201526064016102be565b50505050505050505050565b6000611af8836128e1565b61ffff16611b287f0000000000000000000000000000000000000000000000000000000000000000612710614c08565b611b329088614c08565b611b3c9190614b1f565b611b4d9064ffffffffff8616614cd7565b90506000611b5b8683612978565b90508515611b765764ffffffffff8616610200840152611b85565b64ffffffffff82166102008401525b80421015611bef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f746f6f206561726c79000000000000000000000000000000000000000000000060448201526064016102be565b611c197f000000000000000000000000000000000000000000000000000000000000000082614cd7565b421061134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f746f6f206c6174652c20796f7572207370616365736869707320617265206c6f60448201527f737420696e20737061636500000000000000000000000000000000000000000060648201526084016102be565b6000611cd460027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b836020015164ffffffffff16611cea9190614b1f565b82516000908152600460209081526040808320848452909152902054606085015191925063ffffffff640100000000909104811691908116821015611d49578185606001818151611d3b9190614d9c565b63ffffffff16905250611d51565b600060608601525b6060850151611d609082614d9c565b63ffffffff1660a09095019490945250505050565b600080611d8383858761298f565b90151560e087015215156101009095019490945250505050565b81610100015115611e0c576127107f0000000000000000000000000000000000000000000000000000000000000000836060015163ffffffff16611de19190614c08565b611deb9190614b1f565b826060015163ffffffff16611e009190614bf1565b63ffffffff1660608301525b8160e0015115611e205761061e8282613458565b61061e8282613589565b60c082015163ffffffff161561061e5780516000908152600460205260408120816001611e7860027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b611e829042614b1f565b611e8c9190614bf1565b81526020808201929092526040908101600090812061018087015181546101a089015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009092169216919091171781558551825260049093529081209192509081611f2760027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b611f319042614b1f565b815260208101919091526040016000206101c085015181546101e087015163ffffffff908116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921692169190911717905550505050565b60a082015163ffffffff161561061e576000611fce60027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b836020015164ffffffffff16611fe49190614b1f565b60a08401518351600090815260046020818152604080842086855290915290912080549394509192612025908490640100000000900463ffffffff16614d9c565b92506101000a81548163ffffffff021916908363ffffffff160217905550505050565b61014082015163ffffffff161561037c57600081815260208181526040808320815160e081018352815473ffffffffffffffffffffffffffffffffffffffff8116825264ffffffffff7401000000000000000000000000000000000000000082048116958301959095527901000000000000000000000000000000000000000000000000009004841692810192909252600181015463ffffffff8082166060850152640100000000820490941660808401526901000000000000000000810460040b60a08401526e010000000000000000000000000000900490921660c08201529091906121369084610d43565b905061214181610ea3565b6000612151826101400151612621565b9050600061215e826126be565b9050600086610140015160030b846080015160040b61217d9190614cef565b905061218882614d63565b81121561219b5761219882614d63565b90505b600481900b60808501526121b185856000611432565b87867fb3dfee8f5fa319b23a50d6c744d7bdab47db988bb6b44eb38eaec1a967023282866060015187608001518860e001516040516122109392919063ffffffff938416815260049290920b6020830152909116604082015260600190565b60405180910390a35050505050505050565b8161012001511561229a57516000908152600960209081526040808320845173ffffffffffffffffffffffffffffffffffffffff16845282528083206102009094015164ffffffffff1683529290522080547fffff000000000000000000000000000000000000000000000000000000000000169055565b81610100015161061e5780516000908152600960209081526040808320855173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020087015164ffffffffff16855290925290912061010083015181547fffffffffffffffffffffffff000000000000000000000000000000000000000016921691909117815560c08301516101608401516123359190614e35565b815461014085015161026086015161ffff167c0100000000000000000000000000000000000000000000000000000000027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff92831674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff95909316780100000000000000000000000000000000000000000000000002949094167fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9093169290921717919091161790555050565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081019190915260608084015163ffffffff9081168352608085015160040b602084015260e0850151811660408401528316908201526101008401516124b75760006124da565b83606001518460a0015185604001516124d09190614d9c565b6124da9190614d9c565b63ffffffff908116608083015261014080860151821660a080850191909152610160870151831660c08086019190915290870151831660e0850152860151821661010084015261022086015182166101208401526102409095015116938101939093525090919050565b8273ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff16867fce4582dbaeda56557d7e73ae521699bff0c6e3a470f1f1089e8f977cac2083dd858860e0015189610120015187604051610a8c9493929190615281565b63800000008181168114906000906125cd9084615376565b9050915091565b6000808264ffffffffff1611801561261b57506126187f000000000000000000000000000000000000000000000000000000000000000064ffffffffff8416614cd7565b42115b92915050565b600061262c8261376a565b612692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61261b82600c7f0708083409600a8c0bb80ce40e100e100e100e101068151819c81e7823282ee0613786565b6000610e106126f17f000000000000000000000000000000000000000000000000000000000000000061ffff8516614c08565b6126fb9190614b1f565b61261b9063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016614cd7565b60006127468261010001518360000151846101400151613800565b61010083015173ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604081205491925090612780908390614cd7565b6101008401805173ffffffffffffffffffffffffffffffffffffffff9081166000908152600260209081526040918290208590559251905184815293945016917f4d135695228631e73b5a31e6fc8af4e5825cde63774c3c48695b4af814d7b019910160405180910390a2505050565b600081836127ff576000612805565b63800000005b61280f9190614e35565b9392505050565b60006128218261376a565b612887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b612892826014613925565b6128a19060ff16610190615399565b61261b90610fa06153ba565b6000806128bc838260036139bf565b6128c79060016153d7565b91506128d683600260036139bf565b6125cd9060016153d7565b60006128ec8261376a565b612952576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61295d826024613925565b61296c9060ff1661014d615399565b61261b9061138d6153ba565b600081831015612988578161280f565b5090919050565b60008073ffffffffffffffffffffffffffffffffffffffff85166129cf5760006129c684600001518660e0015186602001516139dc565b91509150613450565b825173ffffffffffffffffffffffffffffffffffffffff8681169116148015612a2757508360e0015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b15612a385750600190506000613450565b836080015180612a615750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b156131605760a084015173ffffffffffffffffffffffffffffffffffffffff161580612abc57508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff16145b80612ae05750825173ffffffffffffffffffffffffffffffffffffffff8681169116145b15612c0a5760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612b8e57600080fd5b505afa158015612ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc6919061544b565b9150506001816bffffffffffffffffffffffff1660001480612c005750846020015164ffffffffff16826bffffffffffffffffffffffff16115b9250925050613450565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415612fba578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612d865760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612d1357600080fd5b505afa158015612d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4b919061544b565b9150506000816bffffffffffffffffffffffff1611846020015164ffffffffff16826bffffffffffffffffffffffff16119250925050613450565b825160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401604080518083038186803b158015612e2c57600080fd5b505afa158015612e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e64919061544b565b9150506bffffffffffffffffffffffff8116612e93576000612c0085600001518760e0015187602001516139dc565b60e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f49906064015b604080518083038186803b158015612f3d57600080fd5b505afa158015612f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f75919061544b565b9150506001816bffffffffffffffffffffffff1660001480612faf5750856020015164ffffffffff16826bffffffffffffffffffffffff16115b935093505050613450565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff16111561315b5760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b15801561307357600080fd5b505afa158015613087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ab9190615480565b5090506bffffffffffffffffffffffff8116156131595760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612f26565b505b613432565b60a084015173ffffffffffffffffffffffffffffffffffffffff1660011415613256578360e0015173ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415612d865760e084015160208401516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152878316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612cfc565b60018460a0015173ffffffffffffffffffffffffffffffffffffffff161180156132b057508473ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff1614155b156134325760a08401516040517f4ed2986d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690634ed2986d90604401604080518083038186803b15801561334b57600080fd5b505afa15801561335f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133839190615480565b5090506bffffffffffffffffffffffff81166134305760e085015160208501516040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152888316602482015264ffffffffff90911660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063df2c0f4990606401612f26565b505b600061344b84600001518660e0015186602001516139dc565b915091505b935093915050565b60008260600151826060015161346e9190614e35565b63ffffffff169050638000000081106134995761349060016380000000614d9c565b63ffffffff1690505b63ffffffff8116606083015260408201516134df578160e0015163ffffffff16826060015163ffffffff16111561037c57606082015163ffffffff1660e0830152505050565b60006134f76134f2846101400151612621565b6126be565b905060007f000000000000000000000000000000000000000000000000000000000000000011801561352e57508063ffffffff1682115b1561357b578260e0015163ffffffff1681846060015161354e9190614d9c565b63ffffffff1611156135765780836060015161356a9190614d9c565b63ffffffff1660e08401525b613583565b600060e08401525b50505050565b80604001511580156135b557506135a4816101400151613b2d565b61ffff16816060015163ffffffff16105b156135c45761061e8282613bc4565b8161010001516137605780516000908152600960209081526040808320855173ffffffffffffffffffffffffffffffffffffffff908116855290835281842061020087015164ffffffffff1685528352928190208151608081018352905480851680835274010000000000000000000000000000000000000000820463ffffffff9081169584019590955278010000000000000000000000000000000000000000000000008204909416928201929092527c010000000000000000000000000000000000000000000000000000000090910461ffff1660608201526101008401519092161480156136be5750602081015163ffffffff1615155b1561375e57806020015163ffffffff16836060015163ffffffff166136e39190614cd7565b816020015163ffffffff16826060015161ffff166137019190614c08565b846060015163ffffffff1685610260015161ffff166137209190614c08565b61372a9190614cd7565b6137349190614b1f565b61ffff16610260840152602081015163ffffffff9081166102408501526040820151166102208401525b505b61061e8282613caf565b600061377982603460106139bf565b60ff166001149050919050565b6000806137938585613925565b9050826137a18260026154ac565b6137ac9060016154cd565b60ff16602081106137bf576137bf6154f2565b1a836137cc8360026154ac565b60ff16602081106137df576137df6154f2565b6137ed91901a610100615399565b6137f791906153ba565b95945050505050565b6000670de0b6b3a764000061381483613e0b565b61ffff166138229190614c08565b9050828473ffffffffffffffffffffffffffffffffffffffff167f1c363b29828a892b7cddafe9583ef52e0d5aca0ea7011bda6ccf039e1781f7388360405161386d91815260200190565b60405180910390a3600083815260076020526040902054801561391d5773ffffffffffffffffffffffffffffffffffffffff85166000818152600860209081526040808320858452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558783526007909152808220829055518392879290917f74f110a1e0cd4892234c7ba49df9f8a354cd8d29b272f7557c9b8c3c38a653369190a45b509392505050565b600080613934848460406139bf565b90506000613943600283615521565b90506000613952600284615543565b905060007f01223334444555555666666677777777888888889999999aaaaaabbbbcccddef60ff84166020811061398b5761398b6154f2565b1a905060ff82166139a95760048160ff16901c94505050505061261b565b6139b4601082615543565b94505050505061261b565b60006139d460ff80841690851686901c615565565b949350505050565b60008273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613a1a5750600061280f565b6040517fdf2c0f4900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015264ffffffffff841660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063df2c0f4990606401604080518083038186803b158015613aba57600080fd5b505afa158015613ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af2919061544b565b9150506bffffffffffffffffffffffff811615806137f757508264ffffffffff16816bffffffffffffffffffffffff16119150509392505050565b6000613b388261376a565b613b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b613ba982602c613925565b613bb89060ff16610bb8615399565b61261b90613a986153ba565b6000613bd38360800151612816565b90506000613be5836101400151613ee2565b90506000613bf7846101400151613b2d565b9050600080613c1e876060015163ffffffff168461ffff168761ffff168761ffff16613f5e565b63ffffffff8083166101408b01529193509150811661ffff8416148015613c5457508163ffffffff16876060015163ffffffff16115b1561134a57818760600151613c699190614d9c565b63ffffffff90811660608801528116610160880152600161012080890191909152875173ffffffffffffffffffffffffffffffffffffffff169087015250505050505050565b613cb982826140ff565b6000826101c001518361018001518461022001518460600151613cdc9190614e35565b613ce69190614e35565b613cf09190614e35565b63ffffffff1690506000613d08836101400151612621565b905081158015613d2257506000846060015163ffffffff16115b15613df557835173ffffffffffffffffffffffffffffffffffffffff1661012084015260608085015163ffffffff16908401526040830151613d7357606083015163ffffffff1660e0840152613de8565b7f000000000000000000000000000000000000000000000000000000000000000015613de8576000613da4826126be565b90508063ffffffff16846060015163ffffffff161115613dde57808460600151613dce9190614d9c565b63ffffffff1660e0850152613de6565b600060e08501525b505b6001610120850152613583565b613e00848484614274565b613583848483614808565b6000613e168261376a565b613e7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b6000613e8983600c613925565b905060ff81167e060008000a000c000e00100012001400140016001800200028003000380048613eba826002615399565b613ec59060016153ba565b61ffff1660208110613ed957613ed96154f2565b1a949350505050565b6000613eed8261376a565b613f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f504c414e45545f4e4f545f45584953545300000000000000000000000000000060448201526064016102be565b61289282601c613925565b600080851580613f6c575084155b15613f7c575060009050806140f6565b600085613fa9887f0000000000000000000000000000000000000000000000000000000000000000614c08565b613fb39190614b1f565b613fe07f0000000000000000000000000000000000000000000000000000000000000000620f4240614bf1565b613fea9190614cd7565b613ff49088614c08565b90506000620f4240856140078885614c08565b6140119190614b1f565b61401b9190614b1f565b905080871115614030578793508092506140f3565b60008861405d897f0000000000000000000000000000000000000000000000000000000000000000614c08565b6140679190614b1f565b6140947f0000000000000000000000000000000000000000000000000000000000000000620f4240614bf1565b61409e9190614cd7565b6140a89089614c08565b90506000620f4240886140bb8985614c08565b6140c59190614b1f565b6140cf9190614b1f565b63ffffffff1690508981106140ec576140e960018b614bf1565b90505b9450879350505b50505b94509492505050565b600061412c60027f0000000000000000000000000000000000000000000000000000000000000000614b1f565b6141369042614b1f565b825160009081526004602052604081209192509081614156600185614bf1565b815260208101919091526040016000208054909150638000000063ffffffff9091161161418a57805463ffffffff16614190565b637fffffff5b63ffffffff90811661018086015281546380000000640100000000909104909116116141cb578054640100000000900463ffffffff166141d1565b637fffffff5b63ffffffff9081166101a086015283516000908152600460209081526040808320868452909152902080549091638000000091161161421757805463ffffffff1661421d565b637fffffff5b63ffffffff9081166101c08701528154638000000064010000000090910490911611614258578054640100000000900463ffffffff1661425e565b637fffffff5b63ffffffff166101e09095019490945250505050565b61026083015161014083015160009061428c90613ee2565b9050600085610240015186606001516142a59190614e35565b63ffffffff1690506000806142c483878761ffff168761ffff16613f5e565b63ffffffff8082166101608c01528083166101408c015260608b015192945090925016158015906142ff57508588610160015163ffffffff16145b156144a957600088610220015163ffffffff16886060015163ffffffff16886143289190614bf1565b6143329190614bf1565b905063800000008111156143585761434f60016380000000614d9c565b63ffffffff1690505b63ffffffff811660c08a018190526101608a01516143769190614d9c565b63ffffffff166101608a015261024089015160608a0151849161439891614e35565b6143a29190614d9c565b63ffffffff1660608901526001610120808b0191909152895173ffffffffffffffffffffffffffffffffffffffff169089015260408801516143f357606088015163ffffffff1660e08901526144a3565b7f0000000000000000000000000000000000000000000000000000000000000000156144a3576000614429896101400151612621565b90506000614436826126be565b90508063ffffffff168a6060015163ffffffff161115614498578960e0015163ffffffff16818b6060015161446b9190614d9c565b63ffffffff16111561449357808a606001516144879190614d9c565b63ffffffff1660e08b01525b6144a0565b600060e08b01525b50505b506147fe565b87610240015188606001516144be9190614e35565b63ffffffff1688610140015163ffffffff16141561479c5787610220015187606001516144eb9190614e35565b63ffffffff168163ffffffff1611156146525761022088015160608801516145139083614d9c565b61451d9190614d9c565b63ffffffff90811660c08a01908152600060608a0152516101808a0151908216911610614589578760c00151886101800181815161455b9190614d9c565b63ffffffff1690525060c08801516101a08901805161457b908390614e35565b63ffffffff1690525061467e565b876101800151886101a0018181516145a19190614e35565b63ffffffff1690525061018088015160c08901516000916145c191614d9c565b90508063ffffffff16896101c0015163ffffffff161061461a5780896101c0018181516145ee9190614d9c565b63ffffffff169052506101e08901805182919061460c908390614e35565b63ffffffff16905250614644565b886101c00151896101e0018181516146329190614e35565b63ffffffff1690525060006101c08a01525b50600061018089015261467e565b8088610220015188606001516146689190614e35565b6146729190614d9c565b63ffffffff1660608801525b8760c001518861016001516146939190614d9c565b63ffffffff1661016089015260408701516146ec578660e0015163ffffffff168163ffffffff1611156146cc57600060e08801526147fe565b808760e0018181516146de9190614d9c565b63ffffffff169052506147fe565b7f000000000000000000000000000000000000000000000000000000000000000015614797576000614722886101400151612621565b9050600061472f826126be565b90508063ffffffff16896060015163ffffffff16111561478c578860e0015163ffffffff168363ffffffff161161478057828960e0018181516147729190614d9c565b63ffffffff16905250614794565b600060e08a0152614794565b600060e08a01525b50505b6147fe565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5a45524f5f5a45524f000000000000000000000000000000000000000000000060448201526064016102be565b5050505050505050565b6000614813826126be565b9050600084610140015163ffffffff168560c0015163ffffffff1686610160015163ffffffff166148449190614cd7565b61484e9190614cd7565b9050600081856080015160040b6148659190614cef565b905061487083614d63565b8112156148835761488083614d63565b90505b60040b60809094019390935250505050565b803563ffffffff811681146148a957600080fd5b919050565b6000806000606084860312156148c357600080fd5b833592506148d360208501614895565b9150604084013590509250925092565b600060a082840312156148f557600080fd5b50919050565b6000806040838503121561490e57600080fd5b50508035926020909101359150565b60008082840361014081121561493257600080fd5b833592506101207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561496757600080fd5b506020830190509250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461499757600080fd5b50565b80356148a981614975565b6000602082840312156149b757600080fd5b813561280f81614975565b604051610120810167ffffffffffffffff81118282101715614a0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b600060a08284031215614a2557600080fd5b60405160a0810181811067ffffffffffffffff82111715614a6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528235614a7d81614975565b81526020830135614a8d81614975565b602082015260408381013590820152614aa860608401614895565b6060820152608083013560808201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082614b2e57614b2e614ac1565b500490565b803580151581146148a957600080fd5b600060208284031215614b5557600080fd5b61280f82614b33565b60006101208284031215614b7157600080fd5b614b796149c2565b82358152602083013560208201526040830135604082015260608301356060820152614ba760808401614b33565b6080820152614bb860a0840161499a565b60a082015260c083013560c0820152614bd360e0840161499a565b60e0820152610100614be681850161499a565b908201529392505050565b600082821015614c0357614c03614af0565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614c4057614c40614af0565b500290565b60008160040b8360040b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000001831281151615614c8857614c88614af0565b81647fffffffff018313811615614ca157614ca1614af0565b5090039392505050565b600063ffffffff80831681851681830481118215151615614cce57614cce614af0565b02949350505050565b60008219821115614cea57614cea614af0565b500190565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615614d2957614d29614af0565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615614d5d57614d5d614af0565b50500390565b60007f8000000000000000000000000000000000000000000000000000000000000000821415614d9557614d95614af0565b5060000390565b600063ffffffff83811690831681811015614db957614db9614af0565b039392505050565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03841381151615614dfb57614dfb614af0565b827f8000000000000000000000000000000000000000000000000000000000000000038412811615614e2f57614e2f614af0565b50500190565b600063ffffffff808316818516808303821115614e5457614e54614af0565b01949350505050565b600081600f0b83600f0b6f7fffffffffffffffffffffffffffffff600082136000841383830485118282161615614e9657614e96614af0565b7fffffffffffffffffffffffffffffffff800000000000000000000000000000006000851286820586128184161615614ed157614ed1614af0565b60008712925085820587128484161615614eed57614eed614af0565b85850587128184161615614f0357614f03614af0565b5050509290910295945050505050565b600081600f0b83600f0b60008212826f7fffffffffffffffffffffffffffffff03821381151615614f4657614f46614af0565b827fffffffffffffffffffffffffffffffff80000000000000000000000000000000038212811615614f7a57614f7a614af0565b50019392505050565b600081600f0b83600f0b60008112817fffffffffffffffffffffffffffffffff8000000000000000000000000000000001831281151615614fc657614fc6614af0565b816f7fffffffffffffffffffffffffffffff018313811615614ca157614ca1614af0565b600181815b8085111561504357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561502957615029614af0565b8085161561503657918102915b93841c9390800290614fef565b509250929050565b80825b600180861161505d5750613450565b816f7fffffffffffffffffffffffffffffff0482111561507f5761507f614af0565b8086161561508c57918102915b9490941c93800261504e565b60008280156150ae57600181146150b8576150c1565b600191505061261b565b8291505061261b565b50816150cf5750600061261b565b506001600082138082146150e857801561510f57615131565b826f7fffffffffffffffffffffffffffffff0483111561510a5761510a614af0565b615131565b826f7fffffffffffffffffffffffffffffff0583121561513157615131614af0565b508083161561513d5750805b61514d8360011c8384028361504b565b806f7fffffffffffffffffffffffffffffff04821160008313161561517457615174614af0565b807fffffffffffffffffffffffffffffffff800000000000000000000000000000000582126000831216156151ab576151ab614af0565b029392505050565b600061280f60ff841683600f0b615098565b6000826151d45750600161261b565b816151e15750600061261b565b81600181146150ae57600281146151f757615213565b60ff84111561520857615208614af0565b50506001821b61261b565b5060208310610133831016604e8410600b8410161715615236575081810a61261b565b6152408383614fea565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156151ab576151ab614af0565b600061280f60ff8416836151c5565b84815283151560208201528215156040820152815163ffffffff1660608201526101c0810160208301516152ba608084018260040b9052565b50604083015163ffffffff811660a084015250606083015163ffffffff811660c084015250608083015163ffffffff811660e08401525060a083015161010061530a8185018363ffffffff169052565b60c085015191506101206153258186018463ffffffff169052565b60e086015192506101406153408187018563ffffffff169052565b9186015163ffffffff9081166101608701529086015181166101808601529401519093166101a090920191909152949350505050565b600063ffffffff8084168061538d5761538d614ac1565b92169190910692915050565b600061ffff80831681851681830481118215151615614cce57614cce614af0565b600061ffff808316818516808303821115614e5457614e54614af0565b60008160000b8360000b60008112817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800183128115161561541a5761541a614af0565b81607f018313811615614ca157614ca1614af0565b80516bffffffffffffffffffffffff811681146148a957600080fd5b6000806040838503121561545e57600080fd5b825161546981614975565b91506154776020840161542f565b90509250929050565b6000806040838503121561549357600080fd5b61549c8361542f565b9150602083015190509250929050565b600060ff821660ff84168160ff04811182151516156151ab576151ab614af0565b600060ff821660ff84168060ff038211156154ea576154ea614af0565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff83168061553457615534614ac1565b8060ff84160491505092915050565b600060ff83168061555657615556614ac1565b8060ff84160691505092915050565b60008261557457615574614ac1565b50069056fea2646970667358221220f37860c7eeaea8a9ce713cdfa5b943cda279a5fdd333684e8ad6fcda28f5abb064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17371,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_planets",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Planet)24152_storage)"
      },
      {
        "astId": 17376,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_fleets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Fleet)24159_storage)"
      },
      {
        "astId": 17380,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_stakeReadyToBeWithdrawn",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17386,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 17393,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_inFlight",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)24128_storage))"
      },
      {
        "astId": 17396,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_discovered",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Discovered)24137_storage"
      },
      {
        "astId": 17400,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_prevRewardIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17404,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17410,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_rewardsToWithdraw",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 17419,
        "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
        "label": "_attacks",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)24232_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int40": {
        "encoding": "inplace",
        "label": "int40",
        "numberOfBytes": "5"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)24232_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(AccumulatedAttack)24232_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)24232_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(AccumulatedAttack)24232_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InFlight)24128_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct ImportingOuterSpaceTypes.InFlight))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InFlight)24128_storage)"
      },
      "t_mapping(t_uint256,t_struct(AccumulatedAttack)24232_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.AccumulatedAttack)",
        "numberOfBytes": "32",
        "value": "t_struct(AccumulatedAttack)24232_storage"
      },
      "t_mapping(t_uint256,t_struct(Fleet)24159_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.Fleet)",
        "numberOfBytes": "32",
        "value": "t_struct(Fleet)24159_storage"
      },
      "t_mapping(t_uint256,t_struct(InFlight)24128_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.InFlight)",
        "numberOfBytes": "32",
        "value": "t_struct(InFlight)24128_storage"
      },
      "t_mapping(t_uint256,t_struct(Planet)24152_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ImportingOuterSpaceTypes.Planet)",
        "numberOfBytes": "32",
        "value": "t_struct(Planet)24152_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AccumulatedAttack)24232_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.AccumulatedAttack",
        "members": [
          {
            "astId": 24225,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "target",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24227,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "numAttackSpent",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24229,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "damageCausedSoFar",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24231,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "averageAttackPower",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Discovered)24137_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Discovered",
        "members": [
          {
            "astId": 24130,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "minX",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24132,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "maxX",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24134,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "minY",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24136,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "maxY",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Fleet)24159_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Fleet",
        "members": [
          {
            "astId": 24154,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24156,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "launchTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 24158,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "quantity",
            "offset": 25,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(InFlight)24128_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.InFlight",
        "members": [
          {
            "astId": 24125,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "flying",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 24127,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "destroyed",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Planet)24152_storage": {
        "encoding": "inplace",
        "label": "struct ImportingOuterSpaceTypes.Planet",
        "members": [
          {
            "astId": 24139,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 24141,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "ownershipStartTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 24143,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "exitStartTime",
            "offset": 25,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 24145,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "numSpaceships",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 24147,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "lastUpdated",
            "offset": 4,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 24149,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "travelingUpkeep",
            "offset": 9,
            "slot": "1",
            "type": "t_int40"
          },
          {
            "astId": 24151,
            "contract": "src/outerspace/facets/OuterSpaceFleetsFacet.sol:OuterSpaceFleetsFacet",
            "label": "overflow",
            "offset": 14,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}